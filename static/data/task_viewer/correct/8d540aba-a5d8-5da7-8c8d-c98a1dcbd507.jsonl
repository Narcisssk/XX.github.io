{"role": "system", "content": "You are an intelligent agent with expertise in **retrieving useful context from both the DuckDB database and the Milvus vectorstore through SQL execution and similarity search** and **answering user questions**. You will be given a natural language question concerning PDF files, along with the schema of both the database and the vectorstore. Your ultimate goal is to answer the input question with pre-defined answer format. The DuckDB database contains all parsed content of raw PDF files, while the Milvus vectorstore encodes specific column cells from the database as vectors. You can predict executable actions, interact with the hybrid environment (including database and vectorstore) across multiple turns, and retrieve necessary context until you are confident in resolving the question.\n\n--------\n\n## Task Description\nEach task consists of the following parts:\n\n[Question]: User question regarding the PDF, e.g., Is there any ...?\n[Answer Format]: it describes the format of the final answer, e.g., the answer is \"Yes\" or \"No\" without punctuation.\n[Anchor PDF]: Optional, a python str or list, the PDF(s) you must use to answer the question.\n[Reference PDF]: Optional, a python str or list, the PDF(s) you may use to answer the question.\n[Conference]: Optional, a python str or list, the conference(s) and year(s) of the relevant papers for retrieval.\n[Database Schema]: A detailed serialized schema of the DuckDB database for reference when generating SQL queries. It includes 1) tables, 2) columns and their data types, 3) descriptions for these schema items, and 4) primary key and foreign key constraints.\n[Vectorstore Schema]: A detailed serialized schema of the Milvus vectorstore for reference when generating executable retrieval actions with specific parameters. It includes 1) collections, 2) fields, 3) encodable (table, column) pairs in the relational database where the vectorized content originates, and 4) grammar for valid filter rules.\n\n\n--------\n\n## Action and Observation Space\nAll allowable action types include ['RetrieveFromDatabase', 'ClassicRetrieve', 'GenerateAnswer']. Here is the detailed specification in MARKDOWN format:\n\n### Action Type\nRetrieveFromDatabase\n\n### Description\nGenerate an SQL query to retrieve the desired information from the DuckDB database. Please refer to the concrete database schema to produce a valid and executable SQL.\n\n### Observation\nThe observation space is the execution result of the SQL query. You do not need to worry about the actual execution, we will perform it for you. If the SQL failed to execute, we will return the error message. Extremely long SQL output will be truncated.\n\n### Syntax and Parameters (MARKDOWN Format)\nRetrieveFromDatabase(sql: str)\n- sql: str, required. The concrete DuckDB SQL query to execute and retrieve results.\n\n### Use Cases\n\n#### Case 1\nGet the abstract of the paper with paper_id '12345678' from the metadata table in the DuckDB database.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT abstract FROM metadata WHERE paper_id = '12345678';\")\n\n\n#### Case 2\nFind which page in the paper with paper_id '12345678' contains Figure 3.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT pages.page_number FROM images JOIN pages JOIN metadata ON images.ref_page_id = pages.page_id AND pages.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '12345678' AND images.image_caption LIKE '%Figure 3%';\")\n\n\n----\n\n### Action Type\nClassicRetrieve\n\n### Description\nGiven a query text, retrieve relevant context from the Milvus vectorstore.\n\n### Observation\nThe observation space is the retrieved top-ranked entries from the Milvus vectorstore based on queries.\n\n### Syntax and Parameters (MARKDOWN Format)\nClassicRetrieve(query: str, limit: int = 5)\n- query: str, required. The query text will be encoded and used to search for relevant context. You can rephrase the original user question to obtain a more clear and structured query requirement.\n- limit: int, optional, default to 5. The number of top-ranked context to retrieve. Please set it to a positive integer to limit the number of returned results. Extremely large limit values may be truncated.\n\n### Use Cases\n\n#### Case 1\nRetrieve top 5 pieces about a certain topic.\n\n[Action]: ClassicRetrieve(query='Is there any work about the topic structured RAG?')\n\n\n#### Case 2\nRetrieve detailed information about the learning rate for training the ResNet model. The top 4 most relevant entries will be returned based on the query.\n\n[Action]: ClassicRetrieve(query=\"What's the learning rate for training the ResNet model?\", limit=4)\n\n\n----\n\n### Action Type\nGenerateAnswer\n\n### Description\nWhen you take this action, the retrieved results suffice to answer the user question. PLEASE STRICTLY ADHERE TO THE ANSWER FORMAT FOR THE CURRENT QUESTION.\n\n### Observation\nThere is no observation for this terminal action, since it indicates the completion of the task and end of the interaction.\n\n### Syntax and Parameters (MARKDOWN Format)\nGenerateAnswer(answer: Any)\n- answer: Any, required. The final answer to the user question. Please adhere to the answer format for the current question.\n\n### Use Cases\n\n#### Case 1\nThe answer to the user question is 42.\n\n[Action]: GenerateAnswer(answer=42)\n\n\n#### Case 2\nThe answer to the user question is a list of strings: ['Results', 'Discussion'].\n\n[Action]: GenerateAnswer(answer=['Results', 'Discussion'])\n\n\n\n--------\n\n## Interaction Framework\n\nThe main interaction procedure proceeds like this:\n\n----\n\n[Thought]: ... reasoning process, why to take this action ...\n[Action]: ... which action to take, please strictly conform to the action specification ...\n[Observation]: ... execution results or error message after taking the action ...\n\n... # more interleaved triplets of ([Thought], [Action], [Observation])\n\n[Thought]: ... reasoning process to produce the final answer ...\n[Action]: ... the terminate action `GenerateAnswer`, there is no further observation ...\n\n----\n\nIn general, the main interaction loop consists of an interleaved of triplets ([Thought], [Action], [Observation]), except the last `GenerateAnswer` action which does not have \"[Observation]:\". You need to predict the \"[Thought]: ...\" followed by the \"[Action]: ...\" for each turn, and we will execute your action in the environment and provide the \"[Observation]: ...\" for the previous action.\n\n--------\n\n## Suggestions or Hints for Agent Interaction\n\n1. Explore multiple retrieval strategies. For example:\n- Experiment with different (table, column) pairs to extract diverse types of information.\n- Query various embedding models (collections) to find the most relevant context.\n\n2. Combine both structured and unstructured data. Concretely:\n- Use SQL queries to retrieve precise facts and structured data. Pay special attention to morphological variations in cell values.\n- Perform similarity searches in the vectorstore to capture semantic relationships and hidden insights.\n\n3. Iterate and refine:\n- If SQL execution result is not satisfactory, try alternative SQL queries to explore the database content carefully.\n- If the vector-based neural retrieval is insufficient, try alternative approaches or parameter settings.\n- Use your findings to validate or enrich the final response.\n\n4. Ensure confidence. That is, only make a final decision when you are confident that the retrieved information fully addresses the userâ€™s query.\n\n\nRemember that, for each question, you only have 20 interaction turns at most. Now, let's start!\n"}
{"role": "user", "content": "[Question]: The anchor paper mentioned a service which uses the methodology proposed in this paper. What is the name of the service? On which page of the paper can I find graphic information on this service?\n[Answer Format]: Your answer should be a python list with 2 elements, the first element being the name of the service, and the second element being the page number. The first element should be a string and the second element should be an integer. Use the exact name of the service from the paper without changing CAPITALIZATION.\n[Anchor PDF]: '0127a369-a186-55a5-bced-55942dcb5e9f'\n[Database Schema]: The database schema for /home/htc981/workspace/project/HNS-RAG/data/database/ai_research/ai_research.sql is as follows:\n/* database ai_research: This database contains information about AI research papers. Each PDF file is represented or parsed via different views, e.g., pages, sections, figures, tables, and references. We also extract the concrete content inside each concrete element via OCR.\n*/\n/* table metadata: This table stores metadata about each paper, including the number of pages, paper path and paper id.\n*/\nCREATE TABLE IF NOT EXISTS metadata (\n\tpaper_id UUID, -- A unique identifier for this paper.\n\ttitle VARCHAR, -- The title of this paper.\n\tabstract VARCHAR, -- The abstract of this paper.\n\tnum_pages INTEGER, -- The number of pages in this paper.\n\tconference_full VARCHAR, -- The full name of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tconference_abbreviation VARCHAR, -- The abbreviation of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tpub_year INTEGER, -- The year when this paper was published.\n\tvolume VARCHAR, -- The volume of the conference where this paper was published. e.g. findings.\n\tdownload_url VARCHAR, -- The url from which the paper can be downloaded.\n\tbibtex VARCHAR, -- The bibtex of this paper.\n\tauthors VARCHAR[], -- The full names of authors of this paper.\n\tpdf_path VARCHAR, -- The path to the PDF file of this paper.\n\ttldr VARCHAR, -- A brief summary of the paper's main idea or findings generated by LLM based on title and abstract.\n\ttags VARCHAR[], -- Keywords representing the paper's topics, methods, or applications generated by LLM based on title and abstract.,\n\tPRIMARY KEY (paper_id)\n);\n/* table pages: This table stores information of the pages in the papers, including their content, size and their order within the paper. The pagesare extracted using PyMuPDF.\n*/\nCREATE TABLE IF NOT EXISTS pages (\n\tpage_id UUID, -- A unique identifier for each page.\n\tpage_number INTEGER, -- The page number in the current paper, starting from 1.\n\tpage_width INTEGER, -- The pixel width of the current page.\n\tpage_height INTEGER, -- The pixel height of the current page.\n\tpage_content VARCHAR, -- The content of the page.\n\tpage_summary VARCHAR, -- A brief summary of the page content, generated by LLM, focusing on key information and describing the page content.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (page_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table images: This table stores the information about images in each paper. The images are extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS images (\n\timage_id UUID, -- The unique identifier of the image.\n\timage_caption VARCHAR, -- The caption of this image, \"\" if it doesn't have one.\n\timage_summary VARCHAR, -- A brief summary of the image, generated by LLM, focusing on key information and describing the image.\n\tbounding_box INTEGER[4], -- The bounding box of the figure in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height which are used to determine the shape of the rectangle.\n\tordinal INTEGER, -- Each figure is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (image_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table chunks: This table contains the information of each chunk of text (chunk size = 512 tokens with no overlapping) in each page of the paper. A chunk is a sub-text that is extracted from the main text using langchain, such as a sentence or a paragraph.\n*/\nCREATE TABLE IF NOT EXISTS chunks (\n\tchunk_id UUID, -- A unique identifier for each chunk of text.\n\ttext_content VARCHAR, -- The text content of the current chunk.\n\tordinal INTEGER, -- Each chunk is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (chunk_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table tables: This table stores information about tables extracted from pages using MinerU, including content (in html format), bounding box and summary of each table generated by LLM.\n*/\nCREATE TABLE IF NOT EXISTS tables (\n\ttable_id UUID, -- A unique identifier for each table.\n\ttable_caption VARCHAR, -- Caption of the table, showing key information of the table.\n\ttable_content VARCHAR, -- The content of the table in html format.\n\ttable_summary VARCHAR, -- A brief summary of the table content generated by LLM, focusing on key information and describing the table content.\n\tbounding_box INTEGER[4], -- The bounding box of the table in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height.\n\tordinal INTEGER, -- Each table is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this table is located.,\n\tPRIMARY KEY (table_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table sections: This table contains the text content of each section in the paper, e.g. `Introduction`, `Experiment`, `Conclusion`, `Reference`. The sections are extracted using PyMuPDF or MinerU.\n*/\nCREATE TABLE IF NOT EXISTS sections (\n\tsection_id UUID, -- A unique identifier for each section of text.\n\tsection_title VARCHAR, -- The title of the current section.\n\tsection_content VARCHAR, -- The text content of the current section.\n\tsection_summary VARCHAR, -- A brief summary of the section content generated by LLM, focusing on key information and describing the section content.\n\tordinal INTEGER, -- Each section is labeled with one distinct integer number in the paper, which starts from 0.\n\tpage_numbers INTEGER[], -- A list of page numbers where current section is located in the relevant paper.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (section_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table equations: This table stores information about equations extracted from pages using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS equations (\n\tequation_id UUID, -- A unique identifier for each equation.\n\tequation_content VARCHAR, -- Content of the equation in latex format.\n\tordinal INTEGER, -- Each equation is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the paper ID in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the page ID in the `pages` table where this equation is located.,\n\tPRIMARY KEY (equation_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table reference: This table stores information about references extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS reference (\n\treference_id UUID, -- A unique identifier for each reference.\n\treference_content VARCHAR, -- Content of the reference.\n\tordinal INTEGER, -- Each reference is labeled with one distinct integer number according to its order in the paper, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this reference is located.,\n\tPRIMARY KEY (reference_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n[Vectorstore Schema]: The vectorstore schema for ai_research is as follows. You can try collections with different encoding models or modalities:\n[\n    {\n        \"collection_name\": \"text_bm25_en\",\n        \"modality\": \"text\",\n        \"embed_type\": \"bm25\",\n        \"embed_model\": \"en\",\n        \"description\": \"This collection is used to store the sparse embeddings generated by the BM25 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric inner-product (IP).\",\n        \"fields\": [\n            {\n                \"name\": \"id\",\n                \"dtype\": \"INT64\",\n                \"is_primary\": true,\n                \"description\": \"The unique id for each encoded text vector in this collection.\"\n            },\n            {\n                \"name\": \"vector\",\n                \"dtype\": \"SPARSE_FLOAT_VECTOR\",\n                \"description\": \"The encoded sparse vector of the text content generated by the BM25 model. Note that, the raw text content can be uniquely identified by the triplet fields below: `table_name`, `column_name`, `primary_key`.\"\n            },\n            {\n                \"name\": \"pdf_id\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The unique id of the PDF file stored in the relational database that the encoded text belongs to. This field can be used to quickly filter the search space.\"\n            },\n            {\n                \"name\": \"page_number\",\n                \"dtype\": \"INT16\",\n                \"description\": \"The page number in the PDF file that the encoded text belongs to (starting from 1). This field can be used to quickly filter the search space. Value -1 means unknown.\"\n            },\n            {\n                \"name\": \"table_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which table in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"column_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which column under `table_name` in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"primary_key\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The primary key value of `table_name` (or which row) in the relational database that the text content belongs to. Note that, the triplet (`table_name`, `column_name`, `primary_key`) can be used to construct a one-to-one mapping between the `text` field in the current vectorstore and the cell entry in the relational database.\"\n            }\n        ]\n    },\n    {\n        \"collection_name\": \"text_sentence_transformers_all_minilm_l6_v2\",\n        \"modality\": \"text\",\n        \"embed_type\": \"sentence_transformers\",\n        \"embed_model\": \"all-MiniLM-L6-v2\",\n        \"description\": \"This collection is used to store the embeddings generated by the all-MiniLM-L6-v2 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric COSINE.\",\n        \"fields\": \"The fields of this collection are similar to the `text_bm25_en` collection.\"\n    }\n]\n\nThe following lists all encodable (table_name, column_name, encode_modality) information from the corresponding DuckDB database, where the encoded vector entries are sourced. Note that, for text modality, we directly encode cell values from the `table_name.column_name`; for image modality, we encode the cropped images for `page_number` in `pdf_id` with bounding boxes from `table_name.column_name`. You can leverage them for filter condition during similarity search:\n[\n    [\n        \"metadata\",\n        \"title\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"abstract\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"bibtex\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"tldr\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_content\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_summary\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_caption\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_summary\",\n        \"text\"\n    ],\n    [\n        \"chunks\",\n        \"text_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_caption\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_summary\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_title\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_content\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_summary\",\n        \"text\"\n    ],\n    [\n        \"equations\",\n        \"equation_content\",\n        \"text\"\n    ],\n    [\n        \"reference\",\n        \"reference_content\",\n        \"text\"\n    ]\n]\n\nHere are the operators that you can use in the filtering condition for the vectorstore:\n{\n    \"operators\": {\n        \"logical\": [\n            {\n                \"symbol\": \"not\",\n                \"example\": \"not expr\",\n                \"description\": \"True if expr is false.\"\n            },\n            {\n                \"symbol\": \"and\",\n                \"example\": \"expr1 and expr2\",\n                \"description\": \"True if both expr1 and expr2 are true.\"\n            },\n            {\n                \"symbol\": \"or\",\n                \"example\": \"expr1 or expr2\",\n                \"description\": \"True if either expr1 or expr2 are true.\"\n            }\n        ],\n        \"binary arithmetic\": [\n            {\n                \"symbol\": \"+\",\n                \"example\": \"a + b\",\n                \"description\": \"Add the two operands.\"\n            },\n            {\n                \"symbol\": \"-\",\n                \"example\": \"a - b\",\n                \"description\": \"Subtract the second operand from the first operand.\"\n            },\n            {\n                \"symbol\": \"*\",\n                \"example\": \"a * b\",\n                \"description\": \"Multiply the two operands.\"\n            },\n            {\n                \"symbol\": \"/\",\n                \"example\": \"a / b\",\n                \"description\": \"Divide the first operand by the second operand.\"\n            },\n            {\n                \"symbol\": \"**\",\n                \"example\": \"a ** b\",\n                \"description\": \"Raise the first operand to the power of the second operand.\"\n            },\n            {\n                \"symbol\": \"%\",\n                \"example\": \"a % b\",\n                \"description\": \"Divide the first operand by the second operand and yield the remainder portion.\"\n            }\n        ],\n        \"relational\": [\n            {\n                \"symbol\": \"<\",\n                \"example\": \"a < b\",\n                \"description\": \"True if a is less than b.\"\n            },\n            {\n                \"symbol\": \">\",\n                \"example\": \"a > b\",\n                \"description\": \"True if a is greater than b.\"\n            },\n            {\n                \"symbol\": \"==\",\n                \"example\": \"a == b\",\n                \"description\": \"True if a is equal to b. Please use **two** equal signs for equality comparison.\"\n            },\n            {\n                \"symbol\": \"!=\",\n                \"example\": \"a != b\",\n                \"description\": \"True if a is not equal to b.\"\n            },\n            {\n                \"symbol\": \"<=\",\n                \"example\": \"a <= b\",\n                \"description\": \"True if a is less than or equal to b.\"\n            },\n            {\n                \"symbol\": \">=\",\n                \"example\": \"a >= b\",\n                \"description\": \"True if a is greater than or equal to b.\"\n            },\n            {\n                \"symbol\": \"in\",\n                \"example\": \"a in [b, c, ...]\",\n                \"description\": \"True if a is equal to any of the values in the list.\"\n            }\n        ],\n        \"array operations\": [\n            {\n                \"symbol\": \"[]\",\n                \"example\": \"bbox[0]\",\n                \"description\": \"This expression gets the first element in array bbox. For example, 'bbox[0] < 50' evaluates to true if the value of bbox[0] is less than 50.\"\n            },\n            {\n                \"symbol\": \"array_contains\",\n                \"example\": \"array_contains(bbox, 100)\",\n                \"description\": \"This expression evaluates to true if array bbox contains element 100.\"\n            },\n            {\n                \"symbol\": \"array_length\",\n                \"example\": \"array_length(int_array) == 4\",\n                \"description\": \"This expression evaluates to true if int_array contains exactly 4 elements.\"\n            }\n        ]\n    },\n    \"use cases\": [\n        {\n            \"example\": \"table_name == 'chunks' and column_name == 'text_content'\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and column_name equal to 'text_content'.\"\n        },\n        {\n            \"example\": \"table_name == 'chunks' and primary_key in ['123', '456', '789']\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and primary_key equal to any of the values in the list ['123', '456', '789'].\"\n        },\n        {\n            \"example\": \"bbox[0] + bbox[2] <= 100 and bbox[1] + bbox[3] <= 300 and pdf_id == '123456' and page_number == 1\",\n            \"description\": \"For image modality, filter results to include only image regions that are entirely within the upper-left quadrant of page 1 in the PDF with ID '123456', assuming the page dimensions are 200 (width) x 600 (height).\"\n        }\n    ]\n}"}
{"role": "assistant", "content": "[Thought]: First, I need to retrieve the content of the anchor paper to find the name of the service and the page number where the graphic information is located. I will start by retrieving the relevant pages and sections from the anchor paper.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT pages.page_number, pages.page_content, sections.section_title, sections.section_content FROM pages JOIN metadata ON pages.ref_paper_id = metadata.paper_id LEFT JOIN sections ON metadata.paper_id = sections.ref_paper_id WHERE metadata.paper_id = '0127a369-a186-55a5-bced-55942dcb5e9f';\")"}
{"role": "user", "content": "[Observation]:\n{\"page_number\":17,\"page_content\":\"E\\nCase Study: Application of Pseudo-Financial Datasets in Generative AI\\nService\\nFigures 5 and 6 present a case study conducted by KakaoBank, an internet-only bank in South Korea,\\nutilizing the methodology proposed in this paper. Using the ECP framework, we generated financial\\ntable datasets that were then used to develop and validate models for a generative AI service. The\\nservice, named Today\\u2019s Mini Diary, automatically generates daily diary entries by taking a single\\nday\\u2019s debit card transaction table, as shown in Tables 8 and 9, along with the user\\u2019s emotions for that\\nday, as inputs to an LLM (Large Language Model).\\nFigure 5: Event banner for the Today\\u2019s Mini Diary service.\\nFigure 6: Example of the Today\\u2019s Mini Diary service in action.\\nCopyright \\u00a9 KakaoBank Corp. All rights reserved.\\n17\\n\",\"section_title\":\"Introduction\",\"section_content\":\"Introduction\\nArtificial intelligence has rapidly advanced financial services in sectors such as online banking,\\npayment systems, investment, and fraud detection [1, 2, 3, 4]. However, the existing stringent policies\\nand regulations pertaining to privacy and security restrict access to the financial tabular datasets of\\ncustomers [5, 6, 7]. Consequently, pseudonymized or anonymized datasets are often employed to\\nmitigate these concerns [8, 9], as illustrated in Fig. 1a. However, the limited availability of public\\ndatasets and the alteration of their original distributions through anonymization or pseudonymization\\npose significant challenges in the accurate representation of real-world scenarios. This shortage of\\nauthentic and accessible financial datasets impedes the advancement of artificial intelligence models\\nfor various financial tasks, including anti-money laundering and business confidence indices [10, 11].\\nLarge language models (LLMs), such as the GPT series [19, 20], exhibit remarkable proficiency in\\ncomprehending and generating texts for a wide range of tasks [21, 22, 23], including data construction\\n\\u2217Equal contribution\\n\\u2020Corresponding author\\nTable Representation Learning Workshop at NeurIPS 2024\\nAccessible\\nRealistic\\nPersonal data\\nPseudo\\nfinancial data\\nAnonymous\\ndata\\nPseudonymous\\ndata\\n(a) Comparison of financial data\\nDomain knowledge & LLMs\\nLLMs\\nPseudo\\nfinancial data\\nAnonymous data\\nPersonal data\\nPseudonymous\\ndata\\nName:\\nJ764566\\nBirth:\\nx1.j4.874f\\nIncome:\\nncome:\\nCS:\\n975\\nName:\\nJane Doe\\nBirth:\\n13.07.1975\\nIncome: $35,460\\nCS:\\n975\\nName:\\nLuna\\nBirth:\\n18.09.1997\\nIncome: $37,640\\nCS:\\n995\\nAge:\\n37~50\\nIncome: $30,000\\n~$40,000\\nCS:\\n900~1,000\\n(b) Example of pseudo-financial data\\nFigure 1: Comparative Analysis of Financial Data: (a) The y-axis represents the degree to which the\\ndata resembles authentic data from financial institutions, whereas the x-axis denotes accessibility. (b)\\nExample of pseudo-financial data alongside public financial data, illustrating how pseudo-financial\\ndata, created through collaboration between financial experts and pre-trained LLMs, closely resembles\\npersonal data, with \\\"CS\\\" indicating credit score.\\nTable 1: Comparison between existing public financial datasets and pseudo-financial datasets.\\nDatasets\\n# Rows\\n\\/ Subj.\\n# Subj.\\n# Att.\\nMultilingual\\nData\\nFinancial\\nConstraint Check\\nOnline Status\\nAvailability\\nData Source\\nData\\nYear\\nDescriptions\\nCredit Card Payment [12]\\n15.0\\n100\\n13\\nPSPD Bank\\n-\\nCard Application Details \\/ Payment History\\nLoan Approval Data [13]\\n1.0\\n614\\n12\\nStatista\\n-\\nLoan Application Information\\nLuxury Loan [14]\\n1.0\\n1,678\\n25\\nData.world\\n1999\\nLoan Execution Details\\nDefault of Credit Card Clients [15]\\n1.0\\n30,000\\n8\\nUCI\\n2005\\nCredit Card Default Data\\nBank Loan [16]\\n1.0\\n5,000\\n14\\n\\u2714\\nThera Bank\\n-\\nSole Internet Banking\\nGerman Credit Data [17]\\n1.0\\n1,000\\n21\\nUCI\\n1975\\nAnonymized Credit Card Details\\nCompleted Order [18]\\n1.7\\n3,758\\n6\\nCzech Bank\\n1999\\nBank Transfer Details\\nOurs (Card Transactions)\\n4.0\\n1,000\\n10\\n\\u2714\\n\\u2714\\n\\u2714\\nLLM-generated\\n-\\nOn \\/ Offline Card Application Details\\nOurs (Loan Statements)\\n4.0\\n1,000\\n14\\n\\u2714\\n\\u2714\\n\\u2714\\nLLM-generated\\n-\\nOn \\/ Offline Loan Application Details\\nOurs (Deposits and Savings Statements)\\n4.0\\n1,000\\n12\\n\\u2714\\n\\u2714\\n\\u2714\\nLLM-generated\\n-\\nOn \\/ Offline Deposit Application Details\\nand augmentation [24, 25, 26, 27, 28]. Despite the impressive generative capabilities of LLMs, sig-\\nnificant challenges remain in the generation and enhancement of financial tabular datasets, stemming\\nfrom the intricate attribute relationships and diverse data ranges inherent in financial services [8, 29].\\nIn this study, we address the deficiency of public financial tabular datasets and propose a novel\\napproach termed the expertise-centric prompting (ECP) framework. Our ECP framework involves\\na collaboration between financial experts and pre-trained LLMs. The framework integrates two\\nessential components into in-context learning: 1) schema calibration, which assesses the alignment\\nof LLMs with primitive financial attribute prompts, and 2) attribute constraints, which produce\\nbalanced instances that closely resemble real-world financial data, as depicted in Fig. 1b. With this\\nframework, we can generate pseudo-financial datasets, as illustrated in Fig. 1a, which are realistic\\nand accessible. Furthermore, combining experts and LLMs, our framework enables the creation of\\nunique multilingual datasets with new attributes not found in public datasets, as shown in Table 1.\\nAlong with the ECP framework, we also propose two evaluation metrics for assessing the realism\\nof the generated datasets. When evaluating the outputs from generative language models, metrics\\nsuch as ROUGE [30], BERTscore [31], BLEURT [32], and COMET-22 [33] have been employed.\\nHowever, evaluation metrics that are specifically tailored to synthetic tabular datasets in the financial\\ndomain have not yet been developed. To assess the realism of financial datasets, we introduce two\\nevaluation techniques: one for assessing dataset diversity, encompassing inter-instance and intra-\\nattribute diversities, and another for evaluating numeric constraint satisfaction. Our findings reveal\\nthat the collaboration between superior pre-trained LLMs and experts, facilitated by the proposed\\nECP framework, consistently produces superior results according to the proposed metrics.\\nOur contributions are summarized as follows:\\n\\u2022 In this paper, we propose an expertise-centric prompting (ECP) framework to generate\\npseudo-financial tabular datasets, addressing the limited accessibility of realistic financial\\ndata.\\n\\u2022 We introduce novel evaluation metrics to assess the diversity of the generated financial\\ntabular datasets and the confidence level in constraint satisfaction.\\n\\u2022 This paper demonstrates the efficacy of the proposed ECP framework and evaluation metrics\\non both English and Korean financial contexts across three distinct data types.\\n2\\nLLMs\\n(\\na\\n)\\n \\nE\\nx\\np\\ne\\nr\\nt\\ni\\ns\\ne\\n-\\nC\\ne\\nn\\nt\\nr\\ni\\nc\\n \\nP\\nr\\no\\nm\\np\\nt\\ni\\nn\\ng\\nConstructed\\nDatasets\\nS\\nc\\nh\\ne\\nm\\na\\n \\nDate\\nAmount\\nMerchant\\nSchema Calibaration\\nDate \\n'\\nAmount\\nMechant\\nInquiry Type Online pay\\nRegular pay\\n07.08 \\n$45.49\\nNetflix\\nOnline\\nApple Pay\\nOTT\\nDate \\nMerchant\\nInquiry Type Online Pay\\nRegular Pay\\nRatio of Point\\nPoint\\n0.002\\n$0.09098\\n07.08 \\n$45.49\\nNetflix\\nOnline\\nApple Pay\\nOTT\\n0.002\\n$0.17998\\n09.01\\n$89.99\\nGym\\nOnline\\nVenmo\\nY\\n\\u2219\\u2219\\u2219\\n0.001\\n$0.220199\\n10.21\\n$201.99\\nNike\\nOffline\\n-\\n-\\nAmount\\nR\\ne\\np\\ne\\na\\nt\\n1\\n2\\n3\\nConstraints on financial attributes\\nExample generation\\nE\\nx\\np\\ne\\nr\\nt\\n\\u2019\\ns\\n \\nP\\nr\\no\\nm\\np\\nt\\n(\\nb\\n)\\n \\nC\\na\\nl\\ni\\nb\\nr\\na\\nt\\ni\\no\\nn\\n \\na\\nn\\nd\\n \\nC\\no\\nn\\ns\\nt\\nr\\na\\ni\\nn\\nt\\ns\\nP\\ns\\ne\\nu\\nd\\no\\n-\\nF\\ni\\nn\\na\\nn\\nc\\ni\\na\\nl\\nD\\na\\nt\\na\\nS\\nc\\nh\\ne\\nm\\na\\n \\nE\\nx\\na\\nm\\np\\nl\\ne\\n+\\nS\\nc\\nh\\ne\\nm\\na\\n \\nE\\nx\\na\\nm\\np\\nl\\ne\\n+\\nC\\no\\nn\\ns\\nt\\nr\\na\\ni\\nn\\nt\\ns\\n+\\na\\nn\\nd\\n(\\nc\\n)\\n \\np\\nr\\no\\nm\\np\\nt\\n \\n:\\np\\nr\\no\\nm\\np\\nt\\n \\n:\\np\\nr\\no\\nm\\np\\nt\\n \\n:\\nFigure 2: Overview of our expertise-centric prompting framework\\n2\"}\n{\"page_number\":17,\"page_content\":\"E\\nCase Study: Application of Pseudo-Financial Datasets in Generative AI\\nService\\nFigures 5 and 6 present a case study conducted by KakaoBank, an internet-only bank in South Korea,\\nutilizing the methodology proposed in this paper. Using the ECP framework, we generated financial\\ntable datasets that were then used to develop and validate models for a generative AI service. The\\nservice, named Today\\u2019s Mini Diary, automatically generates daily diary entries by taking a single\\nday\\u2019s debit card transaction table, as shown in Tables 8 and 9, along with the user\\u2019s emotions for that\\nday, as inputs to an LLM (Large Language Model).\\nFigure 5: Event banner for the Today\\u2019s Mini Diary service.\\nFigure 6: Example of the Today\\u2019s Mini Diary service in action.\\nCopyright \\u00a9 KakaoBank Corp. All rights reserved.\\n17\\n\",\"section_title\":\"Related Work\",\"section_content\":\"Related Work\\nPublic Financial Tabular Datasets.\\nAs listed in Table 1, several financial tabular datasets have\\nbeen publicly released while adhering to regulations on personal data protection [7, 6, 5]. However,\\nthese datasets often exhibit limitations in terms of the availability of limited financial attributes and\\nloss of personal information due to anonymization or pseudonymization [12, 13, 14]. Furthermore,\\nthese datasets are limited to English and lack the sophistication required for real-world applications\\nowing to the absence of constraint satisfaction checks. To address these limitations, this paper presents\\nthe expertise-centric prompting framework for constructing more practical financial tabular datasets.\\nFinancial Tabular Dataset Generation via Large Language Models.\\nDespite numerous ap-\\nproaches leveraging LLMs for text-to-table construction [34, 35, 36, 37], these methods have limi-\\ntations in generating financial tabular datasets. Specifically, models like BloombergGPT [38] and\\nFinGPT [39] struggle with foundational financial data due to their training on non-tabular sources\\n(e.g., news and social media), lacking a comprehensive understanding of financial tables. Inspired by\\nthe work of KiPT [40], which enhances prompts with domain-specific knowledge, we introduce a\\nnovel task to generate more informative financial data resembling publicly available datasets.\\nMetrics for Validating Diversity on Large Language Models.\\nRecent research has focused on\\nevaluating outcomes from pre-trained LLMs. CRITIC [41] uses external tools like search engines\\nand code interpreters to refine outputs, enhancing quality iteratively. In contrast, SelfCheckGPT [42]\\nidentifies hallucinations by cross-referencing multiple outputs for consistency.In the finance domain,\\nFinLMEval [43] proposes an evaluation metric tailored to appraise the performance of LLMs, with a\\nparticular emphasis on financial classification tasks. Unlike prior methods, our approach assesses\\nthe quality of LLM-generated financial datasets by distinguishing between numeric and categorical\\ndata, evaluating dataset diversity for the first time. We also introduce metrics to measure constraint\\nsatisfaction confidence, crucial for producing realistic and accurate data.\\n3\\nMethodology\\nIn this section, we propose a new approach called an expertise-centric prompting framework for\\nfinancial tabular data generation. Figure 2 illustrates this framework, which integrates schema\\ncalibration and attribute constraints through in-context learning with pre-trained LLMs [44, 45, 20].\\nOur framework constructs financial datasets that closely resemble real-world data by incorporating\\nqualitative insights from experts, including schema calibration and constraints. Along with this\\nframework, we introduce novel evaluation metrics designed to assess the realism and professionalism\\n3\\nLLMs\\n(\\na\\n)\\n \\nE\\nx\\np\\ne\\nr\\nt\\ni\\ns\\ne\\n-\\nC\\ne\\nn\\nt\\nr\\ni\\nc\\n \\nP\\nr\\no\\nm\\np\\nt\\ni\\nn\\ng\\nConstructed\\nDatasets\\nS\\nc\\nh\\ne\\nm\\na\\n \\nDate\\nAmount\\nMerchant\\nSchema Calibaration\\nDate \\n'\\nAmount\\nMechant\\nInquiry Type Online pay\\nRegular pay\\n07.08 \\n$45.49\\nNetflix\\nOnline\\nApple Pay\\nOTT\\nDate \\nMerchant\\nInquiry Type Online Pay\\nRegular Pay\\nRatio of Point\\nPoint\\n0.002\\n$0.09098\\n07.08 \\n$45.49\\nNetflix\\nOnline\\nApple Pay\\nOTT\\n0.002\\n$0.17998\\n09.01\\n$89.99\\nGym\\nOnline\\nVenmo\\nY\\n\\u2219\\u2219\\u2219\\n0.001\\n$0.220199\\n10.21\\n$201.99\\nNike\\nOffline\\n-\\n-\\nAmount\\nR\\ne\\np\\ne\\na\\nt\\n1\\n2\\n3\\nConstraints on financial attributes\\nExample generation\\nE\\nx\\np\\ne\\nr\\nt\\n\\u2019\\ns\\n \\nP\\nr\\no\\nm\\np\\nt\\n(\\nb\\n)\\n \\nC\\na\\nl\\ni\\nb\\nr\\na\\nt\\ni\\no\\nn\\n \\na\\nn\\nd\\n \\nC\\no\\nn\\ns\\nt\\nr\\na\\ni\\nn\\nt\\ns\\nP\\ns\\ne\\nu\\nd\\no\\n-\\nF\\ni\\nn\\na\\nn\\nc\\ni\\na\\nl\\nD\\na\\nt\\na\\nS\\nc\\nh\\ne\\nm\\na\\n \\nE\\nx\\na\\nm\\np\\nl\\ne\\n+\\nS\\nc\\nh\\ne\\nm\\na\\n \\nE\\nx\\na\\nm\\np\\nl\\ne\\n+\\nC\\no\\nn\\ns\\nt\\nr\\na\\ni\\nn\\nt\\ns\\n+\\na\\nn\\nd\\n(\\nc\\n)\\n \\np\\nr\\no\\nm\\np\\nt\\n \\n:\\np\\nr\\no\\nm\\np\\nt\\n \\n:\\np\\nr\\no\\nm\\np\\nt\\n \\n:\\nFigure 2: Overview of our expertise-centric prompting framework\\n2\\nRelated Work\\nPublic Financial Tabular Datasets.\\nAs listed in Table 1, several financial tabular datasets have\\nbeen publicly released while adhering to regulations on personal data protection [7, 6, 5]. However,\\nthese datasets often exhibit limitations in terms of the availability of limited financial attributes and\\nloss of personal information due to anonymization or pseudonymization [12, 13, 14]. Furthermore,\\nthese datasets are limited to English and lack the sophistication required for real-world applications\\nowing to the absence of constraint satisfaction checks. To address these limitations, this paper presents\\nthe expertise-centric prompting framework for constructing more practical financial tabular datasets.\\nFinancial Tabular Dataset Generation via Large Language Models.\\nDespite numerous ap-\\nproaches leveraging LLMs for text-to-table construction [34, 35, 36, 37], these methods have limi-\\ntations in generating financial tabular datasets. Specifically, models like BloombergGPT [38] and\\nFinGPT [39] struggle with foundational financial data due to their training on non-tabular sources\\n(e.g., news and social media), lacking a comprehensive understanding of financial tables. Inspired by\\nthe work of KiPT [40], which enhances prompts with domain-specific knowledge, we introduce a\\nnovel task to generate more informative financial data resembling publicly available datasets.\\nMetrics for Validating Diversity on Large Language Models.\\nRecent research has focused on\\nevaluating outcomes from pre-trained LLMs. CRITIC [41] uses external tools like search engines\\nand code interpreters to refine outputs, enhancing quality iteratively. In contrast, SelfCheckGPT [42]\\nidentifies hallucinations by cross-referencing multiple outputs for consistency.In the finance domain,\\nFinLMEval [43] proposes an evaluation metric tailored to appraise the performance of LLMs, with a\\nparticular emphasis on financial classification tasks. Unlike prior methods, our approach assesses\\nthe quality of LLM-generated financial datasets by distinguishing between numeric and categorical\\ndata, evaluating dataset diversity for the first time. We also introduce metrics to measure constraint\\nsatisfaction confidence, crucial for producing realistic and accurate data.\\n3\"}\n\n... # only display 2 rows in JSON format, more are truncated due to length constraint based on max_tokens (5000)"}
{"role": "assistant", "content": "[Thought]: From the retrieved content, I can see that the service mentioned is \"Todayâ€™s Mini Diary\" and it is described on page 17. The graphic information is also on page 17. I will now confirm this by generating the final answer.\n[Action]:\nGenerateAnswer(answer=['Todayâ€™s Mini Diary', 17])"}
{"role": "user", "content": "[Observation]: ['Todayâ€™s Mini Diary', 17]"}
