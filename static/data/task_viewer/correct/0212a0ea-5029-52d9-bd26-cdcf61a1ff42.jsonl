{"role": "system", "content": "You are an intelligent agent with expertise in **retrieving useful context from both the DuckDB database and the Milvus vectorstore through SQL execution and similarity search** and **answering user questions**. You will be given a natural language question concerning PDF files, along with the schema of both the database and the vectorstore. Your ultimate goal is to answer the input question with pre-defined answer format. The DuckDB database contains all parsed content of raw PDF files, while the Milvus vectorstore encodes specific column cells from the database as vectors. You can predict executable actions, interact with the hybrid environment (including database and vectorstore) across multiple turns, and retrieve necessary context until you are confident in resolving the question.\n\n--------\n\n## Task Description\nEach task consists of the following parts:\n\n[Question]: User question regarding the PDF, e.g., Is there any ...?\n[Answer Format]: it describes the format of the final answer, e.g., the answer is \"Yes\" or \"No\" without punctuation.\n[Anchor PDF]: Optional, a python str or list, the PDF(s) you must use to answer the question.\n[Reference PDF]: Optional, a python str or list, the PDF(s) you may use to answer the question.\n[Conference]: Optional, a python str or list, the conference(s) and year(s) of the relevant papers for retrieval.\n[Database Schema]: A detailed serialized schema of the DuckDB database for reference when generating SQL queries. It includes 1) tables, 2) columns and their data types, 3) descriptions for these schema items, and 4) primary key and foreign key constraints.\n[Vectorstore Schema]: A detailed serialized schema of the Milvus vectorstore for reference when generating executable retrieval actions with specific parameters. It includes 1) collections, 2) fields, 3) encodable (table, column) pairs in the relational database where the vectorized content originates, and 4) grammar for valid filter rules.\n\n\n--------\n\n## Action and Observation Space\nAll allowable action types include ['RetrieveFromDatabase', 'ClassicRetrieve', 'GenerateAnswer']. Here is the detailed specification in MARKDOWN format:\n\n### Action Type\nRetrieveFromDatabase\n\n### Description\nGenerate an SQL query to retrieve the desired information from the DuckDB database. Please refer to the concrete database schema to produce a valid and executable SQL.\n\n### Observation\nThe observation space is the execution result of the SQL query. You do not need to worry about the actual execution, we will perform it for you. If the SQL failed to execute, we will return the error message. Extremely long SQL output will be truncated.\n\n### Syntax and Parameters (MARKDOWN Format)\nRetrieveFromDatabase(sql: str)\n- sql: str, required. The concrete DuckDB SQL query to execute and retrieve results.\n\n### Use Cases\n\n#### Case 1\nGet the abstract of the paper with paper_id '12345678' from the metadata table in the DuckDB database.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT abstract FROM metadata WHERE paper_id = '12345678';\")\n\n\n#### Case 2\nFind which page in the paper with paper_id '12345678' contains Figure 3.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT pages.page_number FROM images JOIN pages JOIN metadata ON images.ref_page_id = pages.page_id AND pages.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '12345678' AND images.image_caption LIKE '%Figure 3%';\")\n\n\n----\n\n### Action Type\nClassicRetrieve\n\n### Description\nGiven a query text, retrieve relevant context from the Milvus vectorstore.\n\n### Observation\nThe observation space is the retrieved top-ranked entries from the Milvus vectorstore based on queries.\n\n### Syntax and Parameters (MARKDOWN Format)\nClassicRetrieve(query: str, limit: int = 5)\n- query: str, required. The query text will be encoded and used to search for relevant context. You can rephrase the original user question to obtain a more clear and structured query requirement.\n- limit: int, optional, default to 5. The number of top-ranked context to retrieve. Please set it to a positive integer to limit the number of returned results. Extremely large limit values may be truncated.\n\n### Use Cases\n\n#### Case 1\nRetrieve top 5 pieces about a certain topic.\n\n[Action]: ClassicRetrieve(query='Is there any work about the topic structured RAG?')\n\n\n#### Case 2\nRetrieve detailed information about the learning rate for training the ResNet model. The top 4 most relevant entries will be returned based on the query.\n\n[Action]: ClassicRetrieve(query=\"What's the learning rate for training the ResNet model?\", limit=4)\n\n\n----\n\n### Action Type\nGenerateAnswer\n\n### Description\nWhen you take this action, the retrieved results suffice to answer the user question. PLEASE STRICTLY ADHERE TO THE ANSWER FORMAT FOR THE CURRENT QUESTION.\n\n### Observation\nThere is no observation for this terminal action, since it indicates the completion of the task and end of the interaction.\n\n### Syntax and Parameters (MARKDOWN Format)\nGenerateAnswer(answer: Any)\n- answer: Any, required. The final answer to the user question. Please adhere to the answer format for the current question.\n\n### Use Cases\n\n#### Case 1\nThe answer to the user question is 42.\n\n[Action]: GenerateAnswer(answer=42)\n\n\n#### Case 2\nThe answer to the user question is a list of strings: ['Results', 'Discussion'].\n\n[Action]: GenerateAnswer(answer=['Results', 'Discussion'])\n\n\n\n--------\n\n## Interaction Framework\n\nThe main interaction procedure proceeds like this:\n\n----\n\n[Thought]: ... reasoning process, why to take this action ...\n[Action]: ... which action to take, please strictly conform to the action specification ...\n[Observation]: ... execution results or error message after taking the action ...\n\n... # more interleaved triplets of ([Thought], [Action], [Observation])\n\n[Thought]: ... reasoning process to produce the final answer ...\n[Action]: ... the terminate action `GenerateAnswer`, there is no further observation ...\n\n----\n\nIn general, the main interaction loop consists of an interleaved of triplets ([Thought], [Action], [Observation]), except the last `GenerateAnswer` action which does not have \"[Observation]:\". You need to predict the \"[Thought]: ...\" followed by the \"[Action]: ...\" for each turn, and we will execute your action in the environment and provide the \"[Observation]: ...\" for the previous action.\n\n--------\n\n## Suggestions or Hints for Agent Interaction\n\n1. Explore multiple retrieval strategies. For example:\n- Experiment with different (table, column) pairs to extract diverse types of information.\n- Query various embedding models (collections) to find the most relevant context.\n\n2. Combine both structured and unstructured data. Concretely:\n- Use SQL queries to retrieve precise facts and structured data. Pay special attention to morphological variations in cell values.\n- Perform similarity searches in the vectorstore to capture semantic relationships and hidden insights.\n\n3. Iterate and refine:\n- If SQL execution result is not satisfactory, try alternative SQL queries to explore the database content carefully.\n- If the vector-based neural retrieval is insufficient, try alternative approaches or parameter settings.\n- Use your findings to validate or enrich the final response.\n\n4. Ensure confidence. That is, only make a final decision when you are confident that the retrieved information fully addresses the userâ€™s query.\n\n\nRemember that, for each question, you only have 20 interaction turns at most. Now, let's start!\n"}
{"role": "user", "content": "[Question]: How can we get the bias attribution without skill knowledge according to formula (2)?\n[Answer Format]: Your answer should be a Python strings of the calculation method of bias attribution without skill knowledge.\n[Anchor PDF]: '2b003f7e-a995-57d1-af78-78432ed96561'\n[Database Schema]: The database schema for /home/htc981/workspace/project/HNS-RAG/data/database/ai_research/ai_research.sql is as follows:\n/* database ai_research: This database contains information about AI research papers. Each PDF file is represented or parsed via different views, e.g., pages, sections, figures, tables, and references. We also extract the concrete content inside each concrete element via OCR.\n*/\n/* table metadata: This table stores metadata about each paper, including the number of pages, paper path and paper id.\n*/\nCREATE TABLE IF NOT EXISTS metadata (\n\tpaper_id UUID, -- A unique identifier for this paper.\n\ttitle VARCHAR, -- The title of this paper.\n\tabstract VARCHAR, -- The abstract of this paper.\n\tnum_pages INTEGER, -- The number of pages in this paper.\n\tconference_full VARCHAR, -- The full name of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tconference_abbreviation VARCHAR, -- The abbreviation of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tpub_year INTEGER, -- The year when this paper was published.\n\tvolume VARCHAR, -- The volume of the conference where this paper was published. e.g. findings.\n\tdownload_url VARCHAR, -- The url from which the paper can be downloaded.\n\tbibtex VARCHAR, -- The bibtex of this paper.\n\tauthors VARCHAR[], -- The full names of authors of this paper.\n\tpdf_path VARCHAR, -- The path to the PDF file of this paper.\n\ttldr VARCHAR, -- A brief summary of the paper's main idea or findings generated by LLM based on title and abstract.\n\ttags VARCHAR[], -- Keywords representing the paper's topics, methods, or applications generated by LLM based on title and abstract.,\n\tPRIMARY KEY (paper_id)\n);\n/* table pages: This table stores information of the pages in the papers, including their content, size and their order within the paper. The pagesare extracted using PyMuPDF.\n*/\nCREATE TABLE IF NOT EXISTS pages (\n\tpage_id UUID, -- A unique identifier for each page.\n\tpage_number INTEGER, -- The page number in the current paper, starting from 1.\n\tpage_width INTEGER, -- The pixel width of the current page.\n\tpage_height INTEGER, -- The pixel height of the current page.\n\tpage_content VARCHAR, -- The content of the page.\n\tpage_summary VARCHAR, -- A brief summary of the page content, generated by LLM, focusing on key information and describing the page content.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (page_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table images: This table stores the information about images in each paper. The images are extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS images (\n\timage_id UUID, -- The unique identifier of the image.\n\timage_caption VARCHAR, -- The caption of this image, \"\" if it doesn't have one.\n\timage_summary VARCHAR, -- A brief summary of the image, generated by LLM, focusing on key information and describing the image.\n\tbounding_box INTEGER[4], -- The bounding box of the figure in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height which are used to determine the shape of the rectangle.\n\tordinal INTEGER, -- Each figure is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (image_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table chunks: This table contains the information of each chunk of text (chunk size = 512 tokens with no overlapping) in each page of the paper. A chunk is a sub-text that is extracted from the main text using langchain, such as a sentence or a paragraph.\n*/\nCREATE TABLE IF NOT EXISTS chunks (\n\tchunk_id UUID, -- A unique identifier for each chunk of text.\n\ttext_content VARCHAR, -- The text content of the current chunk.\n\tordinal INTEGER, -- Each chunk is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (chunk_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table tables: This table stores information about tables extracted from pages using MinerU, including content (in html format), bounding box and summary of each table generated by LLM.\n*/\nCREATE TABLE IF NOT EXISTS tables (\n\ttable_id UUID, -- A unique identifier for each table.\n\ttable_caption VARCHAR, -- Caption of the table, showing key information of the table.\n\ttable_content VARCHAR, -- The content of the table in html format.\n\ttable_summary VARCHAR, -- A brief summary of the table content generated by LLM, focusing on key information and describing the table content.\n\tbounding_box INTEGER[4], -- The bounding box of the table in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height.\n\tordinal INTEGER, -- Each table is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this table is located.,\n\tPRIMARY KEY (table_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table sections: This table contains the text content of each section in the paper, e.g. `Introduction`, `Experiment`, `Conclusion`, `Reference`. The sections are extracted using PyMuPDF or MinerU.\n*/\nCREATE TABLE IF NOT EXISTS sections (\n\tsection_id UUID, -- A unique identifier for each section of text.\n\tsection_title VARCHAR, -- The title of the current section.\n\tsection_content VARCHAR, -- The text content of the current section.\n\tsection_summary VARCHAR, -- A brief summary of the section content generated by LLM, focusing on key information and describing the section content.\n\tordinal INTEGER, -- Each section is labeled with one distinct integer number in the paper, which starts from 0.\n\tpage_numbers INTEGER[], -- A list of page numbers where current section is located in the relevant paper.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (section_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table equations: This table stores information about equations extracted from pages using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS equations (\n\tequation_id UUID, -- A unique identifier for each equation.\n\tequation_content VARCHAR, -- Content of the equation in latex format.\n\tordinal INTEGER, -- Each equation is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the paper ID in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the page ID in the `pages` table where this equation is located.,\n\tPRIMARY KEY (equation_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table reference: This table stores information about references extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS reference (\n\treference_id UUID, -- A unique identifier for each reference.\n\treference_content VARCHAR, -- Content of the reference.\n\tordinal INTEGER, -- Each reference is labeled with one distinct integer number according to its order in the paper, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this reference is located.,\n\tPRIMARY KEY (reference_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n[Vectorstore Schema]: The vectorstore schema for ai_research is as follows. You can try collections with different encoding models or modalities:\n[\n    {\n        \"collection_name\": \"text_bm25_en\",\n        \"modality\": \"text\",\n        \"embed_type\": \"bm25\",\n        \"embed_model\": \"en\",\n        \"description\": \"This collection is used to store the sparse embeddings generated by the BM25 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric inner-product (IP).\",\n        \"fields\": [\n            {\n                \"name\": \"id\",\n                \"dtype\": \"INT64\",\n                \"is_primary\": true,\n                \"description\": \"The unique id for each encoded text vector in this collection.\"\n            },\n            {\n                \"name\": \"vector\",\n                \"dtype\": \"SPARSE_FLOAT_VECTOR\",\n                \"description\": \"The encoded sparse vector of the text content generated by the BM25 model. Note that, the raw text content can be uniquely identified by the triplet fields below: `table_name`, `column_name`, `primary_key`.\"\n            },\n            {\n                \"name\": \"pdf_id\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The unique id of the PDF file stored in the relational database that the encoded text belongs to. This field can be used to quickly filter the search space.\"\n            },\n            {\n                \"name\": \"page_number\",\n                \"dtype\": \"INT16\",\n                \"description\": \"The page number in the PDF file that the encoded text belongs to (starting from 1). This field can be used to quickly filter the search space. Value -1 means unknown.\"\n            },\n            {\n                \"name\": \"table_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which table in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"column_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which column under `table_name` in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"primary_key\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The primary key value of `table_name` (or which row) in the relational database that the text content belongs to. Note that, the triplet (`table_name`, `column_name`, `primary_key`) can be used to construct a one-to-one mapping between the `text` field in the current vectorstore and the cell entry in the relational database.\"\n            }\n        ]\n    },\n    {\n        \"collection_name\": \"text_sentence_transformers_all_minilm_l6_v2\",\n        \"modality\": \"text\",\n        \"embed_type\": \"sentence_transformers\",\n        \"embed_model\": \"all-MiniLM-L6-v2\",\n        \"description\": \"This collection is used to store the embeddings generated by the all-MiniLM-L6-v2 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric COSINE.\",\n        \"fields\": \"The fields of this collection are similar to the `text_bm25_en` collection.\"\n    }\n]\n\nThe following lists all encodable (table_name, column_name, encode_modality) information from the corresponding DuckDB database, where the encoded vector entries are sourced. Note that, for text modality, we directly encode cell values from the `table_name.column_name`; for image modality, we encode the cropped images for `page_number` in `pdf_id` with bounding boxes from `table_name.column_name`. You can leverage them for filter condition during similarity search:\n[\n    [\n        \"metadata\",\n        \"title\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"abstract\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"bibtex\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"tldr\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_content\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_summary\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_caption\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_summary\",\n        \"text\"\n    ],\n    [\n        \"chunks\",\n        \"text_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_caption\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_summary\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_title\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_content\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_summary\",\n        \"text\"\n    ],\n    [\n        \"equations\",\n        \"equation_content\",\n        \"text\"\n    ],\n    [\n        \"reference\",\n        \"reference_content\",\n        \"text\"\n    ]\n]\n\nHere are the operators that you can use in the filtering condition for the vectorstore:\n{\n    \"operators\": {\n        \"logical\": [\n            {\n                \"symbol\": \"not\",\n                \"example\": \"not expr\",\n                \"description\": \"True if expr is false.\"\n            },\n            {\n                \"symbol\": \"and\",\n                \"example\": \"expr1 and expr2\",\n                \"description\": \"True if both expr1 and expr2 are true.\"\n            },\n            {\n                \"symbol\": \"or\",\n                \"example\": \"expr1 or expr2\",\n                \"description\": \"True if either expr1 or expr2 are true.\"\n            }\n        ],\n        \"binary arithmetic\": [\n            {\n                \"symbol\": \"+\",\n                \"example\": \"a + b\",\n                \"description\": \"Add the two operands.\"\n            },\n            {\n                \"symbol\": \"-\",\n                \"example\": \"a - b\",\n                \"description\": \"Subtract the second operand from the first operand.\"\n            },\n            {\n                \"symbol\": \"*\",\n                \"example\": \"a * b\",\n                \"description\": \"Multiply the two operands.\"\n            },\n            {\n                \"symbol\": \"/\",\n                \"example\": \"a / b\",\n                \"description\": \"Divide the first operand by the second operand.\"\n            },\n            {\n                \"symbol\": \"**\",\n                \"example\": \"a ** b\",\n                \"description\": \"Raise the first operand to the power of the second operand.\"\n            },\n            {\n                \"symbol\": \"%\",\n                \"example\": \"a % b\",\n                \"description\": \"Divide the first operand by the second operand and yield the remainder portion.\"\n            }\n        ],\n        \"relational\": [\n            {\n                \"symbol\": \"<\",\n                \"example\": \"a < b\",\n                \"description\": \"True if a is less than b.\"\n            },\n            {\n                \"symbol\": \">\",\n                \"example\": \"a > b\",\n                \"description\": \"True if a is greater than b.\"\n            },\n            {\n                \"symbol\": \"==\",\n                \"example\": \"a == b\",\n                \"description\": \"True if a is equal to b. Please use **two** equal signs for equality comparison.\"\n            },\n            {\n                \"symbol\": \"!=\",\n                \"example\": \"a != b\",\n                \"description\": \"True if a is not equal to b.\"\n            },\n            {\n                \"symbol\": \"<=\",\n                \"example\": \"a <= b\",\n                \"description\": \"True if a is less than or equal to b.\"\n            },\n            {\n                \"symbol\": \">=\",\n                \"example\": \"a >= b\",\n                \"description\": \"True if a is greater than or equal to b.\"\n            },\n            {\n                \"symbol\": \"in\",\n                \"example\": \"a in [b, c, ...]\",\n                \"description\": \"True if a is equal to any of the values in the list.\"\n            }\n        ],\n        \"array operations\": [\n            {\n                \"symbol\": \"[]\",\n                \"example\": \"bbox[0]\",\n                \"description\": \"This expression gets the first element in array bbox. For example, 'bbox[0] < 50' evaluates to true if the value of bbox[0] is less than 50.\"\n            },\n            {\n                \"symbol\": \"array_contains\",\n                \"example\": \"array_contains(bbox, 100)\",\n                \"description\": \"This expression evaluates to true if array bbox contains element 100.\"\n            },\n            {\n                \"symbol\": \"array_length\",\n                \"example\": \"array_length(int_array) == 4\",\n                \"description\": \"This expression evaluates to true if int_array contains exactly 4 elements.\"\n            }\n        ]\n    },\n    \"use cases\": [\n        {\n            \"example\": \"table_name == 'chunks' and column_name == 'text_content'\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and column_name equal to 'text_content'.\"\n        },\n        {\n            \"example\": \"table_name == 'chunks' and primary_key in ['123', '456', '789']\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and primary_key equal to any of the values in the list ['123', '456', '789'].\"\n        },\n        {\n            \"example\": \"bbox[0] + bbox[2] <= 100 and bbox[1] + bbox[3] <= 300 and pdf_id == '123456' and page_number == 1\",\n            \"description\": \"For image modality, filter results to include only image regions that are entirely within the upper-left quadrant of page 1 in the PDF with ID '123456', assuming the page dimensions are 200 (width) x 600 (height).\"\n        }\n    ]\n}"}
{"role": "assistant", "content": "[Thought]: To answer the question about how to get the bias attribution without skill knowledge according to formula (2), I need to find the relevant content from the specified PDF. I will start by retrieving the content from the `equations` table where the `ref_paper_id` matches the `paper_id` of the specified PDF and the `equation_content` contains the formula (2).\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT equation_content FROM equations JOIN metadata ON equations.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '2b003f7e-a995-57d1-af78-78432ed96561' AND equation_content LIKE '%(2)%';\")"}
{"role": "user", "content": "[Observation]: [Warning]: The SQL execution result is empty, please check the SQL first."}
{"role": "assistant", "content": "[Thought]: The SQL query did not return any results, which means that the equation (2) might not be directly stored in the `equations` table. I will try to retrieve the relevant content from the `sections` table where the `ref_paper_id` matches the `paper_id` of the specified PDF and the `section_content` or `section_summary` contains the term \"bias attribution\" or \"formula (2)\".\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_content FROM sections JOIN metadata ON sections.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '2b003f7e-a995-57d1-af78-78432ed96561' AND (section_content LIKE '%bias attribution%' OR section_content LIKE '%formula (2)%');\")"}
{"role": "user", "content": "[Observation]:\n{\"section_content\":\"Instruction-following language models perform various tasks using instruction-based prompts (Chung et al., 2022; Touvron et al., 2023; Taori et al., 2023; OpenAI, 2023). However, language models have suffered from undesirable biases, failing to follow user instructions despite their signifcant competency (Tamkin et al., 2021; Weidinger et al., 2021; Bender et al., 2021; Bommasani et al., 2021). Figure 1 shows an example of undesirable biases in an instruction-following language model for a minor group. In this case, a language model assigns a high probability to a minor group label for a negative question despite the ambiguity of the given context. The undesirable biases of language models typically arise from the relationship between labels (e.g., \\\"poor people\\\") and tokens (e.g., \\\"drugs\\\") within data instances (Zhao et al., 2021; Fei et al., 2023).\\n\\nHowever, the association between labels and instructions also causes a critical bias since various instructions affect language models to behave inconsistently. Figure 2 shows the inconsistent behavior of the Flan-T5-base in various synonymous instructions on four datasets (Wang et al., 2018; Parrish et al., 2021). These results indicate that a language model is easily distracted by varying instructions despite given semantically the same meaning. These phenomena suggest that language models exhibit signifcant cognitive biases in understanding instructions, and these are some of the most critical biases to mitigate when using instruction-following language models.\\n\\nTo mitigate biases in language models, Zhao et al. (2021); Fei et al. (2023) have investigated label biases in few-shot in-context learning settings. Specifcally, they have regarded the imbalanced probability distribution that occurred by inputting content-free texts (e.g., \\\"N\\/A\\\" or random tokens) as biases, and degraded the original output probability of each input instance by the output probability of the content-free texts. However, they have only aimed to mitigate biases in few-shot in-context learning settings, not considering the zero-shot instruction prompting. Since utilizing a language model in only the instruction prompting without few-shot examples is an effcient and practical usage scenario of language models, they have signifcant limitations in the scope of application.\\nTo resolve these issues, in this paper, we frst defne the bias neuron, which signifcantly affects biased outputs in language models. Prior studies (Panigrahi et al., 2023; Wang et al., 2022; Panigrahi et al., 2023; Yang et al., 2023) have demonstrated that skills for a specifc task are localized in particular neurons. From these fndings, we hypothesize the presence of the bias neuron and empirically validate its existence. Furthermore, we propose a novel bias mitigation method called CRISPR, which stands for CalibRating InStruction Bias via Bias Neuron PRuning. We utilize an attribution (Yang et al., 2023), an explainability method for language models, to quantify the bias of each neuron at three aspects (i.g., token, instance, and instruction). Specifcally, we frst compute the bias infuence of each token in inferring a predefned biased output, and aggregate the token score to an instance and instruction scores to derive the fnal bias infuence (bias attribution) of each neuron. Furthermore, defning biased outputs manually for each data instance is time-consuming; thus, we propose an automatic identifcation method of biased outputs for computing the bias attribution using the confusion score of a language model.\\n\\nWe demonstrate our method in various social bias and natural language understanding benchmarks and dramatically outperform other baselines under varying zero-shot instruction settings. Surprisingly, we reveal that only a few bias neurons (at least three) cause the bias, proving our method\\u2019s practicality. In addition, we show that mitigating bias for a particular task does not adversely affect the existing knowledge of language models for solving other tasks. We also note that bias neurons identifed for a specifc dataset also function as biases in other analogous datasets, revealing that the bias knowledge is transferred to datasets from correlative domains. CRISPR is an effcient bias mitigation method since it needs only a few data samples (e.g., ten samples) to quantify the bias score for the whole neurons. CRISPR also enables language models to adapt fexibly by eliminating some existing bias neurons without any training process.\"}\n{\"section_content\":\"Quantifying Bias. In this section, we describe how to compute the bias attribution for determining bias neurons. Suppose we have an undesirable biased text $\\\\hat{y}$ ; then the importance of each neuron for the output text $\\\\hat{y}$ can be computed using the attribution formula, $A_{i}^{(\\\\iota,x,\\\\hat{y})}(h)\\\\stackrel{\\\\cdot}{=}h_{i}\\\\times\\\\partial\\\\mathcal{P}(\\\\hat{y}|x)\\/\\\\partial h_{i}$ However, $A_{i}^{(\\\\iota,x,\\\\hat{y})}(h)$ includes skill knowledge in addition to biased knowledge since estimating the biased text also contains the knowledge of language modeling, such as understanding instruction knowledge. Therefore, we should disentangle the skill knowledge to compute the clean bias attribution $B_{i}^{(\\\\iota,x)}(h)$ as follows:\\n\\nwhere $\\\\tilde{A}_{i}^{(\\\\iota,x,y)}(h)$ means the attribution score for the golden label text $y$ , where negative values of $A_{i}^{(\\\\iota,\\\\bar{x},y)}(h)$ are converted to zero values. Since the negative values of the attribution score are undesirable negative importance for a specifc task, it is reasonable to exclude that information.\\nAutomatic Identifcation of Biased Labels. We should determine a biased text to compute the bias attribution for each input instance. However, determining all the biased text manually for the whole instance is time-consuming and ineffcient. For example, the BBQ-SES dataset, a socioeconomic status bias dataset, contains various different text labels for the protected group, such as poor people, low-income people, the truck driver, etc. Thus, if we consider the realistic application of our method, then we have to determine the biased text automatically. Specifcally, we utilize the confusion score of the language model to derive an undesirable biased class (i.e., text) for each instance as follows:\\nwhere $t_{k}\\\\in x_{j}$ means each token of an input text. $B_{i}^{(\\\\iota,x_{j},t_{k})}(h)$ is the attribution score computed for each token $t_{k}$ .\\nInstance Aggregation. Also, there are multiple instances for each task; thus, we should aggregate attributions for instances as follows:\\nwhere $\\\\mathcal{D}$ and $N$ mean a specifc dataset and the number of instances in the dataset, respectively. The more confusing a data instance is, the more information it contains about bias; thus, we use its confusion score as a weight $\\\\alpha$ .\\nAlthough $B_{i}^{(\\\\iota,{\\\\cal D})}(h)$ can be computed using the entire dataset, we report the experimental results of computing it using only a signifcantly small amount of data (i.e., only twenty data samples) to ensure the effciency of our method.\\nInstruction Aggregation. We also aim to mitigate the bias that occurs from the association between instructions and labels. Although it is important to mitigate bias within an instruction (intra-instruction bias), reducing the understanding gap between synonymous instructions (interinstruction bias) is also essential. Therefore, we calculate the mean attribution for all instructions to get the bias neuron score considering the information of all instructions as follows:\\nwhere $c$ and $\\\\mathcal{C}$ mean a class and the class set of the dataset, respectively.\"}\n{\"section_content\":\"This section describes how to eliminate the detected bias neurons using a structured pruning method. We frst sort neurons of the whole layers by the bias attribution scores; then, we prune the top- $\\\\cdot n$ neurons. Suppose that a weight matrix $W\\\\in\\\\mathbb{R}^{d\\\\times l}$ is a linear matrix multiplication parameter, and then the matrix after pruning is denoted as $\\\\tilde{W}=(W_{i j})_{1\\\\leq i\\\\leq d},$ $j\\\\notin\\\\!\\\\mathcal{M}$ where $\\\\mathcal{M}$ is the set of bias neuron indices about the $W$ . If the bias term $b\\\\in\\\\mathbb{R}^{l}$ is added to the operation for an affne transformation, the bias term can also be pruned by performing the $\\\\tilde{b}=(b_{i})_{i\\\\notin\\\\mathcal{M}}$ operation similarly. The bias-mitigated parameters are used to compute the new representation by performing the transformation operation $h\\\\tilde{W}$ or $h\\\\tilde{W}+\\\\tilde{b}$ . Notice that this method is model-agnostic since all neural network models consist of linear transformation layers. For example, transformer variants have self-attention, cross-attention, and feed-forward network (FFN) modules, all of which include linear matrix multiplication operations.\"}\n{\"section_content\":\"Datasets. We conduct experiments on three social bias question answering (SBQA) (Parrish et al., 2021) and three natural language understanding (NLU) (Wang et al., 2018) datasets. Specifcally, we utilize BBQ-SES (socio-economic status bias); BBQ-Age (Age bias); BBQ-Disability (disability status bias); MRPC (semantic textual matching); QNLI, RTE (natural language inference). BBQ datasets are QA datasets and contain inconsistent multiple candidate labels. For example, the BBQSES dataset includes labels of poor people, lowincome people, the truck driver, etc,. for minor groups, and this vast label space makes bias mitigation more challenging. Since BBQ datasets contain only the test set, we split them as $10\\\\%$ for a development set and $90\\\\%$ for a test set, and we compute bias attribution by sampling twenty instances from the development set. Our reported BBQ datasets performances (\\u00a74.2) for all baselines are the results of our test set split.\\n\\nImplementation details. We select the instruction-following language models, Flan- $\\\\cdot\\\\mathrm{T}5^{1}$ (Chung et al., 2022) and T-Zero2(Sanh et al., 2021), as a backbone model in our study. We use ten instructions for all datasets, which are acquired using ChatGPT (OpenAI, 2023) by paraphrasing an instruction template of each dataset. We evaluate bias mitigated models using the whole ten instructions and report the mean accuracy of them. All instructions for each dataset are shown in Appendix D.\\nWe use only twenty data samples to compute the bias attribution to ensure the effciency of our method. We detect and eliminate the top- $\\\\cdot p$ bias neurons by bias attribution, searching for the optimal number of bias neurons. Specifcally, we investigate the varying neuron pruning rates $p\\\\in[0,0.01]$ for the whole layers (i.e., self-attention, crossattention, and FFN) and early stop by measuring whether the task performance increases or decreases. We select only a small portion of a train set $(\\\\le10\\\\%)$ for evaluating the best number of bias neurons considering effciency. For the BBQ datasets, we use our development set to determine the best number of bias neurons. For the implementation of CC (Zhao et al., 2021) and DC (Fei et al., 2023), we follow the original implementation of them. The more detailed confguration of CRISPR and other baselines is shown in Appendix A.\"}\n{\"section_content\":\"Our method can precisely quantify the bias with only a few data samples. Figure 4 shows the bias mitigation results for varying numbers of data samples when computing the bias attribution.\\nThe experimental results reveal that we can quantify bias of each neuron using only a signifcantly small number of data samples (e.g., ten data samples).\"}\n\nIn total, 5 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved sections contain the relevant information about bias attribution and the formula for computing it. I will extract the specific calculation method from the section content and format it as a Python string.\n[Action]:\nGenerateAnswer(answer='B_i^(Î¹,x)(h) = A_i^(Î¹,x,Å·)(h) - A_i^(Î¹,x,y)(h) where A_i^(Î¹,x,Å·)(h) is the attribution score for the biased output Å· and A_i^(Î¹,x,y)(h) is the attribution score for the golden label text y, with negative values of A_i^(Î¹,x,y)(h) converted to zero.')"}
{"role": "user", "content": "[Observation]: B_i^(Î¹,x)(h) = A_i^(Î¹,x,Å·)(h) - A_i^(Î¹,x,y)(h) where A_i^(Î¹,x,Å·)(h) is the attribution score for the biased output Å· and A_i^(Î¹,x,y)(h) is the attribution score for the golden label text y, with negative values of A_i^(Î¹,x,y)(h) converted to zero."}
