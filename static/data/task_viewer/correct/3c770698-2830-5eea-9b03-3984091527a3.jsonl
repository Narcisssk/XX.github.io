{"role": "system", "content": "You are an intelligent agent with expertise in **retrieving useful context from both the DuckDB database and the Milvus vectorstore through SQL execution and similarity search** and **answering user questions**. You will be given a natural language question concerning PDF files, along with the schema of both the database and the vectorstore. Your ultimate goal is to answer the input question with pre-defined answer format. The DuckDB database contains all parsed content of raw PDF files, while the Milvus vectorstore encodes specific column cells from the database as vectors. You can predict executable actions, interact with the hybrid environment (including database and vectorstore) across multiple turns, and retrieve necessary context until you are confident in resolving the question.\n\n--------\n\n## Task Description\nEach task consists of the following parts:\n\n[Question]: User question regarding the PDF, e.g., Is there any ...?\n[Answer Format]: it describes the format of the final answer, e.g., the answer is \"Yes\" or \"No\" without punctuation.\n[Anchor PDF]: Optional, a python str or list, the PDF(s) you must use to answer the question.\n[Reference PDF]: Optional, a python str or list, the PDF(s) you may use to answer the question.\n[Conference]: Optional, a python str or list, the conference(s) and year(s) of the relevant papers for retrieval.\n[Database Schema]: A detailed serialized schema of the DuckDB database for reference when generating SQL queries. It includes 1) tables, 2) columns and their data types, 3) descriptions for these schema items, and 4) primary key and foreign key constraints.\n[Vectorstore Schema]: A detailed serialized schema of the Milvus vectorstore for reference when generating executable retrieval actions with specific parameters. It includes 1) collections, 2) fields, 3) encodable (table, column) pairs in the relational database where the vectorized content originates, and 4) grammar for valid filter rules.\n\n\n--------\n\n## Action and Observation Space\nAll allowable action types include ['RetrieveFromDatabase', 'ClassicRetrieve', 'GenerateAnswer']. Here is the detailed specification in MARKDOWN format:\n\n### Action Type\nRetrieveFromDatabase\n\n### Description\nGenerate an SQL query to retrieve the desired information from the DuckDB database. Please refer to the concrete database schema to produce a valid and executable SQL.\n\n### Observation\nThe observation space is the execution result of the SQL query. You do not need to worry about the actual execution, we will perform it for you. If the SQL failed to execute, we will return the error message. Extremely long SQL output will be truncated.\n\n### Syntax and Parameters (MARKDOWN Format)\nRetrieveFromDatabase(sql: str)\n- sql: str, required. The concrete DuckDB SQL query to execute and retrieve results.\n\n### Use Cases\n\n#### Case 1\nGet the abstract of the paper with paper_id '12345678' from the metadata table in the DuckDB database.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT abstract FROM metadata WHERE paper_id = '12345678';\")\n\n\n#### Case 2\nFind which page in the paper with paper_id '12345678' contains Figure 3.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT pages.page_number FROM images JOIN pages JOIN metadata ON images.ref_page_id = pages.page_id AND pages.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '12345678' AND images.image_caption LIKE '%Figure 3%';\")\n\n\n----\n\n### Action Type\nClassicRetrieve\n\n### Description\nGiven a query text, retrieve relevant context from the Milvus vectorstore.\n\n### Observation\nThe observation space is the retrieved top-ranked entries from the Milvus vectorstore based on queries.\n\n### Syntax and Parameters (MARKDOWN Format)\nClassicRetrieve(query: str, limit: int = 5)\n- query: str, required. The query text will be encoded and used to search for relevant context. You can rephrase the original user question to obtain a more clear and structured query requirement.\n- limit: int, optional, default to 5. The number of top-ranked context to retrieve. Please set it to a positive integer to limit the number of returned results. Extremely large limit values may be truncated.\n\n### Use Cases\n\n#### Case 1\nRetrieve top 5 pieces about a certain topic.\n\n[Action]: ClassicRetrieve(query='Is there any work about the topic structured RAG?')\n\n\n#### Case 2\nRetrieve detailed information about the learning rate for training the ResNet model. The top 4 most relevant entries will be returned based on the query.\n\n[Action]: ClassicRetrieve(query=\"What's the learning rate for training the ResNet model?\", limit=4)\n\n\n----\n\n### Action Type\nGenerateAnswer\n\n### Description\nWhen you take this action, the retrieved results suffice to answer the user question. PLEASE STRICTLY ADHERE TO THE ANSWER FORMAT FOR THE CURRENT QUESTION.\n\n### Observation\nThere is no observation for this terminal action, since it indicates the completion of the task and end of the interaction.\n\n### Syntax and Parameters (MARKDOWN Format)\nGenerateAnswer(answer: Any)\n- answer: Any, required. The final answer to the user question. Please adhere to the answer format for the current question.\n\n### Use Cases\n\n#### Case 1\nThe answer to the user question is 42.\n\n[Action]: GenerateAnswer(answer=42)\n\n\n#### Case 2\nThe answer to the user question is a list of strings: ['Results', 'Discussion'].\n\n[Action]: GenerateAnswer(answer=['Results', 'Discussion'])\n\n\n\n--------\n\n## Interaction Framework\n\nThe main interaction procedure proceeds like this:\n\n----\n\n[Thought]: ... reasoning process, why to take this action ...\n[Action]: ... which action to take, please strictly conform to the action specification ...\n[Observation]: ... execution results or error message after taking the action ...\n\n... # more interleaved triplets of ([Thought], [Action], [Observation])\n\n[Thought]: ... reasoning process to produce the final answer ...\n[Action]: ... the terminate action `GenerateAnswer`, there is no further observation ...\n\n----\n\nIn general, the main interaction loop consists of an interleaved of triplets ([Thought], [Action], [Observation]), except the last `GenerateAnswer` action which does not have \"[Observation]:\". You need to predict the \"[Thought]: ...\" followed by the \"[Action]: ...\" for each turn, and we will execute your action in the environment and provide the \"[Observation]: ...\" for the previous action.\n\n--------\n\n## Suggestions or Hints for Agent Interaction\n\n1. Explore multiple retrieval strategies. For example:\n- Experiment with different (table, column) pairs to extract diverse types of information.\n- Query various embedding models (collections) to find the most relevant context.\n\n2. Combine both structured and unstructured data. Concretely:\n- Use SQL queries to retrieve precise facts and structured data. Pay special attention to morphological variations in cell values.\n- Perform similarity searches in the vectorstore to capture semantic relationships and hidden insights.\n\n3. Iterate and refine:\n- If SQL execution result is not satisfactory, try alternative SQL queries to explore the database content carefully.\n- If the vector-based neural retrieval is insufficient, try alternative approaches or parameter settings.\n- Use your findings to validate or enrich the final response.\n\n4. Ensure confidence. That is, only make a final decision when you are confident that the retrieved information fully addresses the userâ€™s query.\n\n\nRemember that, for each question, you only have 20 interaction turns at most. Now, let's start!\n"}
{"role": "user", "content": "[Question]: How many more LLMs are evaluated in ConvBench paper than in MINT paper?\n[Answer Format]: Your answer should be an integer.\n[Anchor PDFs]: ['1cf7ea57-d128-5619-9361-6b35db040c25', '09d48a2a-4ad0-5a7f-84ec-557ac57f5830']\n[Database Schema]: The database schema for /home/htc981/workspace/project/HNS-RAG/data/database/ai_research/ai_research.sql is as follows:\n/* database ai_research: This database contains information about AI research papers. Each PDF file is represented or parsed via different views, e.g., pages, sections, figures, tables, and references. We also extract the concrete content inside each concrete element via OCR.\n*/\n/* table metadata: This table stores metadata about each paper, including the number of pages, paper path and paper id.\n*/\nCREATE TABLE IF NOT EXISTS metadata (\n\tpaper_id UUID, -- A unique identifier for this paper.\n\ttitle VARCHAR, -- The title of this paper.\n\tabstract VARCHAR, -- The abstract of this paper.\n\tnum_pages INTEGER, -- The number of pages in this paper.\n\tconference_full VARCHAR, -- The full name of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tconference_abbreviation VARCHAR, -- The abbreviation of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tpub_year INTEGER, -- The year when this paper was published.\n\tvolume VARCHAR, -- The volume of the conference where this paper was published. e.g. findings.\n\tdownload_url VARCHAR, -- The url from which the paper can be downloaded.\n\tbibtex VARCHAR, -- The bibtex of this paper.\n\tauthors VARCHAR[], -- The full names of authors of this paper.\n\tpdf_path VARCHAR, -- The path to the PDF file of this paper.\n\ttldr VARCHAR, -- A brief summary of the paper's main idea or findings generated by LLM based on title and abstract.\n\ttags VARCHAR[], -- Keywords representing the paper's topics, methods, or applications generated by LLM based on title and abstract.,\n\tPRIMARY KEY (paper_id)\n);\n/* table pages: This table stores information of the pages in the papers, including their content, size and their order within the paper. The pagesare extracted using PyMuPDF.\n*/\nCREATE TABLE IF NOT EXISTS pages (\n\tpage_id UUID, -- A unique identifier for each page.\n\tpage_number INTEGER, -- The page number in the current paper, starting from 1.\n\tpage_width INTEGER, -- The pixel width of the current page.\n\tpage_height INTEGER, -- The pixel height of the current page.\n\tpage_content VARCHAR, -- The content of the page.\n\tpage_summary VARCHAR, -- A brief summary of the page content, generated by LLM, focusing on key information and describing the page content.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (page_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table images: This table stores the information about images in each paper. The images are extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS images (\n\timage_id UUID, -- The unique identifier of the image.\n\timage_caption VARCHAR, -- The caption of this image, \"\" if it doesn't have one.\n\timage_summary VARCHAR, -- A brief summary of the image, generated by LLM, focusing on key information and describing the image.\n\tbounding_box INTEGER[4], -- The bounding box of the figure in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height which are used to determine the shape of the rectangle.\n\tordinal INTEGER, -- Each figure is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (image_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table chunks: This table contains the information of each chunk of text (chunk size = 512 tokens with no overlapping) in each page of the paper. A chunk is a sub-text that is extracted from the main text using langchain, such as a sentence or a paragraph.\n*/\nCREATE TABLE IF NOT EXISTS chunks (\n\tchunk_id UUID, -- A unique identifier for each chunk of text.\n\ttext_content VARCHAR, -- The text content of the current chunk.\n\tordinal INTEGER, -- Each chunk is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (chunk_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table tables: This table stores information about tables extracted from pages using MinerU, including content (in html format), bounding box and summary of each table generated by LLM.\n*/\nCREATE TABLE IF NOT EXISTS tables (\n\ttable_id UUID, -- A unique identifier for each table.\n\ttable_caption VARCHAR, -- Caption of the table, showing key information of the table.\n\ttable_content VARCHAR, -- The content of the table in html format.\n\ttable_summary VARCHAR, -- A brief summary of the table content generated by LLM, focusing on key information and describing the table content.\n\tbounding_box INTEGER[4], -- The bounding box of the table in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height.\n\tordinal INTEGER, -- Each table is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this table is located.,\n\tPRIMARY KEY (table_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table sections: This table contains the text content of each section in the paper, e.g. `Introduction`, `Experiment`, `Conclusion`, `Reference`. The sections are extracted using PyMuPDF or MinerU.\n*/\nCREATE TABLE IF NOT EXISTS sections (\n\tsection_id UUID, -- A unique identifier for each section of text.\n\tsection_title VARCHAR, -- The title of the current section.\n\tsection_content VARCHAR, -- The text content of the current section.\n\tsection_summary VARCHAR, -- A brief summary of the section content generated by LLM, focusing on key information and describing the section content.\n\tordinal INTEGER, -- Each section is labeled with one distinct integer number in the paper, which starts from 0.\n\tpage_numbers INTEGER[], -- A list of page numbers where current section is located in the relevant paper.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (section_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table equations: This table stores information about equations extracted from pages using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS equations (\n\tequation_id UUID, -- A unique identifier for each equation.\n\tequation_content VARCHAR, -- Content of the equation in latex format.\n\tordinal INTEGER, -- Each equation is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the paper ID in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the page ID in the `pages` table where this equation is located.,\n\tPRIMARY KEY (equation_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table reference: This table stores information about references extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS reference (\n\treference_id UUID, -- A unique identifier for each reference.\n\treference_content VARCHAR, -- Content of the reference.\n\tordinal INTEGER, -- Each reference is labeled with one distinct integer number according to its order in the paper, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this reference is located.,\n\tPRIMARY KEY (reference_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n[Vectorstore Schema]: The vectorstore schema for ai_research is as follows. You can try collections with different encoding models or modalities:\n[\n    {\n        \"collection_name\": \"text_bm25_en\",\n        \"modality\": \"text\",\n        \"embed_type\": \"bm25\",\n        \"embed_model\": \"en\",\n        \"description\": \"This collection is used to store the sparse embeddings generated by the BM25 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric inner-product (IP).\",\n        \"fields\": [\n            {\n                \"name\": \"id\",\n                \"dtype\": \"INT64\",\n                \"is_primary\": true,\n                \"description\": \"The unique id for each encoded text vector in this collection.\"\n            },\n            {\n                \"name\": \"vector\",\n                \"dtype\": \"SPARSE_FLOAT_VECTOR\",\n                \"description\": \"The encoded sparse vector of the text content generated by the BM25 model. Note that, the raw text content can be uniquely identified by the triplet fields below: `table_name`, `column_name`, `primary_key`.\"\n            },\n            {\n                \"name\": \"pdf_id\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The unique id of the PDF file stored in the relational database that the encoded text belongs to. This field can be used to quickly filter the search space.\"\n            },\n            {\n                \"name\": \"page_number\",\n                \"dtype\": \"INT16\",\n                \"description\": \"The page number in the PDF file that the encoded text belongs to (starting from 1). This field can be used to quickly filter the search space. Value -1 means unknown.\"\n            },\n            {\n                \"name\": \"table_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which table in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"column_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which column under `table_name` in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"primary_key\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The primary key value of `table_name` (or which row) in the relational database that the text content belongs to. Note that, the triplet (`table_name`, `column_name`, `primary_key`) can be used to construct a one-to-one mapping between the `text` field in the current vectorstore and the cell entry in the relational database.\"\n            }\n        ]\n    },\n    {\n        \"collection_name\": \"text_sentence_transformers_all_minilm_l6_v2\",\n        \"modality\": \"text\",\n        \"embed_type\": \"sentence_transformers\",\n        \"embed_model\": \"all-MiniLM-L6-v2\",\n        \"description\": \"This collection is used to store the embeddings generated by the all-MiniLM-L6-v2 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric COSINE.\",\n        \"fields\": \"The fields of this collection are similar to the `text_bm25_en` collection.\"\n    }\n]\n\nThe following lists all encodable (table_name, column_name, encode_modality) information from the corresponding DuckDB database, where the encoded vector entries are sourced. Note that, for text modality, we directly encode cell values from the `table_name.column_name`; for image modality, we encode the cropped images for `page_number` in `pdf_id` with bounding boxes from `table_name.column_name`. You can leverage them for filter condition during similarity search:\n[\n    [\n        \"metadata\",\n        \"title\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"abstract\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"bibtex\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"tldr\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_content\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_summary\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_caption\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_summary\",\n        \"text\"\n    ],\n    [\n        \"chunks\",\n        \"text_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_caption\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_summary\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_title\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_content\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_summary\",\n        \"text\"\n    ],\n    [\n        \"equations\",\n        \"equation_content\",\n        \"text\"\n    ],\n    [\n        \"reference\",\n        \"reference_content\",\n        \"text\"\n    ]\n]\n\nHere are the operators that you can use in the filtering condition for the vectorstore:\n{\n    \"operators\": {\n        \"logical\": [\n            {\n                \"symbol\": \"not\",\n                \"example\": \"not expr\",\n                \"description\": \"True if expr is false.\"\n            },\n            {\n                \"symbol\": \"and\",\n                \"example\": \"expr1 and expr2\",\n                \"description\": \"True if both expr1 and expr2 are true.\"\n            },\n            {\n                \"symbol\": \"or\",\n                \"example\": \"expr1 or expr2\",\n                \"description\": \"True if either expr1 or expr2 are true.\"\n            }\n        ],\n        \"binary arithmetic\": [\n            {\n                \"symbol\": \"+\",\n                \"example\": \"a + b\",\n                \"description\": \"Add the two operands.\"\n            },\n            {\n                \"symbol\": \"-\",\n                \"example\": \"a - b\",\n                \"description\": \"Subtract the second operand from the first operand.\"\n            },\n            {\n                \"symbol\": \"*\",\n                \"example\": \"a * b\",\n                \"description\": \"Multiply the two operands.\"\n            },\n            {\n                \"symbol\": \"/\",\n                \"example\": \"a / b\",\n                \"description\": \"Divide the first operand by the second operand.\"\n            },\n            {\n                \"symbol\": \"**\",\n                \"example\": \"a ** b\",\n                \"description\": \"Raise the first operand to the power of the second operand.\"\n            },\n            {\n                \"symbol\": \"%\",\n                \"example\": \"a % b\",\n                \"description\": \"Divide the first operand by the second operand and yield the remainder portion.\"\n            }\n        ],\n        \"relational\": [\n            {\n                \"symbol\": \"<\",\n                \"example\": \"a < b\",\n                \"description\": \"True if a is less than b.\"\n            },\n            {\n                \"symbol\": \">\",\n                \"example\": \"a > b\",\n                \"description\": \"True if a is greater than b.\"\n            },\n            {\n                \"symbol\": \"==\",\n                \"example\": \"a == b\",\n                \"description\": \"True if a is equal to b. Please use **two** equal signs for equality comparison.\"\n            },\n            {\n                \"symbol\": \"!=\",\n                \"example\": \"a != b\",\n                \"description\": \"True if a is not equal to b.\"\n            },\n            {\n                \"symbol\": \"<=\",\n                \"example\": \"a <= b\",\n                \"description\": \"True if a is less than or equal to b.\"\n            },\n            {\n                \"symbol\": \">=\",\n                \"example\": \"a >= b\",\n                \"description\": \"True if a is greater than or equal to b.\"\n            },\n            {\n                \"symbol\": \"in\",\n                \"example\": \"a in [b, c, ...]\",\n                \"description\": \"True if a is equal to any of the values in the list.\"\n            }\n        ],\n        \"array operations\": [\n            {\n                \"symbol\": \"[]\",\n                \"example\": \"bbox[0]\",\n                \"description\": \"This expression gets the first element in array bbox. For example, 'bbox[0] < 50' evaluates to true if the value of bbox[0] is less than 50.\"\n            },\n            {\n                \"symbol\": \"array_contains\",\n                \"example\": \"array_contains(bbox, 100)\",\n                \"description\": \"This expression evaluates to true if array bbox contains element 100.\"\n            },\n            {\n                \"symbol\": \"array_length\",\n                \"example\": \"array_length(int_array) == 4\",\n                \"description\": \"This expression evaluates to true if int_array contains exactly 4 elements.\"\n            }\n        ]\n    },\n    \"use cases\": [\n        {\n            \"example\": \"table_name == 'chunks' and column_name == 'text_content'\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and column_name equal to 'text_content'.\"\n        },\n        {\n            \"example\": \"table_name == 'chunks' and primary_key in ['123', '456', '789']\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and primary_key equal to any of the values in the list ['123', '456', '789'].\"\n        },\n        {\n            \"example\": \"bbox[0] + bbox[2] <= 100 and bbox[1] + bbox[3] <= 300 and pdf_id == '123456' and page_number == 1\",\n            \"description\": \"For image modality, filter results to include only image regions that are entirely within the upper-left quadrant of page 1 in the PDF with ID '123456', assuming the page dimensions are 200 (width) x 600 (height).\"\n        }\n    ]\n}"}
{"role": "assistant", "content": "[Thought]: To determine the number of LLMs evaluated in the ConvBench paper and the MINT paper, I will first retrieve the relevant sections or text content from the database for both papers. I will then parse this content to count the number of LLMs mentioned.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT sections.section_content FROM sections JOIN metadata ON sections.ref_paper_id = metadata.paper_id WHERE metadata.paper_id IN ('1cf7ea57-d128-5619-9361-6b35db040c25', '09d48a2a-4ad0-5a7f-84ec-557ac57f5830') AND sections.section_title IN ('Introduction', 'Methodology', 'Experiments', 'Results', 'Conclusion');\")"}
{"role": "user", "content": "[Observation]:\n{\"section_content\":\"Introduction\\nOpen-ended multi-turn visual conversations are usual in our daily lives and should be one of the\\nfeatures of artificial general intelligence (AGI). Recent large vision language models (LVLMs, e.g.,\\nGPT4V [1], Claude [2], and InternVL-Chat [3]) have achieved impressive performance in such\\nconversations, which is also the common usage of LVLMs. However, existing benchmarks [4, 5, 6, 7,\\n8, 9, 10, 11, 12, 13] for LVLMs conduct single-turn conversations, and most use close-ended multi-\\nchoice questions for evaluation. To this end, this paper presents a multi-turn conversation benchmark\\nnamed ConvBench to measure the advancement of LVLMs. Beyond open-ended and multi-turn,\\nour questions are hierarchical and real-world, and we introduce an automatic evaluation method.\\nIn particular, in each conversation, ConvBench can decouple different capabilities evaluations and\\nperform reliable error attribution, blazing a new trail in LVLMs evaluation.\\nWe first introduce the hierarchical structure of multi-turn questions. Previous benchmarks treat\\ndifferent multimodal capabilities independently using independent questions while ignoring the\\nB Corresponding Authors: zhangkaipeng@pjlab.org.cn; shaowenqi@pjlab.org.cn\\n38th Conference on Neural Information Processing Systems (NeurIPS 2024) Track on Datasets and Benchmarks.\\nFigure 1: The comparison between previous evaluation benchmarks (a) and our ConvBench (b).\\nPrevious benchmarks assess capabilities independently in a single-turn conversation, while our\\nConvBench evaluates multi-turn conversation by hierarchically assessing perception, reasoning, and\\ncreativity. (c) shows that the error should be attributed to perception rather than reasoning, while\\nConvBench employs annotated reference answers that can do such accurate error attribution.\\nfact that multimodal capabilities are highly dependent on each other. It makes it hard to conduct\\nerror attribution. For example, when the model responds incorrectly to a reasoning question, it is\\nunclear whether it is attributed to the perception or reasoning error of LVLMs (see Figure 1 (c)).\\nBesides, humans reason based on their perceptions and generate new ideas through perceptual and\\nreasoning skills. Therefore, ConvBench progressively examines the perception, reasoning, and\\ncreativity capabilities in a multi-turn conversation, seeing Figure 1 (b) for examples. In this way, we\\ncan conduct more accurate error attribution by giving reference answers to previous questions.\\nWe then introduce the source of the multi-turn questions. We collect images and questions from the\\nperspective of real-world user behavior. Specifically, VisIT-Bench [7] is a single-turn visual question\\nanswering (VQA) dataset collected from users\\u2019 \\u201cwish list\\\". ConvBench uses its images and extends\\nits questions in our multi-turn hierarchical structure. The new questions align with real-world user\\nbehavior and involve many new tasks. We illustrate the dataset construction in Figure 3 and details\\nin Section 3. Overall, ConvBench comprises 577 meticulously curated multi-turn VQA samples,\\nspanning 71, 65, and 79 distinct types of perception, reasoning, and creation tasks, respectively.\\nUnlike most existing benchmarks employing multi-choice questions, we allow LVLMs to output\\nanything to resemble real-world user behavior. However, its evaluation is much more challenging\\nsince the correct answer is not only. Therefore, we introduce a reliable automated evaluation named\\nConvBenchEval for open-ended visual questions. Specifically, we annotate each question\\u2019s reference\\nanswers and each image\\u2019s question-aware caption. Additionally, we annotate assessment focus points\\nfor creation questions for more accurate evaluation. Based on the above annotations (see Figure 3 for\\nexamples) and LVLMs\\u2019 responses, we then employ ChatGPT [14] to judge if the LVLM\\u2019s response is\\nbetter than the reference answer. We illustrate the evaluation pipeline in Figure 4. We also conduct a\\nhuman evaluation on a subset of ConvBench while ChatGPT achieves 81.83% judgment agreement\\nwith human evaluation results, demonstrating the reliability of ChatGPT.\\n2\\nWe assess 20 publicly available LVLMs. The evaluation results reveal several innovative findings: i)\\nOur ConvBench provides a significant challenge for evaluating the follow-up capability of LVLMs\\u2019\\nmulti-turn conversation, notably GPT4V [1] achieves only 39.51% overall score. ii) The novel\\nhierarchical ablation evaluations of ConvBench conclude that the weakness of \\u201cOCR\\u201d, \\u201cFine-grained\\u201d,\\nand \\u201cSpatial\\u201d perception of current LVLMs may inhibit the performance of the next reasoning and\\ncreation tasks. The weakness of LVLMs\\u2019 reasoning capability demanding \\u201cProfessional Knowledge\\u201d,\\n\\u201cEmotional Intelligence\\u201d, \\u201cImagination\\u201d, and \\u201cSense of Space\\u201d may hinder the performance of\\nthe next creation. iii) The performances across different tasks of different LVLMs show a similar\\ndistribution, which suggests the development of current LVLMs are synchronous. iv) Performance\\nimproves as the language model size of LVLM increases. v) A declined performance between the\\nfirst turn and subsequent turns shows that LVLMs tend to generate comprehension biases as the\\nmulti-turn conversation progresses or forget the information of previous turns. vi) The high-quality\\ndialogue history provides important guidance to the LVLMs\\u2019 responses and plays an important role\\nin in-context learning examples.\\nThe contributions of our work are summarized as follows. (1) We present the first open-ended\\nmulti-turn visual conversations benchmark ConvBench. It is challenging, real-world, and aligns\\nwith user behavior. (2) In each conversation, ConvBench progressively examines a three-level\\nhierarchy of multimodal capabilities, including perception, reasoning, and creativity. It can decouple\\nthese capabilities in evaluations and conduct reliable error attribution. (3) We present an automatic\\nevaluation to handle the challenging open-ended multi-turn conversations and achieve high agreement\\nwith the human evaluation. (4) Our experimental results reveal that ConvBench is challenging for\\ncurrent LVLMs, even for GPT4V. Besides, we have some insightful findings from experiments.\\n2\"}\n{\"section_content\":\"INTRODUCTION\\nTo address complex tasks, Large Language Models (LLMs) often need multiple rounds of inter-\\naction with the users, sometimes aided by external tools (Schick et al., 2023b; ChatGPT Plugins;\\nMialon et al., 2023). LLMs\\u2019 performance during multiple turns of user-LLM exchanges is crucial in\\nreal-world applications: roughly 73% of Human-ChatGPT conversations contain more than one turn\\nbased on 94k entries of ShareGPT data (2023). Meanwhile, the ability to adapt to user-provided nat-\\nural language feedback is also pivotal for their practical utility. However, current LLM evaluations\\npredominantly focus on single-turn input-output (Hendrycks et al., 2020; Chen et al., 2021) and of-\\nten overlook user-provided natural language feedback (Liu et al., 2023d; Deng et al., 2023b; Yang\\net al., 2023a; Shridhar et al., 2020), creating a discrepancy between real-world use cases and evalua-\\ntion. Measuring how much LLMs can benefit from both tools and natural language feedback during\\nmulti-turn interaction is essential to incentivize future research to improve LLMs\\u2019 capabilities in\\na broader range of real-world scenarios.\\nTo bridge these gaps, we introduce MINT. It is a benchmark for LLMs that measures their per-\\nformance during multi-turn interaction, focusing on two particular capabilities (\\u00a72.1): (1) tool-\\n\\u2217Equal contribution. \\u2020Work done during internship at UIUC.\\n1Code is available on our project website: https:\\/\\/xingyaoww.github.io\\/mint-bench\\n1\\nPublished as a conference paper at ICLR 2024\\naugmented task-solving; (2) leveraging natural language feedback. MINT mirrors the real-world\\nuser-LLM-tool collaborative problem-solving setting. To solve a problem, the LLM can use external\\ntools by generating and executing Python programs (Wang et al., 2024) and\\/or collecting natural lan-\\nguage feedback to refine its solutions; the feedback is provided by GPT-4 (OpenAI, 2023), aiming\\nto simulate human users in a reproducible and scalable way.2 For a comprehensive evaluation, we\\ninclude eight established datasets spanning reasoning, code generation, and decision-making (\\u00a72.2).\\nTo facilitate affordable multi-turn evaluation, after collecting 29,307 diverse instances from existing\\ndatasets (Tab. 1), we construct a subset of 586 challenging and representative instances that require\\nmulti-turn interaction to solve3.\\nWe evaluate 4 closed- and 16 open-source LLMs with MINT. We measure LLMs\\u2019 tool-augmented\\ntask-solving capability by analyzing their performance from multi-turn tool use (\\u00a73.2). To assess\\nthe ability to leverage natural language feedback, we measure their performance upon natural\\nlanguage feedback by GPT-4 (\\u00a73.3). Our results show that:\\n\\u2022 All models benefit from tool interaction and natural language feedback, with absolute performance\\ngains by 1\\u20138% for each additional turn of tool use, and 2\\u201317% with natural language feedback.\\n\\u2022 Better single-turn performance does not necessarily entail better multi-turn performance. For\\nexample, while Claude-2 outperforms its predecessor Claude-1 in single-turn evaluation, the latter\\nbenefit more from interaction and performs better with > 2 turns.\\n\\u2022 There is a notable gap between open- and closed-source LLMs in multi-turn interaction per-\\nformance. For example, with the help of language feedback, even the best open-source model,\\nLemur-70b-chat-v1, lags behind the best closed-source model by 8.7% in absolute success rate.\\n\\u2022 On most LLMs we evaluated, models trained with supervised instruction fine-tuning (SIFT, Wei\\net al., 2022) and reinforcement learning from human feedback (RLHF, Ouyang et al., 2022a) per-\\nform worse in multi-turn settings regardless of the presence of language feedback. For example,\\nSIFT hurts Codellama-34B\\u2019s multi-turn performance by 11.1% and 15.4% (w\\/ feedback), and\\nRLHF negatively affects LLaMA-2-70B by 8.5% and 8.7%, respectively. Notable exceptions are\\nVicuna-7B and Lemur-70b-chat-v1, where SIFT improves multi-turn interaction.\\nBy fixing the LLM to evaluate and changing the feedback-provider LLM, MINT can measure dif-\\nferent LLMs\\u2019 capabilities in providing useful feedback (\\u00a73.4); We find that feedback-providing\\nability could be orthogonal to task-solving ability: despite performing the worst in task-solving,\\nCodeLLaMA-34B-Instruct can provide feedback to improve the stronger GPT-3.5. Additionally,\\nMINT\\u2019s challenging evaluation reveals undesired artifacts in ShareGPT data (2023), a widely used\\ndataset for instruction tuning (\\u00a73.5). Furthermore, we show that GPT4-simulated language feedback\\nis as helpful as human-written feedback based on human evaluation and task performance (\\u00a73.6).\\nWe expect that MINT can help track progress and incentivize future research in improving LLM\\u2019s\\nmulti-turn task-solving and\\/or feedback-providing capabilities, especially for open-source commu-\\nnities where human evaluation can be less accessible than commercial LLMs with a large user base.\\n2\\nMINT\\nIn this section, we discuss (1) how to evaluate multi-turn interaction (\\u00a72.1) with tool use and lan-\\nguage feedback under different settings; (2) how we repurpose existing datasets for MINT evaluation\\n(\\u00a72.2). We use Fig. 1 as a running example.\\n2.1\\nINTERACTION FRAMEWORK\\nMINT aims to simulate real-world applications of LLMs, emphasizing user-LLM and LLM-tool\\ninteractions. In user-LLM collaborative problem-solving, a human user provides initial instruction\\nand aims to obtain a correct solution with little effort to help the LLM. On the other hand, augment-\\ning LLMs\\u2019 with tools can effectively improve LLMs\\u2019 task-solving capabilities (Mialon et al., 2023),\\nsuggesting the importance of LLM-tool interaction. We instruct the LLM (\\u00a7F.4.1) to perform the\\n2We use gpt-4-0613 version in this work.\\n3Evaluating an LLM using MINT costs around 100 USD (\\u22483M prompt tokens and \\u2248100K completion\\ntokens) with feedback from gpt-4-0613 ($0.03\\/1K prompt tokens and $0.06\\/1K completion tokens), roughly\\n7% of the cost compared to hiring real-human annotators (\\u00a73.6).\\n2\"}\n\n... # only display 2 rows in JSON format, more are truncated due to length constraint based on max_tokens (5000)"}
{"role": "assistant", "content": "[Thought]: The retrieved sections contain the number of LLMs evaluated in both papers. I will parse these sections to count the number of LLMs mentioned in each paper and then compute the difference.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT sections.section_content FROM sections JOIN metadata ON sections.ref_paper_id = metadata.paper_id WHERE metadata.paper_id IN ('1cf7ea57-d128-5619-9361-6b35db040c25', '09d48a2a-4ad0-5a7f-84ec-557ac57f5830') AND sections.section_title = 'Experiments';\")"}
{"role": "user", "content": "[Observation]:\n{\"section_content\":\"EXPERIMENTS\\n3.1\\nSETUP\\nEvaluated LLMs. To comprehensively measure multi-turn interaction capability and identify the\\npotential gap between open- and closed-source LLMs, we evaluate 4 closed- and 16 open-source\\nLLMs.\\nWe cover different sizes and training techniques to better understand how they affect\\nLLMs\\u2019 multi-turn interaction capability. Training techniques lead to three model variants: pre-\\ntrained (base) models, supervised instruction fine-tuned (SIFT, Wei et al., 2022) models, and mod-\\nels trained with reinforcement learning from human feedback (RLHF, Ouyang et al., 2022a). For\\nclosed-source models, we evaluate popular commercial LLMs, including gpt-3.5-turbo-0613\\nfrom OpenAI API; claude-instant-1, claude-2 from Anthropic Claude API5; Bard\\nchat-bison-001 from Bard API. For open-source LLMs, we evaluate the LLaMA-2 model\\nfamily (7B, 13B, 70B) (Touvron et al., 2023), including base and chat (RLHF); Vicuna-v1.5\\n(7B, 13B) (Zheng et al., 2023), a SIFT model fine-tuned on multi-turn conversations based on\\nLLaMA-2-base; the CodeLLaMA model family (7B, 13B, 34B) (Rozi`\\nere et al., 2023) that pre-\\ntrain LLaMA-2-base on code, including base and instruct (SIFT); Lemur-v1-70B (Xu\\net al., 2023) pre-train LLaMA-2 on code intensive data, including base and chat (SIFT).\\nMetric. We consider Success Rate SR as our evaluation metric, which measures the percentage\\nof successful task instances. For interaction limit k, we start from scratch and allow each LLM to\\ninteract up to the k-th turn and measure their corresponding SRk. Unless otherwise noted, we limit\\nk \\u2208[1, 5] where k = 1 means no interaction and k = 5 maximizes interaction turns within most\\nmodern LLMs\\u2019 context window (4,096 tokens).\\n3.2\\nMEASURING LLM\\u2019S TOOL-AUGMENTED TASK-SOLVING IN MULTI-TURN INTERACTION\\nWe ask LLMs to solve tasks (\\u00a72.2) with different interaction limits k \\u2208{1, 2, 3, 4, 5} without natural\\nlanguage feedback (Fig. 1 without red dotted box), and quantify LLMs\\u2019 tool-augmented task-solving\\ncapability by (1) absolute performance SR5 and (2) improvement per additional interaction turn\\n\\u2206tools estimated as the slope b from least-square regression minb,a\\nP\\nk(b \\u00b7 k + a \\u2212SRk)2 (Tab. 2).\\nSince the underlying SRk vs. k relationship might not be linear, we only use the regression coef-\\nficient (with R2) as a rough estimate of the improvement rate to complement the absolute success\\nrate SR5 for a more comprehensive understanding of the models\\u2019 capabilities.\\nOverall observations. In Fig. 2, we find all open-source models fall behind best commercial closed-\\nsource models in both SR5 and \\u2206tools, with claude-2 and claude-instant-1 surpassing all\\nopen-source LLMs in \\u2206tools with high R2, suggesting near-linear improvement. Notably, despite\\nperforming badly at k = 1, claude-instant-1 surpasses claude-2 as k increases to 3, even-\\n5According to https:\\/\\/docs.anthropic.com\\/claude\\/reference\\/selecting-a-model,\\nwe use version v1.2 for claude-instant-1 and v2.0 for claude-2.\\n5\\nPublished as a conference paper at ICLR 2024\\nTable 2: Tool-augmented task-solving success rate with different interaction limit k (i.e., max num-\\nber of interaction turns allowed) and improvement rate (estimated with least-square regression coef-\\nficient, regression R2 is also included). The slope (i.e., coefficient) indicates the rate of improvement\\nwhile R2 denotes the goodness of fit of the regression model to the data.\\nSR (Micro-averaged across tasks)\\nImprovement Rate\\nModels\\nSize\\nType\\nk = 1\\nk = 2\\nk = 3\\nk = 4\\nk = 5\\nSlope\\nR2\\nOpen-source LLM\\nCodeLLaMA\\n7B\\nBase\\u2217\\n0.3\\n4.1\\n7.2\\n7.2\\n4.3\\n+1.1\\n0.38\\nSIFT\\n0.3\\n7.8\\n10.2\\n9.7\\n8.7\\n+1.9\\n0.53\\n13B\\nBase\\n0.5\\n13.7\\n17.9\\n19.3\\n18.4\\n+4.1\\n0.70\\nSIFT\\u2217\\n1.5\\n12.6\\n13.1\\n15.0\\n14.5\\n+2.8\\n0.64\\n34B\\nBase\\n0.2\\n16.2\\n23.0\\n25.9\\n28.2\\n+6.6\\n0.85\\nSIFT\\u2217\\u2020\\n2.6\\n10.1\\n14.7\\n15.4\\n17.1\\n+3.4\\n0.86\\nLLaMA-2\\n7B\\nBase\\n0.2\\n5.6\\n7.3\\n8.9\\n9.7\\n+2.2\\n0.87\\nRLHF\\u2217\\n1.0\\n4.3\\n6.7\\n6.5\\n7.3\\n+1.5\\n0.83\\n13B\\nBase\\n0.2\\n11.4\\n15.5\\n15.2\\n14.5\\n+3.2\\n0.63\\nRLHF\\n4.1\\n12.5\\n12.5\\n13.3\\n11.9\\n+1.7\\n0.47\\n70B\\nBase\\n1.9\\n19.4\\n24.6\\n26.4\\n26.4\\n+5.6\\n0.73\\nRLHF\\n4.3\\n14.3\\n15.7\\n16.6\\n17.9\\n+3.0\\n0.73\\nLemur-v1\\n70B\\nBase\\n1.0\\n17.9\\n23.6\\n25.3\\n26.3\\n+5.8\\n0.77\\nSIFT\\n3.8\\n27.0\\n35.7\\n37.5\\n37.0\\n+7.7\\n0.73\\nVicuna-v1.5\\n7B\\nSIFT\\u2020\\n0.0\\n6.7\\n12.3\\n15.4\\n12.6\\n+3.4\\n0.77\\n13B\\nSIFT\\u2020\\n0.0\\n2.2\\n4.4\\n6.7\\n8.4\\n+2.1\\n1.00\\nClosed-source LLM\\nchat-bison-001\\n-\\n-\\u2217\\n0.3\\n15.9\\n14.2\\n13.0\\n14.5\\n+2.5\\n0.40\\nclaude-2\\n-\\n-\\n26.4\\n35.5\\n36.0\\n39.8\\n39.9\\n+3.1\\n0.81\\nclaude-instant-1\\n-\\n-\\n12.1\\n32.2\\n39.2\\n44.4\\n45.9\\n+8.0\\n0.84\\ngpt-3.5-turbo-0613\\n-\\n-\\n2.7\\n16.9\\n24.1\\n31.7\\n36.2\\n+8.2\\n0.96\\ngpt-4-0613\\n-\\n-\\n-\\n-\\n-\\n-\\n69.5\\n-\\n-\\n* Evaluated LLM failed to produce parsable output as instructed in some cases. See \\u00a73.5 and Tab. A.7 for details.\\n\\u2020 We identified potential undesired artifacts in its training data, which hurt its performance. See \\u00a73.5 for details.\\ntually achieving a higher SR5 (45.9% vs. 39.9%), suggesting claude-instant-1\\u2019s superior\\nability to improve with multi-turn interaction.\\nAbsolute performance and improvement-per-turn scale with model size.\\nFor open-source\\nCodeLLaMA and LLaMA-2, we observe a trend on all variants (Base, SIFT, and RLHF) that \\u2206tools\\nand SR5 increase when scaling up LLMs. As we discuss in \\u00a73.5, Vicuna-v1.5 models are an\\nexception, potentially due to their training artifacts that hurt task performance.\\n1\\n2\\n3\\n4\\n5\\nMax Number of Interaction T\\nurns k\\n0\\n10\\n20\\n30\\n40\\n50\\n60\\n70\\nSuccess Rate, micro-averaged (%)\\ngpt-4-0613: Success Rate=69.11 (k=5)\\nCodeLlama (34B, Base)\\nCodeLlama (34B, SIFT)\\nLLaMA-2 (70B, Base)\\nLLaMA-2 (70B, RLHF)\\nchat-bison-001 (closed-source)\\nclaude-2 (closed-source)\\nclaude-instant-1 (closed-source)\\ngpt-3.5-turbo-0613 (closed-source)\\nFigure 2: With an increasing interaction\\nlimit k, the success rate (%, micro aver-\\naged) improves at different rates for dif-\\nferent LLMs. For clarity, only a subset\\nof evaluated LLMs are visualized.\\nSIFT on multi-turn data can be helpful.\\nDespite\\nthe issue above, Vicuna-v1.5 (7B, SIFT) does show\\nstronger performance compared to LLaMA-2 (Base and\\nRLHF, 7B) in \\u2206tools (+3.4% vs. +2.2% \\/ +1.5%) and\\nSR5 (12.6% vs.\\n9.7% \\/ 7.3%).\\nLemur-v1 (70B,\\nSIFT) also shows stronger performance than its Base vari-\\nant. However, except CodeLLaMA (7B), we do not find\\nsimilar improvements on CodeLLaMA (SIFT). We hy-\\npothesize that the performance gain on Vicuna-v1.5\\nand Lemur-v1 could be attributed to fine-tuning on\\nShareGPT\\u2019s multi-turn human-ChatGPT conversations.\\nRLHF could hurt LLM-tool multi-turn interaction.\\nWe find that on LLaMA-2 series, RLHF alignment gen-\\nerally hurts models\\u2019 performance in both \\u2206tools (\\u22120.7%\\nto \\u22122.6%) and SR5 (\\u22122.4% to \\u22128.5%), similar to the\\nprior observation that alignment can degrade task perfor-\\nmance (Ouyang et al., 2022b). However, it\\u2019s hard to conclude that RLHF in general hurts model\\nperformance. We leave it for future work to explore the role of RLHF in multi-turn interaction.\\n6\\nPublished as a conference paper at ICLR 2024\\n3.3\\nMEASURING LLM\\u2019S ABILITY TO LEVERAGE NATURAL LANGUAGE FEEDBACK\\nOn top of LLM-tool interaction, we use gpt-4-0613 to simulate user feedback for evaluated\\nLLMs (Fig. 1 with red dotted box). With a k = 5 interaction limit, we measure the LLM\\u2019s ability to\\nleverage natural language feedback using the absolute performance SRfeedback\\n5\\nand the performance\\ndifference after feedback is given: \\u2206feedback = SRfeedback\\n5\\n\\u2212SR5. We present results in Tab. 3.\\nOverall observations. We find no significant difference between open- and closed-source models\\nin terms of \\u2206feedback. Open-source models obtain +1.7 \\u2013 +17.2% from feedback, while closed-\\nsource models obtain +6.5 \\u2013 +15.2%. However, there is still a gap between them in absolute\\nsuccess rate SRfeedback\\n5\\n, as the best open-source model Lemur-v1 (70B, SIFT) still lags be-\\nhind the best closed-source model claude-instant-1 by 8.7%. Surprisingly, we find that\\nCodeLLaMA-34B-base can achieve comparable performance to GPT-4 on decision-making tasks\\nwith language feedback from it, showing its strong ability to leverage language feedback.\\nThe effect of SIFT and RLHF. Similar to \\u00a73.2, we find that SIFT and RLHF hurt models\\u2019 ability to\\nleverage feedback. The results on CodeLLaMA (except 7B) and LLaMA-2 show that SIFT\\/RLHF\\nmodels all have lower \\u2206feedback and SRfeedback\\n5\\nthan their base variants. Another two exceptions\\nare Vicuna-v1.5 (7B) and Lemur-v1 (70B). We speculate using multi-turn conversations\\n(ShareGPT) for SIFT contributes to these two exceptions.\\n3.4\\nMEASURING THE EFFICACY OF DIFFERENT LLM\\u2019S ABILITY TO PROVIDE FEEDBACK\\nFixing the evaluated model to be gpt-3.5-turbo-0613, we assess seven LLMs\\u2019 feedback-\\nproviding capability through \\u2206feedback (Tab. 4). Our main finding is that task-solving ability could\\nbe orthogonal to feedback-providing ability: LLM\\u2019s higher task-solving performance does not guar-\\nantee better feedback-providing capability and vice versa. For example, although GPT-3.5 (16k)\\nperforms well in task-solving (SR5 ranked 3rd in Tab. 4), it leads to a performance degrada-\\ntion of \\u221210.4% in GPT-3.5; Similarly, GPT-4 with self-feedback in Tab. 3 also experiences de-\\ngraded performance. On the other hand, despite performing the worst in solving tasks in Tab. 4,\\nCodeLLaMA-34B-Instruct can provide feedback that improves the stronger GPT-3.5.\\n3.5\\nMINT CAN HELP DETECT FAILURE PATTERNS OF EVALUATED LLMS\\nSurprisingly, beyond evaluating LLMs\\u2019 multi-turn interaction ability, we find complex multi-turn\\ntasks in MINT can also test an LLM for unexpected behavior. We find two main types of anomalies:\\n(1) inability to follow formatting instructions and (2) unexpected outputs likely due to artifacts.\\nInability to follow formatting instructions. We find that some models (e.g., smaller CodeLLaMA\\nand LLaMA, chat-bison-001) have trouble producing a parsable format as instructed, hindering\\ntask-solving (statistics can be found in Tab. A.7).\\nUnexpected output likely due to data artifact. We find that Vicuna models (SIFT on ShareGPT\\ndata) generate escaped underscore (\\u201c\\\\ \\u201d) instead of underscore (\\u201c \\u201d) across all tasks, causing syn-\\ntax errors when executing code and reducing performance. We examine ShareGPT data (2023) and\\nfind at least one escaped underscore (\\u201c\\\\ \\u201d) artifact on 15% examples, suggesting artifacts in training\\ndata could cause this issue. We observe a similar issue with CodeLLaMA-Instruct: We find\\nthat CodeLLaMA-Instruct (34B) always ignores user-given instructions on the code generation\\ntasks \\u201cwrap your code with <execute> tag\\u201d and uses [PYTHON] to wrap the code (happens on\\n100% of code generation tasks, 0% on other tasks). Touvron et al. (2023) uses [PYTHON] as the\\ntag to generate self-instruct data on code problems for SIFT. We suspect CodeLLaMA-Instruct\\nmodels are trained and overfitted to [PYTHON] token, causing them to produce [PYTHON] regard-\\nless of user instruction. We refer to \\u00a7E.1 and \\u00a7E.2 for examples and quantitative results.\\n3.6\\nCAN GPT-4 GENERATE HUMAN-LEVEL NATURAL LANGUAGE FEEDBACK?\\nWe perform a human evaluation quantitatively comparing the feedback generated by GPT-4 and\\nwritten by humans. Details can be found in Appendix \\u00a7B. In Tab. 5, human annotators consider\\n91.2% of GPT-4 generated language feedback to be as helpful as, if not better than, human written\\nfeedback. It\\u2019s also hard for humans to distinguish GPT-4 generated feedback from human feedback\\n7\\nPublished as a conference paper at ICLR 2024\\nTable 3: LLM\\u2019s ability to leverage natural language feedback, measured by \\u2206feedback between\\nmodels\\u2019 performance with and without feedback produced by gpt-4-0613. All models are eval-\\nuated with an interaction turn limit of k = 5. For both open- and closed-source LLMs, the best\\nperformance is bolded, and the second-best performance is underlined.\\nEvaluated LLM\\nSize\\nType\\nSetup\\nReasoning\\nDecision-Making\\nCode\\nMicro Average\\nOpen-source LLM\\nCodeLLaMA\\n7B\\nBase\\nno feedback\\n\\u22170.0\\n18.7\\n\\u22170.0\\n4.3\\nw\\/ GPT-4 feedback\\n4.8\\n59.7\\n0.0\\n16.2\\n\\u2206feedback, gpt-4\\n+4.8\\n+41.0\\n+0.0\\n+11.9\\nSIFT\\nno feedback\\n7.9\\n17.2\\n2.2\\n8.7\\nw\\/ GPT-4 feedback\\n17.1\\n62.7\\n10.3\\n25.9\\n\\u2206feedback, gpt-4\\n+9.2\\n+45.5\\n+8.1\\n+17.2\\n13B\\nBase\\nno feedback\\n8.5\\n56.0\\n4.4\\n18.4\\nw\\/ GPT-4 feedback\\n15.8\\n73.9\\n27.9\\n31.9\\n\\u2206feedback, gpt-4\\n+7.3\\n+17.9\\n+23.5\\n+13.5\\nSIFT\\nno feedback\\n4.8\\n50.0\\n\\u20202.2\\n14.5\\nw\\/ GPT-4 feedback\\n10.1\\n59.0\\n14.7\\n22.4\\n\\u2206feedback, gpt-4\\n+5.4\\n+9.0\\n+12.5\\n+7.8\\n34B\\nBase\\nno feedback\\n17.4\\n63.4\\n18.4\\n28.2\\nw\\/ GPT-4 feedback\\n30.4\\n84.3\\n30.1\\n42.7\\n\\u2206feedback, gpt-4\\n+13.0\\n+20.9\\n+11.8\\n+14.5\\nSIFT\\nno feedback\\n14.9\\n37.3\\n\\u2217\\u20202.2\\n17.1\\nw\\/ GPT-4 feedback\\n20.2\\n67.9\\n3.7\\n27.3\\n\\u2206feedback, gpt-4\\n+5.4\\n+30.6\\n+1.5\\n+10.2\\nLLaMA-2\\n7B\\nBase\\nno feedback\\n2.9\\n35.8\\n0.0\\n9.7\\nw\\/ GPT-4 feedback\\n4.1\\n46.3\\n8.1\\n14.7\\n\\u2206feedback, gpt-4\\n+1.3\\n+10.5\\n+8.1\\n+4.9\\nRLHF\\nno feedback\\n13.6\\n\\u22170.0\\n0.0\\n7.3\\nw\\/ GPT-4 feedback\\n14.6\\n2.2\\n2.9\\n9.0\\n\\u2206feedback, gpt-4\\n+1.0\\n+2.2\\n+2.9\\n+1.7\\n13B\\nBase\\nno feedback\\n3.5\\n50.0\\n5.2\\n14.5\\nw\\/ GPT-4 feedback\\n10.8\\n60.5\\n15.4\\n23.2\\n\\u2206feedback, gpt-4\\n+7.3\\n+10.5\\n+10.3\\n+8.7\\nRLHF\\nno feedback\\n19.6\\n3.7\\n2.2\\n11.9\\nw\\/ GPT-4 feedback\\n24.1\\n9.7\\n10.3\\n17.6\\n\\u2206feedback, gpt-4\\n+4.4\\n+6.0\\n+8.1\\n+5.6\\n70B\\nBase\\nno feedback\\n18.7\\n59.0\\n12.5\\n26.4\\nw\\/ GPT-4 feedback\\n22.5\\n73.1\\n27.9\\n35.3\\n\\u2206feedback, gpt-4\\n+3.8\\n+14.2\\n+15.4\\n+8.9\\nRLHF\\nno feedback\\n20.2\\n21.6\\n8.8\\n17.9\\nw\\/ GPT-4 feedback\\n23.1\\n41.8\\n19.9\\n26.6\\n\\u2206feedback, gpt-4\\n+2.9\\n+20.1\\n+11.0\\n+8.7\\nLemur-v1\\n70B\\nBase\\nno feedback\\n16.1\\n61.2\\n15.4\\n26.3\\nw\\/ GPT-4 feedback\\n20.9\\n70.2\\n27.9\\n33.8\\n\\u2206feedback, gpt-4\\n+4.8\\n+9.0\\n+12.5\\n+7.5\\nSIFT\\nno feedback\\n31.6\\n59.7\\n27.2\\n37.0\\nw\\/ GPT-4 feedback\\n32.6\\n68.7\\n44.9\\n43.7\\n\\u2206feedback, gpt-4\\n+0.9\\n+9.0\\n+17.6\\n+6.7\\nVicuna-v1.5\\n7B\\nSIFT\\nno feedback\\n\\u202010.1\\n29.1\\n\\u20202.2\\n12.6\\nw\\/ GPT-4 feedback\\n9.8\\n64.9\\n6.6\\n21.7\\n\\u2206feedback, gpt-4\\n\\u22120.3\\n+35.8\\n+4.4\\n+9.0\\n13B\\nSIFT\\nno feedback\\n\\u202011.1\\n\\u20208.2\\n\\u20202.2\\n8.4\\nw\\/ GPT-4 feedback\\n16.5\\n5.2\\n1.5\\n10.4\\n\\u2206feedback, gpt-4\\n+5.4\\n\\u22123.0\\n\\u22120.7\\n+2.1\\nClosed-source LLM\\nchat-bison-001\\n-\\n-\\nno feedback\\n\\u221714.2\\n29.9\\n\\u22170.0\\n14.5\\nw\\/ GPT-4 feedback\\n25.0\\n47.0\\n6.6\\n25.8\\n\\u2206feedback, gpt-4\\n+10.8\\n+17.2\\n+6.6\\n+11.3\\nclaude-2\\n-\\n-\\nno feedback\\n52.2\\n14.2\\n36.8\\n39.9\\nw\\/ GPT-4 feedback\\n55.1\\n41.0\\n47.1\\n50.0\\n\\u2206feedback, gpt-4\\n+2.8\\n+26.9\\n+10.3\\n+10.1\\nclaude-instant-1\\n-\\n-\\nno feedback\\n50.0\\n47.0\\n35.3\\n45.9\\nw\\/ GPT-4 feedback\\n54.4\\n53.0\\n47.1\\n52.4\\n\\u2206feedback, gpt-4\\n+4.4\\n+6.0\\n+11.8\\n+6.5\\ngpt-3.5-turbo-0613\\n-\\n-\\nno feedback\\n36.7\\n41.8\\n29.4\\n36.2\\nw\\/ GPT-4 feedback\\n50.3\\n66.4\\n39.0\\n51.4\\n\\u2206feedback, gpt-4\\n+13.6\\n+24.6\\n+9.6\\n+15.2\\ngpt-4-0613\\n-\\n-\\nno feedback\\n67.4\\n84.3\\n59.6\\n69.5\\nw\\/ GPT-4 feedback\\n67.1\\n85.1\\n56.6\\n68.8\\n\\u2206feedback, gpt-4\\n\\u22120.3\\n+0.7\\n\\u22122.9\\n\\u22120.7\\n* Evaluated LLM failed to produce parsable output as instructed in some cases (\\u00a72.1). See \\u00a73.5 and Tab. A.7 for details.\\n\\u2020 We identified potential undesired artifacts in its training data, which hurt its performance. See \\u00a73.5 for details.\\n8\\nPublished as a conference paper at ICLR 2024\\nTable 4: LLMs\\u2019 ability to provide feedback, mea-\\nsured by \\u2206feedback with a fixed evaluated LLM\\n(GPT-3.5).\\nWe also report SR5 differences be-\\ntween the feedback-provider and evaluated LLM.\\nFeedback-provider LLM\\nSR5 Difference\\n\\u2206feedback\\ngpt-4-0613\\n+33.3\\n+15.2\\nclaude-instant-1\\n+9.7\\n+1.5\\ngpt-3.5-turbo-16k-0613\\n+4.1\\n\\u221210.4\\nCodeLlama-34b (Base)\\n\\u22128.0\\n+2.4\\nLlama-2-70b (Base)\\n\\u22129.7\\n\\u22120.5\\nLlama-2-70b-chat (RLHF)\\n\\u221218.3\\n\\u221214.0\\nCodeLlama-34b-Instruct (SIFT)\\n\\u221219.1\\n+3.2\\nTable 5: Human Evaluation of GPT-4 Gen-\\nerated Feedback against human written feed-\\nback, measuring helpfulness and human-like.\\nPercentage (%)\\nWhich feedback is more\\nHelpful\\nHuman-Like\\nBoth are equally\\n36.3\\n69.9\\nGPT-4 feedback\\n54.9\\n22.1\\nHuman feedback\\n8.8\\n8.0\\n(human-like) in 92% of the cases. We also compare GPT-4 generated and human-written feedback\\nby asking gpt-3.5-turbo-0613 to continue problem-solving with either a turn of (1) human\\nlanguage feedback or (2) GPT-4 feedback. Results show that human feedback and GPT-4 feedback\\nlead to similar model performance SRfeedback\\n5\\n(32.7% vs. 33.6%).\\n4\"}\n\nIn total, 1 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved sections contain the number of LLMs evaluated in both papers. I will parse these sections to count the number of LLMs mentioned in each paper and then compute the difference.\n[Action]:\nClassicRetrieve(query='How many LLMs are evaluated in ConvBench and MINT papers?', limit=5)"}
{"role": "user", "content": "[Observation]:\n{\"score\":0.6844,\"pdf_id\":\"52845774-6019-555a-89ce-3677a2eaea06\",\"page_number\":5,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"ab1f2e7a-a888-5409-ace4-4fa2fb48262f\",\"text\":\"other LLMs. Evaluations about this are presented in Appendix.\"}\n{\"score\":0.6646,\"pdf_id\":\"56dfda86-fbb0-5337-b74f-0dfa07521861\",\"page_number\":11,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"a7b7ac20-5497-53cb-8f10-919af279a03a\",\"text\":\"paper is applicable to LLMs with more parameters (e.g., 70B or more) remains to be explored in\\nfuture research.\\n11\"}\n{\"score\":0.6508,\"pdf_id\":\"5b6dd112-3ac4-58e4-8855-39c6b03a3553\",\"page_number\":4,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"02adcbd4-9863-57d2-8aed-8c7224a3c5b3\",\"text\":\"ing: We consider four LLMs in our benchmark-\\n367\"}\n{\"score\":0.6098,\"pdf_id\":\"a58a4cf3-1921-5a9f-a77e-993d4624c637\",\"page_number\":4,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"eac10dce-0a37-5ae1-9be8-38670616575e\",\"text\":\"ensure its precision in measuring the intended construct. Finally, to ensure consistency and clarity in\\nthe responses obtained from the LLMs, our prompts explicitly specify that only numerical values\\nare allowed, accompanied by a clear definition of the meaning associated with each number (e.g., 1\\ndenotes \\u201cNot at all\\u201d). We compute the average results obtained from at least ten runs to derive the\\nfinal \\u201cDefault\\u201d scores of the LLMs.\\n4\"}\n{\"score\":0.6008,\"pdf_id\":\"f87be714-38b9-59be-915b-2f29cb745cd6\",\"page_number\":1,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"6927c0e3-2046-5f00-b583-33fd44edd6e5\",\"text\":\"distribution of best LLMs on 5,000 instructions that\\nwe collected. More ranking details can be found\\nin Sec. 5.1. Although Vicuna achieves the highest\\npercentage, it ranks \\ufb01rst in only 21.22% of the ex-\\namples. Furthermore, the pie chart suggests that\\nthe optimal LLMs for different examples can sig-\\nni\\ufb01cantly vary and there is no open-source LLM\\n14165\"}\n\nIn total, 5 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved results from the vectorstore did not provide the exact number of LLMs evaluated in the ConvBench and MINT papers. I will parse the sections retrieved from the database to extract the relevant information.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT sections.section_content FROM sections JOIN metadata ON sections.ref_paper_id = metadata.paper_id WHERE metadata.paper_id IN ('1cf7ea57-d128-5619-9361-6b35db040c25', '09d48a2a-4ad0-5a7f-84ec-557ac57f5830') AND sections.section_title = 'Experiments';\")"}
{"role": "user", "content": "[Observation]:\n{\"section_content\":\"EXPERIMENTS\\n3.1\\nSETUP\\nEvaluated LLMs. To comprehensively measure multi-turn interaction capability and identify the\\npotential gap between open- and closed-source LLMs, we evaluate 4 closed- and 16 open-source\\nLLMs.\\nWe cover different sizes and training techniques to better understand how they affect\\nLLMs\\u2019 multi-turn interaction capability. Training techniques lead to three model variants: pre-\\ntrained (base) models, supervised instruction fine-tuned (SIFT, Wei et al., 2022) models, and mod-\\nels trained with reinforcement learning from human feedback (RLHF, Ouyang et al., 2022a). For\\nclosed-source models, we evaluate popular commercial LLMs, including gpt-3.5-turbo-0613\\nfrom OpenAI API; claude-instant-1, claude-2 from Anthropic Claude API5; Bard\\nchat-bison-001 from Bard API. For open-source LLMs, we evaluate the LLaMA-2 model\\nfamily (7B, 13B, 70B) (Touvron et al., 2023), including base and chat (RLHF); Vicuna-v1.5\\n(7B, 13B) (Zheng et al., 2023), a SIFT model fine-tuned on multi-turn conversations based on\\nLLaMA-2-base; the CodeLLaMA model family (7B, 13B, 34B) (Rozi`\\nere et al., 2023) that pre-\\ntrain LLaMA-2-base on code, including base and instruct (SIFT); Lemur-v1-70B (Xu\\net al., 2023) pre-train LLaMA-2 on code intensive data, including base and chat (SIFT).\\nMetric. We consider Success Rate SR as our evaluation metric, which measures the percentage\\nof successful task instances. For interaction limit k, we start from scratch and allow each LLM to\\ninteract up to the k-th turn and measure their corresponding SRk. Unless otherwise noted, we limit\\nk \\u2208[1, 5] where k = 1 means no interaction and k = 5 maximizes interaction turns within most\\nmodern LLMs\\u2019 context window (4,096 tokens).\\n3.2\\nMEASURING LLM\\u2019S TOOL-AUGMENTED TASK-SOLVING IN MULTI-TURN INTERACTION\\nWe ask LLMs to solve tasks (\\u00a72.2) with different interaction limits k \\u2208{1, 2, 3, 4, 5} without natural\\nlanguage feedback (Fig. 1 without red dotted box), and quantify LLMs\\u2019 tool-augmented task-solving\\ncapability by (1) absolute performance SR5 and (2) improvement per additional interaction turn\\n\\u2206tools estimated as the slope b from least-square regression minb,a\\nP\\nk(b \\u00b7 k + a \\u2212SRk)2 (Tab. 2).\\nSince the underlying SRk vs. k relationship might not be linear, we only use the regression coef-\\nficient (with R2) as a rough estimate of the improvement rate to complement the absolute success\\nrate SR5 for a more comprehensive understanding of the models\\u2019 capabilities.\\nOverall observations. In Fig. 2, we find all open-source models fall behind best commercial closed-\\nsource models in both SR5 and \\u2206tools, with claude-2 and claude-instant-1 surpassing all\\nopen-source LLMs in \\u2206tools with high R2, suggesting near-linear improvement. Notably, despite\\nperforming badly at k = 1, claude-instant-1 surpasses claude-2 as k increases to 3, even-\\n5According to https:\\/\\/docs.anthropic.com\\/claude\\/reference\\/selecting-a-model,\\nwe use version v1.2 for claude-instant-1 and v2.0 for claude-2.\\n5\\nPublished as a conference paper at ICLR 2024\\nTable 2: Tool-augmented task-solving success rate with different interaction limit k (i.e., max num-\\nber of interaction turns allowed) and improvement rate (estimated with least-square regression coef-\\nficient, regression R2 is also included). The slope (i.e., coefficient) indicates the rate of improvement\\nwhile R2 denotes the goodness of fit of the regression model to the data.\\nSR (Micro-averaged across tasks)\\nImprovement Rate\\nModels\\nSize\\nType\\nk = 1\\nk = 2\\nk = 3\\nk = 4\\nk = 5\\nSlope\\nR2\\nOpen-source LLM\\nCodeLLaMA\\n7B\\nBase\\u2217\\n0.3\\n4.1\\n7.2\\n7.2\\n4.3\\n+1.1\\n0.38\\nSIFT\\n0.3\\n7.8\\n10.2\\n9.7\\n8.7\\n+1.9\\n0.53\\n13B\\nBase\\n0.5\\n13.7\\n17.9\\n19.3\\n18.4\\n+4.1\\n0.70\\nSIFT\\u2217\\n1.5\\n12.6\\n13.1\\n15.0\\n14.5\\n+2.8\\n0.64\\n34B\\nBase\\n0.2\\n16.2\\n23.0\\n25.9\\n28.2\\n+6.6\\n0.85\\nSIFT\\u2217\\u2020\\n2.6\\n10.1\\n14.7\\n15.4\\n17.1\\n+3.4\\n0.86\\nLLaMA-2\\n7B\\nBase\\n0.2\\n5.6\\n7.3\\n8.9\\n9.7\\n+2.2\\n0.87\\nRLHF\\u2217\\n1.0\\n4.3\\n6.7\\n6.5\\n7.3\\n+1.5\\n0.83\\n13B\\nBase\\n0.2\\n11.4\\n15.5\\n15.2\\n14.5\\n+3.2\\n0.63\\nRLHF\\n4.1\\n12.5\\n12.5\\n13.3\\n11.9\\n+1.7\\n0.47\\n70B\\nBase\\n1.9\\n19.4\\n24.6\\n26.4\\n26.4\\n+5.6\\n0.73\\nRLHF\\n4.3\\n14.3\\n15.7\\n16.6\\n17.9\\n+3.0\\n0.73\\nLemur-v1\\n70B\\nBase\\n1.0\\n17.9\\n23.6\\n25.3\\n26.3\\n+5.8\\n0.77\\nSIFT\\n3.8\\n27.0\\n35.7\\n37.5\\n37.0\\n+7.7\\n0.73\\nVicuna-v1.5\\n7B\\nSIFT\\u2020\\n0.0\\n6.7\\n12.3\\n15.4\\n12.6\\n+3.4\\n0.77\\n13B\\nSIFT\\u2020\\n0.0\\n2.2\\n4.4\\n6.7\\n8.4\\n+2.1\\n1.00\\nClosed-source LLM\\nchat-bison-001\\n-\\n-\\u2217\\n0.3\\n15.9\\n14.2\\n13.0\\n14.5\\n+2.5\\n0.40\\nclaude-2\\n-\\n-\\n26.4\\n35.5\\n36.0\\n39.8\\n39.9\\n+3.1\\n0.81\\nclaude-instant-1\\n-\\n-\\n12.1\\n32.2\\n39.2\\n44.4\\n45.9\\n+8.0\\n0.84\\ngpt-3.5-turbo-0613\\n-\\n-\\n2.7\\n16.9\\n24.1\\n31.7\\n36.2\\n+8.2\\n0.96\\ngpt-4-0613\\n-\\n-\\n-\\n-\\n-\\n-\\n69.5\\n-\\n-\\n* Evaluated LLM failed to produce parsable output as instructed in some cases. See \\u00a73.5 and Tab. A.7 for details.\\n\\u2020 We identified potential undesired artifacts in its training data, which hurt its performance. See \\u00a73.5 for details.\\ntually achieving a higher SR5 (45.9% vs. 39.9%), suggesting claude-instant-1\\u2019s superior\\nability to improve with multi-turn interaction.\\nAbsolute performance and improvement-per-turn scale with model size.\\nFor open-source\\nCodeLLaMA and LLaMA-2, we observe a trend on all variants (Base, SIFT, and RLHF) that \\u2206tools\\nand SR5 increase when scaling up LLMs. As we discuss in \\u00a73.5, Vicuna-v1.5 models are an\\nexception, potentially due to their training artifacts that hurt task performance.\\n1\\n2\\n3\\n4\\n5\\nMax Number of Interaction T\\nurns k\\n0\\n10\\n20\\n30\\n40\\n50\\n60\\n70\\nSuccess Rate, micro-averaged (%)\\ngpt-4-0613: Success Rate=69.11 (k=5)\\nCodeLlama (34B, Base)\\nCodeLlama (34B, SIFT)\\nLLaMA-2 (70B, Base)\\nLLaMA-2 (70B, RLHF)\\nchat-bison-001 (closed-source)\\nclaude-2 (closed-source)\\nclaude-instant-1 (closed-source)\\ngpt-3.5-turbo-0613 (closed-source)\\nFigure 2: With an increasing interaction\\nlimit k, the success rate (%, micro aver-\\naged) improves at different rates for dif-\\nferent LLMs. For clarity, only a subset\\nof evaluated LLMs are visualized.\\nSIFT on multi-turn data can be helpful.\\nDespite\\nthe issue above, Vicuna-v1.5 (7B, SIFT) does show\\nstronger performance compared to LLaMA-2 (Base and\\nRLHF, 7B) in \\u2206tools (+3.4% vs. +2.2% \\/ +1.5%) and\\nSR5 (12.6% vs.\\n9.7% \\/ 7.3%).\\nLemur-v1 (70B,\\nSIFT) also shows stronger performance than its Base vari-\\nant. However, except CodeLLaMA (7B), we do not find\\nsimilar improvements on CodeLLaMA (SIFT). We hy-\\npothesize that the performance gain on Vicuna-v1.5\\nand Lemur-v1 could be attributed to fine-tuning on\\nShareGPT\\u2019s multi-turn human-ChatGPT conversations.\\nRLHF could hurt LLM-tool multi-turn interaction.\\nWe find that on LLaMA-2 series, RLHF alignment gen-\\nerally hurts models\\u2019 performance in both \\u2206tools (\\u22120.7%\\nto \\u22122.6%) and SR5 (\\u22122.4% to \\u22128.5%), similar to the\\nprior observation that alignment can degrade task perfor-\\nmance (Ouyang et al., 2022b). However, it\\u2019s hard to conclude that RLHF in general hurts model\\nperformance. We leave it for future work to explore the role of RLHF in multi-turn interaction.\\n6\\nPublished as a conference paper at ICLR 2024\\n3.3\\nMEASURING LLM\\u2019S ABILITY TO LEVERAGE NATURAL LANGUAGE FEEDBACK\\nOn top of LLM-tool interaction, we use gpt-4-0613 to simulate user feedback for evaluated\\nLLMs (Fig. 1 with red dotted box). With a k = 5 interaction limit, we measure the LLM\\u2019s ability to\\nleverage natural language feedback using the absolute performance SRfeedback\\n5\\nand the performance\\ndifference after feedback is given: \\u2206feedback = SRfeedback\\n5\\n\\u2212SR5. We present results in Tab. 3.\\nOverall observations. We find no significant difference between open- and closed-source models\\nin terms of \\u2206feedback. Open-source models obtain +1.7 \\u2013 +17.2% from feedback, while closed-\\nsource models obtain +6.5 \\u2013 +15.2%. However, there is still a gap between them in absolute\\nsuccess rate SRfeedback\\n5\\n, as the best open-source model Lemur-v1 (70B, SIFT) still lags be-\\nhind the best closed-source model claude-instant-1 by 8.7%. Surprisingly, we find that\\nCodeLLaMA-34B-base can achieve comparable performance to GPT-4 on decision-making tasks\\nwith language feedback from it, showing its strong ability to leverage language feedback.\\nThe effect of SIFT and RLHF. Similar to \\u00a73.2, we find that SIFT and RLHF hurt models\\u2019 ability to\\nleverage feedback. The results on CodeLLaMA (except 7B) and LLaMA-2 show that SIFT\\/RLHF\\nmodels all have lower \\u2206feedback and SRfeedback\\n5\\nthan their base variants. Another two exceptions\\nare Vicuna-v1.5 (7B) and Lemur-v1 (70B). We speculate using multi-turn conversations\\n(ShareGPT) for SIFT contributes to these two exceptions.\\n3.4\\nMEASURING THE EFFICACY OF DIFFERENT LLM\\u2019S ABILITY TO PROVIDE FEEDBACK\\nFixing the evaluated model to be gpt-3.5-turbo-0613, we assess seven LLMs\\u2019 feedback-\\nproviding capability through \\u2206feedback (Tab. 4). Our main finding is that task-solving ability could\\nbe orthogonal to feedback-providing ability: LLM\\u2019s higher task-solving performance does not guar-\\nantee better feedback-providing capability and vice versa. For example, although GPT-3.5 (16k)\\nperforms well in task-solving (SR5 ranked 3rd in Tab. 4), it leads to a performance degrada-\\ntion of \\u221210.4% in GPT-3.5; Similarly, GPT-4 with self-feedback in Tab. 3 also experiences de-\\ngraded performance. On the other hand, despite performing the worst in solving tasks in Tab. 4,\\nCodeLLaMA-34B-Instruct can provide feedback that improves the stronger GPT-3.5.\\n3.5\\nMINT CAN HELP DETECT FAILURE PATTERNS OF EVALUATED LLMS\\nSurprisingly, beyond evaluating LLMs\\u2019 multi-turn interaction ability, we find complex multi-turn\\ntasks in MINT can also test an LLM for unexpected behavior. We find two main types of anomalies:\\n(1) inability to follow formatting instructions and (2) unexpected outputs likely due to artifacts.\\nInability to follow formatting instructions. We find that some models (e.g., smaller CodeLLaMA\\nand LLaMA, chat-bison-001) have trouble producing a parsable format as instructed, hindering\\ntask-solving (statistics can be found in Tab. A.7).\\nUnexpected output likely due to data artifact. We find that Vicuna models (SIFT on ShareGPT\\ndata) generate escaped underscore (\\u201c\\\\ \\u201d) instead of underscore (\\u201c \\u201d) across all tasks, causing syn-\\ntax errors when executing code and reducing performance. We examine ShareGPT data (2023) and\\nfind at least one escaped underscore (\\u201c\\\\ \\u201d) artifact on 15% examples, suggesting artifacts in training\\ndata could cause this issue. We observe a similar issue with CodeLLaMA-Instruct: We find\\nthat CodeLLaMA-Instruct (34B) always ignores user-given instructions on the code generation\\ntasks \\u201cwrap your code with <execute> tag\\u201d and uses [PYTHON] to wrap the code (happens on\\n100% of code generation tasks, 0% on other tasks). Touvron et al. (2023) uses [PYTHON] as the\\ntag to generate self-instruct data on code problems for SIFT. We suspect CodeLLaMA-Instruct\\nmodels are trained and overfitted to [PYTHON] token, causing them to produce [PYTHON] regard-\\nless of user instruction. We refer to \\u00a7E.1 and \\u00a7E.2 for examples and quantitative results.\\n3.6\\nCAN GPT-4 GENERATE HUMAN-LEVEL NATURAL LANGUAGE FEEDBACK?\\nWe perform a human evaluation quantitatively comparing the feedback generated by GPT-4 and\\nwritten by humans. Details can be found in Appendix \\u00a7B. In Tab. 5, human annotators consider\\n91.2% of GPT-4 generated language feedback to be as helpful as, if not better than, human written\\nfeedback. It\\u2019s also hard for humans to distinguish GPT-4 generated feedback from human feedback\\n7\\nPublished as a conference paper at ICLR 2024\\nTable 3: LLM\\u2019s ability to leverage natural language feedback, measured by \\u2206feedback between\\nmodels\\u2019 performance with and without feedback produced by gpt-4-0613. All models are eval-\\nuated with an interaction turn limit of k = 5. For both open- and closed-source LLMs, the best\\nperformance is bolded, and the second-best performance is underlined.\\nEvaluated LLM\\nSize\\nType\\nSetup\\nReasoning\\nDecision-Making\\nCode\\nMicro Average\\nOpen-source LLM\\nCodeLLaMA\\n7B\\nBase\\nno feedback\\n\\u22170.0\\n18.7\\n\\u22170.0\\n4.3\\nw\\/ GPT-4 feedback\\n4.8\\n59.7\\n0.0\\n16.2\\n\\u2206feedback, gpt-4\\n+4.8\\n+41.0\\n+0.0\\n+11.9\\nSIFT\\nno feedback\\n7.9\\n17.2\\n2.2\\n8.7\\nw\\/ GPT-4 feedback\\n17.1\\n62.7\\n10.3\\n25.9\\n\\u2206feedback, gpt-4\\n+9.2\\n+45.5\\n+8.1\\n+17.2\\n13B\\nBase\\nno feedback\\n8.5\\n56.0\\n4.4\\n18.4\\nw\\/ GPT-4 feedback\\n15.8\\n73.9\\n27.9\\n31.9\\n\\u2206feedback, gpt-4\\n+7.3\\n+17.9\\n+23.5\\n+13.5\\nSIFT\\nno feedback\\n4.8\\n50.0\\n\\u20202.2\\n14.5\\nw\\/ GPT-4 feedback\\n10.1\\n59.0\\n14.7\\n22.4\\n\\u2206feedback, gpt-4\\n+5.4\\n+9.0\\n+12.5\\n+7.8\\n34B\\nBase\\nno feedback\\n17.4\\n63.4\\n18.4\\n28.2\\nw\\/ GPT-4 feedback\\n30.4\\n84.3\\n30.1\\n42.7\\n\\u2206feedback, gpt-4\\n+13.0\\n+20.9\\n+11.8\\n+14.5\\nSIFT\\nno feedback\\n14.9\\n37.3\\n\\u2217\\u20202.2\\n17.1\\nw\\/ GPT-4 feedback\\n20.2\\n67.9\\n3.7\\n27.3\\n\\u2206feedback, gpt-4\\n+5.4\\n+30.6\\n+1.5\\n+10.2\\nLLaMA-2\\n7B\\nBase\\nno feedback\\n2.9\\n35.8\\n0.0\\n9.7\\nw\\/ GPT-4 feedback\\n4.1\\n46.3\\n8.1\\n14.7\\n\\u2206feedback, gpt-4\\n+1.3\\n+10.5\\n+8.1\\n+4.9\\nRLHF\\nno feedback\\n13.6\\n\\u22170.0\\n0.0\\n7.3\\nw\\/ GPT-4 feedback\\n14.6\\n2.2\\n2.9\\n9.0\\n\\u2206feedback, gpt-4\\n+1.0\\n+2.2\\n+2.9\\n+1.7\\n13B\\nBase\\nno feedback\\n3.5\\n50.0\\n5.2\\n14.5\\nw\\/ GPT-4 feedback\\n10.8\\n60.5\\n15.4\\n23.2\\n\\u2206feedback, gpt-4\\n+7.3\\n+10.5\\n+10.3\\n+8.7\\nRLHF\\nno feedback\\n19.6\\n3.7\\n2.2\\n11.9\\nw\\/ GPT-4 feedback\\n24.1\\n9.7\\n10.3\\n17.6\\n\\u2206feedback, gpt-4\\n+4.4\\n+6.0\\n+8.1\\n+5.6\\n70B\\nBase\\nno feedback\\n18.7\\n59.0\\n12.5\\n26.4\\nw\\/ GPT-4 feedback\\n22.5\\n73.1\\n27.9\\n35.3\\n\\u2206feedback, gpt-4\\n+3.8\\n+14.2\\n+15.4\\n+8.9\\nRLHF\\nno feedback\\n20.2\\n21.6\\n8.8\\n17.9\\nw\\/ GPT-4 feedback\\n23.1\\n41.8\\n19.9\\n26.6\\n\\u2206feedback, gpt-4\\n+2.9\\n+20.1\\n+11.0\\n+8.7\\nLemur-v1\\n70B\\nBase\\nno feedback\\n16.1\\n61.2\\n15.4\\n26.3\\nw\\/ GPT-4 feedback\\n20.9\\n70.2\\n27.9\\n33.8\\n\\u2206feedback, gpt-4\\n+4.8\\n+9.0\\n+12.5\\n+7.5\\nSIFT\\nno feedback\\n31.6\\n59.7\\n27.2\\n37.0\\nw\\/ GPT-4 feedback\\n32.6\\n68.7\\n44.9\\n43.7\\n\\u2206feedback, gpt-4\\n+0.9\\n+9.0\\n+17.6\\n+6.7\\nVicuna-v1.5\\n7B\\nSIFT\\nno feedback\\n\\u202010.1\\n29.1\\n\\u20202.2\\n12.6\\nw\\/ GPT-4 feedback\\n9.8\\n64.9\\n6.6\\n21.7\\n\\u2206feedback, gpt-4\\n\\u22120.3\\n+35.8\\n+4.4\\n+9.0\\n13B\\nSIFT\\nno feedback\\n\\u202011.1\\n\\u20208.2\\n\\u20202.2\\n8.4\\nw\\/ GPT-4 feedback\\n16.5\\n5.2\\n1.5\\n10.4\\n\\u2206feedback, gpt-4\\n+5.4\\n\\u22123.0\\n\\u22120.7\\n+2.1\\nClosed-source LLM\\nchat-bison-001\\n-\\n-\\nno feedback\\n\\u221714.2\\n29.9\\n\\u22170.0\\n14.5\\nw\\/ GPT-4 feedback\\n25.0\\n47.0\\n6.6\\n25.8\\n\\u2206feedback, gpt-4\\n+10.8\\n+17.2\\n+6.6\\n+11.3\\nclaude-2\\n-\\n-\\nno feedback\\n52.2\\n14.2\\n36.8\\n39.9\\nw\\/ GPT-4 feedback\\n55.1\\n41.0\\n47.1\\n50.0\\n\\u2206feedback, gpt-4\\n+2.8\\n+26.9\\n+10.3\\n+10.1\\nclaude-instant-1\\n-\\n-\\nno feedback\\n50.0\\n47.0\\n35.3\\n45.9\\nw\\/ GPT-4 feedback\\n54.4\\n53.0\\n47.1\\n52.4\\n\\u2206feedback, gpt-4\\n+4.4\\n+6.0\\n+11.8\\n+6.5\\ngpt-3.5-turbo-0613\\n-\\n-\\nno feedback\\n36.7\\n41.8\\n29.4\\n36.2\\nw\\/ GPT-4 feedback\\n50.3\\n66.4\\n39.0\\n51.4\\n\\u2206feedback, gpt-4\\n+13.6\\n+24.6\\n+9.6\\n+15.2\\ngpt-4-0613\\n-\\n-\\nno feedback\\n67.4\\n84.3\\n59.6\\n69.5\\nw\\/ GPT-4 feedback\\n67.1\\n85.1\\n56.6\\n68.8\\n\\u2206feedback, gpt-4\\n\\u22120.3\\n+0.7\\n\\u22122.9\\n\\u22120.7\\n* Evaluated LLM failed to produce parsable output as instructed in some cases (\\u00a72.1). See \\u00a73.5 and Tab. A.7 for details.\\n\\u2020 We identified potential undesired artifacts in its training data, which hurt its performance. See \\u00a73.5 for details.\\n8\\nPublished as a conference paper at ICLR 2024\\nTable 4: LLMs\\u2019 ability to provide feedback, mea-\\nsured by \\u2206feedback with a fixed evaluated LLM\\n(GPT-3.5).\\nWe also report SR5 differences be-\\ntween the feedback-provider and evaluated LLM.\\nFeedback-provider LLM\\nSR5 Difference\\n\\u2206feedback\\ngpt-4-0613\\n+33.3\\n+15.2\\nclaude-instant-1\\n+9.7\\n+1.5\\ngpt-3.5-turbo-16k-0613\\n+4.1\\n\\u221210.4\\nCodeLlama-34b (Base)\\n\\u22128.0\\n+2.4\\nLlama-2-70b (Base)\\n\\u22129.7\\n\\u22120.5\\nLlama-2-70b-chat (RLHF)\\n\\u221218.3\\n\\u221214.0\\nCodeLlama-34b-Instruct (SIFT)\\n\\u221219.1\\n+3.2\\nTable 5: Human Evaluation of GPT-4 Gen-\\nerated Feedback against human written feed-\\nback, measuring helpfulness and human-like.\\nPercentage (%)\\nWhich feedback is more\\nHelpful\\nHuman-Like\\nBoth are equally\\n36.3\\n69.9\\nGPT-4 feedback\\n54.9\\n22.1\\nHuman feedback\\n8.8\\n8.0\\n(human-like) in 92% of the cases. We also compare GPT-4 generated and human-written feedback\\nby asking gpt-3.5-turbo-0613 to continue problem-solving with either a turn of (1) human\\nlanguage feedback or (2) GPT-4 feedback. Results show that human feedback and GPT-4 feedback\\nlead to similar model performance SRfeedback\\n5\\n(32.7% vs. 33.6%).\\n4\"}\n\nIn total, 1 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: From the retrieved sections, I can see that the MINT paper evaluated 4 closed-source and 16 open-source LLMs, totaling 20 LLMs. The ConvBench paper evaluated 20 publicly available LVLMs. Therefore, the number of LLMs evaluated in the ConvBench paper is the same as in the MINT paper. However, the question asks for the difference in the number of LLMs evaluated between the two papers. I will compute this difference and provide the final answer.\n[Action]:\nGenerateAnswer(answer=0)"}
{"role": "user", "content": "[Observation]: 0"}
