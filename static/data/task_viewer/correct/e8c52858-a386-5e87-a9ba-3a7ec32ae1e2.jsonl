{"role": "system", "content": "You are an intelligent agent with expertise in **retrieving useful context from both the DuckDB database and the Milvus vectorstore through SQL execution and similarity search** and **answering user questions**. You will be given a natural language question concerning PDF files, along with the schema of both the database and the vectorstore. Your ultimate goal is to answer the input question with pre-defined answer format. The DuckDB database contains all parsed content of raw PDF files, while the Milvus vectorstore encodes specific column cells from the database as vectors. You can predict executable actions, interact with the hybrid environment (including database and vectorstore) across multiple turns, and retrieve necessary context until you are confident in resolving the question.\n\n--------\n\n## Task Description\nEach task consists of the following parts:\n\n[Question]: User question regarding the PDF, e.g., Is there any ...?\n[Answer Format]: it describes the format of the final answer, e.g., the answer is \"Yes\" or \"No\" without punctuation.\n[Anchor PDF]: Optional, a python str or list, the PDF(s) you must use to answer the question.\n[Reference PDF]: Optional, a python str or list, the PDF(s) you may use to answer the question.\n[Conference]: Optional, a python str or list, the conference(s) and year(s) of the relevant papers for retrieval.\n[Database Schema]: A detailed serialized schema of the DuckDB database for reference when generating SQL queries. It includes 1) tables, 2) columns and their data types, 3) descriptions for these schema items, and 4) primary key and foreign key constraints.\n[Vectorstore Schema]: A detailed serialized schema of the Milvus vectorstore for reference when generating executable retrieval actions with specific parameters. It includes 1) collections, 2) fields, 3) encodable (table, column) pairs in the relational database where the vectorized content originates, and 4) grammar for valid filter rules.\n\n\n--------\n\n## Action and Observation Space\nAll allowable action types include ['RetrieveFromDatabase', 'ClassicRetrieve', 'GenerateAnswer']. Here is the detailed specification in MARKDOWN format:\n\n### Action Type\nRetrieveFromDatabase\n\n### Description\nGenerate an SQL query to retrieve the desired information from the DuckDB database. Please refer to the concrete database schema to produce a valid and executable SQL.\n\n### Observation\nThe observation space is the execution result of the SQL query. You do not need to worry about the actual execution, we will perform it for you. If the SQL failed to execute, we will return the error message. Extremely long SQL output will be truncated.\n\n### Syntax and Parameters (MARKDOWN Format)\nRetrieveFromDatabase(sql: str)\n- sql: str, required. The concrete DuckDB SQL query to execute and retrieve results.\n\n### Use Cases\n\n#### Case 1\nGet the abstract of the paper with paper_id '12345678' from the metadata table in the DuckDB database.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT abstract FROM metadata WHERE paper_id = '12345678';\")\n\n\n#### Case 2\nFind which page in the paper with paper_id '12345678' contains Figure 3.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT pages.page_number FROM images JOIN pages JOIN metadata ON images.ref_page_id = pages.page_id AND pages.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '12345678' AND images.image_caption LIKE '%Figure 3%';\")\n\n\n----\n\n### Action Type\nClassicRetrieve\n\n### Description\nGiven a query text, retrieve relevant context from the Milvus vectorstore.\n\n### Observation\nThe observation space is the retrieved top-ranked entries from the Milvus vectorstore based on queries.\n\n### Syntax and Parameters (MARKDOWN Format)\nClassicRetrieve(query: str, limit: int = 5)\n- query: str, required. The query text will be encoded and used to search for relevant context. You can rephrase the original user question to obtain a more clear and structured query requirement.\n- limit: int, optional, default to 5. The number of top-ranked context to retrieve. Please set it to a positive integer to limit the number of returned results. Extremely large limit values may be truncated.\n\n### Use Cases\n\n#### Case 1\nRetrieve top 5 pieces about a certain topic.\n\n[Action]: ClassicRetrieve(query='Is there any work about the topic structured RAG?')\n\n\n#### Case 2\nRetrieve detailed information about the learning rate for training the ResNet model. The top 4 most relevant entries will be returned based on the query.\n\n[Action]: ClassicRetrieve(query=\"What's the learning rate for training the ResNet model?\", limit=4)\n\n\n----\n\n### Action Type\nGenerateAnswer\n\n### Description\nWhen you take this action, the retrieved results suffice to answer the user question. PLEASE STRICTLY ADHERE TO THE ANSWER FORMAT FOR THE CURRENT QUESTION.\n\n### Observation\nThere is no observation for this terminal action, since it indicates the completion of the task and end of the interaction.\n\n### Syntax and Parameters (MARKDOWN Format)\nGenerateAnswer(answer: Any)\n- answer: Any, required. The final answer to the user question. Please adhere to the answer format for the current question.\n\n### Use Cases\n\n#### Case 1\nThe answer to the user question is 42.\n\n[Action]: GenerateAnswer(answer=42)\n\n\n#### Case 2\nThe answer to the user question is a list of strings: ['Results', 'Discussion'].\n\n[Action]: GenerateAnswer(answer=['Results', 'Discussion'])\n\n\n\n--------\n\n## Interaction Framework\n\nThe main interaction procedure proceeds like this:\n\n----\n\n[Thought]: ... reasoning process, why to take this action ...\n[Action]: ... which action to take, please strictly conform to the action specification ...\n[Observation]: ... execution results or error message after taking the action ...\n\n... # more interleaved triplets of ([Thought], [Action], [Observation])\n\n[Thought]: ... reasoning process to produce the final answer ...\n[Action]: ... the terminate action `GenerateAnswer`, there is no further observation ...\n\n----\n\nIn general, the main interaction loop consists of an interleaved of triplets ([Thought], [Action], [Observation]), except the last `GenerateAnswer` action which does not have \"[Observation]:\". You need to predict the \"[Thought]: ...\" followed by the \"[Action]: ...\" for each turn, and we will execute your action in the environment and provide the \"[Observation]: ...\" for the previous action.\n\n--------\n\n## Suggestions or Hints for Agent Interaction\n\n1. Explore multiple retrieval strategies. For example:\n- Experiment with different (table, column) pairs to extract diverse types of information.\n- Query various embedding models (collections) to find the most relevant context.\n\n2. Combine both structured and unstructured data. Concretely:\n- Use SQL queries to retrieve precise facts and structured data. Pay special attention to morphological variations in cell values.\n- Perform similarity searches in the vectorstore to capture semantic relationships and hidden insights.\n\n3. Iterate and refine:\n- If SQL execution result is not satisfactory, try alternative SQL queries to explore the database content carefully.\n- If the vector-based neural retrieval is insufficient, try alternative approaches or parameter settings.\n- Use your findings to validate or enrich the final response.\n\n4. Ensure confidence. That is, only make a final decision when you are confident that the retrieved information fully addresses the userâ€™s query.\n\n\nRemember that, for each question, you only have 20 interaction turns at most. Now, let's start!\n"}
{"role": "user", "content": "[Question]: What are the catogories of label biases in in-context learning for text classification and what are the definitions of these categories?\n[Answer Format]: Your answer should be a Python list of text strings, with each element being one category that this paper defines, e.g., [\"category 1: define 1\", \"category 2: define 2\", ...].\n[Anchor PDF]: '15f6962b-d927-5d71-b01e-f0664e09eeb5'\n[Database Schema]: The database schema for /home/htc981/workspace/project/HNS-RAG/data/database/ai_research/ai_research.sql is as follows:\n/* database ai_research: This database contains information about AI research papers. Each PDF file is represented or parsed via different views, e.g., pages, sections, figures, tables, and references. We also extract the concrete content inside each concrete element via OCR.\n*/\n/* table metadata: This table stores metadata about each paper, including the number of pages, paper path and paper id.\n*/\nCREATE TABLE IF NOT EXISTS metadata (\n\tpaper_id UUID, -- A unique identifier for this paper.\n\ttitle VARCHAR, -- The title of this paper.\n\tabstract VARCHAR, -- The abstract of this paper.\n\tnum_pages INTEGER, -- The number of pages in this paper.\n\tconference_full VARCHAR, -- The full name of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tconference_abbreviation VARCHAR, -- The abbreviation of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tpub_year INTEGER, -- The year when this paper was published.\n\tvolume VARCHAR, -- The volume of the conference where this paper was published. e.g. findings.\n\tdownload_url VARCHAR, -- The url from which the paper can be downloaded.\n\tbibtex VARCHAR, -- The bibtex of this paper.\n\tauthors VARCHAR[], -- The full names of authors of this paper.\n\tpdf_path VARCHAR, -- The path to the PDF file of this paper.\n\ttldr VARCHAR, -- A brief summary of the paper's main idea or findings generated by LLM based on title and abstract.\n\ttags VARCHAR[], -- Keywords representing the paper's topics, methods, or applications generated by LLM based on title and abstract.,\n\tPRIMARY KEY (paper_id)\n);\n/* table pages: This table stores information of the pages in the papers, including their content, size and their order within the paper. The pagesare extracted using PyMuPDF.\n*/\nCREATE TABLE IF NOT EXISTS pages (\n\tpage_id UUID, -- A unique identifier for each page.\n\tpage_number INTEGER, -- The page number in the current paper, starting from 1.\n\tpage_width INTEGER, -- The pixel width of the current page.\n\tpage_height INTEGER, -- The pixel height of the current page.\n\tpage_content VARCHAR, -- The content of the page.\n\tpage_summary VARCHAR, -- A brief summary of the page content, generated by LLM, focusing on key information and describing the page content.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (page_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table images: This table stores the information about images in each paper. The images are extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS images (\n\timage_id UUID, -- The unique identifier of the image.\n\timage_caption VARCHAR, -- The caption of this image, \"\" if it doesn't have one.\n\timage_summary VARCHAR, -- A brief summary of the image, generated by LLM, focusing on key information and describing the image.\n\tbounding_box INTEGER[4], -- The bounding box of the figure in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height which are used to determine the shape of the rectangle.\n\tordinal INTEGER, -- Each figure is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (image_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table chunks: This table contains the information of each chunk of text (chunk size = 512 tokens with no overlapping) in each page of the paper. A chunk is a sub-text that is extracted from the main text using langchain, such as a sentence or a paragraph.\n*/\nCREATE TABLE IF NOT EXISTS chunks (\n\tchunk_id UUID, -- A unique identifier for each chunk of text.\n\ttext_content VARCHAR, -- The text content of the current chunk.\n\tordinal INTEGER, -- Each chunk is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (chunk_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table tables: This table stores information about tables extracted from pages using MinerU, including content (in html format), bounding box and summary of each table generated by LLM.\n*/\nCREATE TABLE IF NOT EXISTS tables (\n\ttable_id UUID, -- A unique identifier for each table.\n\ttable_caption VARCHAR, -- Caption of the table, showing key information of the table.\n\ttable_content VARCHAR, -- The content of the table in html format.\n\ttable_summary VARCHAR, -- A brief summary of the table content generated by LLM, focusing on key information and describing the table content.\n\tbounding_box INTEGER[4], -- The bounding box of the table in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height.\n\tordinal INTEGER, -- Each table is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this table is located.,\n\tPRIMARY KEY (table_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table sections: This table contains the text content of each section in the paper, e.g. `Introduction`, `Experiment`, `Conclusion`, `Reference`. The sections are extracted using PyMuPDF or MinerU.\n*/\nCREATE TABLE IF NOT EXISTS sections (\n\tsection_id UUID, -- A unique identifier for each section of text.\n\tsection_title VARCHAR, -- The title of the current section.\n\tsection_content VARCHAR, -- The text content of the current section.\n\tsection_summary VARCHAR, -- A brief summary of the section content generated by LLM, focusing on key information and describing the section content.\n\tordinal INTEGER, -- Each section is labeled with one distinct integer number in the paper, which starts from 0.\n\tpage_numbers INTEGER[], -- A list of page numbers where current section is located in the relevant paper.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (section_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table equations: This table stores information about equations extracted from pages using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS equations (\n\tequation_id UUID, -- A unique identifier for each equation.\n\tequation_content VARCHAR, -- Content of the equation in latex format.\n\tordinal INTEGER, -- Each equation is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the paper ID in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the page ID in the `pages` table where this equation is located.,\n\tPRIMARY KEY (equation_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table reference: This table stores information about references extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS reference (\n\treference_id UUID, -- A unique identifier for each reference.\n\treference_content VARCHAR, -- Content of the reference.\n\tordinal INTEGER, -- Each reference is labeled with one distinct integer number according to its order in the paper, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this reference is located.,\n\tPRIMARY KEY (reference_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n[Vectorstore Schema]: The vectorstore schema for ai_research is as follows. You can try collections with different encoding models or modalities:\n[\n    {\n        \"collection_name\": \"text_bm25_en\",\n        \"modality\": \"text\",\n        \"embed_type\": \"bm25\",\n        \"embed_model\": \"en\",\n        \"description\": \"This collection is used to store the sparse embeddings generated by the BM25 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric inner-product (IP).\",\n        \"fields\": [\n            {\n                \"name\": \"id\",\n                \"dtype\": \"INT64\",\n                \"is_primary\": true,\n                \"description\": \"The unique id for each encoded text vector in this collection.\"\n            },\n            {\n                \"name\": \"vector\",\n                \"dtype\": \"SPARSE_FLOAT_VECTOR\",\n                \"description\": \"The encoded sparse vector of the text content generated by the BM25 model. Note that, the raw text content can be uniquely identified by the triplet fields below: `table_name`, `column_name`, `primary_key`.\"\n            },\n            {\n                \"name\": \"pdf_id\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The unique id of the PDF file stored in the relational database that the encoded text belongs to. This field can be used to quickly filter the search space.\"\n            },\n            {\n                \"name\": \"page_number\",\n                \"dtype\": \"INT16\",\n                \"description\": \"The page number in the PDF file that the encoded text belongs to (starting from 1). This field can be used to quickly filter the search space. Value -1 means unknown.\"\n            },\n            {\n                \"name\": \"table_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which table in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"column_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which column under `table_name` in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"primary_key\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The primary key value of `table_name` (or which row) in the relational database that the text content belongs to. Note that, the triplet (`table_name`, `column_name`, `primary_key`) can be used to construct a one-to-one mapping between the `text` field in the current vectorstore and the cell entry in the relational database.\"\n            }\n        ]\n    },\n    {\n        \"collection_name\": \"text_sentence_transformers_all_minilm_l6_v2\",\n        \"modality\": \"text\",\n        \"embed_type\": \"sentence_transformers\",\n        \"embed_model\": \"all-MiniLM-L6-v2\",\n        \"description\": \"This collection is used to store the embeddings generated by the all-MiniLM-L6-v2 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric COSINE.\",\n        \"fields\": \"The fields of this collection are similar to the `text_bm25_en` collection.\"\n    }\n]\n\nThe following lists all encodable (table_name, column_name, encode_modality) information from the corresponding DuckDB database, where the encoded vector entries are sourced. Note that, for text modality, we directly encode cell values from the `table_name.column_name`; for image modality, we encode the cropped images for `page_number` in `pdf_id` with bounding boxes from `table_name.column_name`. You can leverage them for filter condition during similarity search:\n[\n    [\n        \"metadata\",\n        \"title\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"abstract\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"bibtex\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"tldr\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_content\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_summary\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_caption\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_summary\",\n        \"text\"\n    ],\n    [\n        \"chunks\",\n        \"text_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_caption\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_summary\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_title\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_content\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_summary\",\n        \"text\"\n    ],\n    [\n        \"equations\",\n        \"equation_content\",\n        \"text\"\n    ],\n    [\n        \"reference\",\n        \"reference_content\",\n        \"text\"\n    ]\n]\n\nHere are the operators that you can use in the filtering condition for the vectorstore:\n{\n    \"operators\": {\n        \"logical\": [\n            {\n                \"symbol\": \"not\",\n                \"example\": \"not expr\",\n                \"description\": \"True if expr is false.\"\n            },\n            {\n                \"symbol\": \"and\",\n                \"example\": \"expr1 and expr2\",\n                \"description\": \"True if both expr1 and expr2 are true.\"\n            },\n            {\n                \"symbol\": \"or\",\n                \"example\": \"expr1 or expr2\",\n                \"description\": \"True if either expr1 or expr2 are true.\"\n            }\n        ],\n        \"binary arithmetic\": [\n            {\n                \"symbol\": \"+\",\n                \"example\": \"a + b\",\n                \"description\": \"Add the two operands.\"\n            },\n            {\n                \"symbol\": \"-\",\n                \"example\": \"a - b\",\n                \"description\": \"Subtract the second operand from the first operand.\"\n            },\n            {\n                \"symbol\": \"*\",\n                \"example\": \"a * b\",\n                \"description\": \"Multiply the two operands.\"\n            },\n            {\n                \"symbol\": \"/\",\n                \"example\": \"a / b\",\n                \"description\": \"Divide the first operand by the second operand.\"\n            },\n            {\n                \"symbol\": \"**\",\n                \"example\": \"a ** b\",\n                \"description\": \"Raise the first operand to the power of the second operand.\"\n            },\n            {\n                \"symbol\": \"%\",\n                \"example\": \"a % b\",\n                \"description\": \"Divide the first operand by the second operand and yield the remainder portion.\"\n            }\n        ],\n        \"relational\": [\n            {\n                \"symbol\": \"<\",\n                \"example\": \"a < b\",\n                \"description\": \"True if a is less than b.\"\n            },\n            {\n                \"symbol\": \">\",\n                \"example\": \"a > b\",\n                \"description\": \"True if a is greater than b.\"\n            },\n            {\n                \"symbol\": \"==\",\n                \"example\": \"a == b\",\n                \"description\": \"True if a is equal to b. Please use **two** equal signs for equality comparison.\"\n            },\n            {\n                \"symbol\": \"!=\",\n                \"example\": \"a != b\",\n                \"description\": \"True if a is not equal to b.\"\n            },\n            {\n                \"symbol\": \"<=\",\n                \"example\": \"a <= b\",\n                \"description\": \"True if a is less than or equal to b.\"\n            },\n            {\n                \"symbol\": \">=\",\n                \"example\": \"a >= b\",\n                \"description\": \"True if a is greater than or equal to b.\"\n            },\n            {\n                \"symbol\": \"in\",\n                \"example\": \"a in [b, c, ...]\",\n                \"description\": \"True if a is equal to any of the values in the list.\"\n            }\n        ],\n        \"array operations\": [\n            {\n                \"symbol\": \"[]\",\n                \"example\": \"bbox[0]\",\n                \"description\": \"This expression gets the first element in array bbox. For example, 'bbox[0] < 50' evaluates to true if the value of bbox[0] is less than 50.\"\n            },\n            {\n                \"symbol\": \"array_contains\",\n                \"example\": \"array_contains(bbox, 100)\",\n                \"description\": \"This expression evaluates to true if array bbox contains element 100.\"\n            },\n            {\n                \"symbol\": \"array_length\",\n                \"example\": \"array_length(int_array) == 4\",\n                \"description\": \"This expression evaluates to true if int_array contains exactly 4 elements.\"\n            }\n        ]\n    },\n    \"use cases\": [\n        {\n            \"example\": \"table_name == 'chunks' and column_name == 'text_content'\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and column_name equal to 'text_content'.\"\n        },\n        {\n            \"example\": \"table_name == 'chunks' and primary_key in ['123', '456', '789']\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and primary_key equal to any of the values in the list ['123', '456', '789'].\"\n        },\n        {\n            \"example\": \"bbox[0] + bbox[2] <= 100 and bbox[1] + bbox[3] <= 300 and pdf_id == '123456' and page_number == 1\",\n            \"description\": \"For image modality, filter results to include only image regions that are entirely within the upper-left quadrant of page 1 in the PDF with ID '123456', assuming the page dimensions are 200 (width) x 600 (height).\"\n        }\n    ]\n}"}
{"role": "assistant", "content": "[Thought]: First, I need to retrieve the relevant sections or chunks from the paper with the given `paper_id` that discuss the categories of label biases in in-context learning for text classification. I will start by performing a similarity search in the vectorstore to find the most relevant sections or chunks.\n[Action]:\nClassicRetrieve(query='categories of label biases in in-context learning for text classification', limit=5)"}
{"role": "user", "content": "[Observation]:\n{\"score\":0.7776,\"pdf_id\":\"15f6962b-d927-5d71-b01e-f0664e09eeb5\",\"page_number\":9,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"2b6cead6-a71a-53f8-b270-22365386d248\",\"text\":\"(Table 2) indicate that these more capable models\\nmay still be susceptible to label biases. Also, how\\nscaling up or instruction-tuning would relieve label\\nbiases is an interesting direction to explore.\\n9\\nConclusion\\nIn this work, we define a typology of label biases\\nthat affect in-context learning (ICL). We catego-\\nrize existing findings of label biases into two types:\\nvanilla-label bias and context-label bias, and iden-\\ntify a new type of bias, domain-label bias, that\"}\n{\"score\":0.7604,\"pdf_id\":\"5f105529-592e-5ab9-b17a-c360f3370a49\",\"page_number\":11,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"6c067281-864f-5f16-90e5-cd0592d004e6\",\"text\":\"11\\u201321, Brussels, Belgium, October-November 2018. Association for Computational Linguistics.\\ndoi: 10.18653\\/v1\\/D18-1002. URL https:\\/\\/aclanthology.org\\/D18-1002.\\nYu Fei, Yifan Hou, Zeming Chen, and Antoine Bosselut. Mitigating label biases for in-context\\nlearning. ArXiv, abs\\/2305.19148, 2023a. URL https:\\/\\/api.semanticscholar.org\\/CorpusID:\\n258967265.\\nYu Fei, Yifan Hou, Zeming Chen, and Antoine Bosselut. Mitigating label biases for in-context\\nlearning.\"}\n{\"score\":0.7599,\"pdf_id\":\"a34fbc32-e5a3-5e3c-a25b-e456a1c4c9bb\",\"page_number\":5,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"11b3b529-d518-538e-8531-ac1c66440073\",\"text\":\"Qingxiu Dong, Lei Li, Damai Dai, Ce Zheng, Zhiyong Wu, Baobao Chang, Xu Sun, Jingjing Xu,\\nand Zhifang Sui. A survey for in-context learning. arXiv preprint arXiv:2301.00234, 2022. URL\\nhttps:\\/\\/doi.org\\/10.48550\\/arXiv.2301.00234.\\nYu Fei, Yifan Hou, Zeming Chen, and Antoine Bosselut. Mitigating label biases for in-context\\nlearning.\\nIn Proceedings of the 61st Annual Meeting of the Association for Computational\\nLinguistics (Volume 1: Long Papers), pp. 14014\\u201314031, Toronto, Canada, July 2023. Asso-\"}\n{\"score\":0.7558,\"pdf_id\":\"15f6962b-d927-5d71-b01e-f0664e09eeb5\",\"page_number\":1,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"212fb317-0882-5722-85b0-c2ccb53a9009\",\"text\":\"(ICL), such as the choice and order of the in-\\ncontext examples, can bias the model\\u2019s predic-\\ntions. While many studies discuss these design\\nchoices, there have been few systematic inves-\\ntigations into categorizing them and mitigating\\ntheir impact. In this work, we define a typol-\\nogy for three types of label biases in ICL for\\ntext classification: vanilla-label bias, context-\\nlabel bias, and domain-label bias (which we\\nconceptualize and detect for the first time).\"}\n{\"score\":0.7543,\"pdf_id\":\"15f6962b-d927-5d71-b01e-f0664e09eeb5\",\"page_number\":1,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"71e10316-83e6-56e3-8885-d04a7ec15c82\",\"text\":\"Proceedings of the 61st Annual Meeting of the Association for Computational Linguistics\\nVolume 1: Long Papers, pages 14014\\u201314031\\nJuly 9-14, 2023 \\u00a92023 Association for Computational Linguistics\\nMitigating Label Biases for In-context Learning\\nYu Fei\\u20201, Yifan Hou\\u22172, Zeming Chen\\u22173, Antoine Bosselut3\\n1UC Irvine, 2ETH Zurich, 3NLP Lab, IC, EPFL, Switzerland\\nyu.fei@uci.edu, yifan.hou@inf.ethz.ch,\\n{zeming.chen, antoine.bosselut}@epfl.ch\\nAbstract\\nVarious design settings for in-context learning\"}\n\nIn total, 5 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The top results from the vectorstore include chunks from the paper with `pdf_id` '15f6962b-d927-5d71-b01e-f0664e09eeb5'. These chunks mention the categories of label biases: vanilla-label bias, context-label bias, and domain-label bias. I will retrieve the specific definitions of these categories from the paper.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT text_content FROM chunks WHERE ref_paper_id = '15f6962b-d927-5d71-b01e-f0664e09eeb5' AND text_content LIKE '%vanilla-label bias%' OR text_content LIKE '%context-label bias%' OR text_content LIKE '%domain-label bias%'\")"}
{"role": "user", "content": "[Observation]:\n{\"text_content\":\"(ICL), such as the choice and order of the in-\\ncontext examples, can bias the model\\u2019s predic-\\ntions. While many studies discuss these design\\nchoices, there have been few systematic inves-\\ntigations into categorizing them and mitigating\\ntheir impact. In this work, we define a typol-\\nogy for three types of label biases in ICL for\\ntext classification: vanilla-label bias, context-\\nlabel bias, and domain-label bias (which we\\nconceptualize and detect for the first time).\"}\n{\"text_content\":\"ing predictions, our novel domain-context cali-\\nbration significantly improves the ICL perfor-\\nmance of GPT-J and GPT-3 on a wide range\\nof tasks. The gain is substantial on tasks with\\nlarge domain-label bias (up to 37% in Macro-\\nF1). Furthermore, our results generalize to\\nmodels with different scales, pretraining meth-\\nods, and manually-designed task instructions,\\nshowing the prevalence of label biases in ICL.\\n1\\nIntroduction\\nLarge language models (LLMs) can perform un-\"}\n{\"text_content\":\"seen tasks by conditioning on a context prompt\\nthat consists of a few training example-label pairs\\n(Brown et al., 2020). However, such in-context\\nlearning ability is highly sensitive to various design\\nsettings, such as the choice (Liu et al., 2021) and\\norder (Lu et al., 2021) of the in-context samples.\\n*Equal contribution.\\n\\u2020Work done while interning at EPFL.\\nFigure 1: An illustration of domain-label bias.\\n(a)\\nOn Tweet hate, seeing random in-domain (i.d.) words\"}\n{\"text_content\":\"the sensitivity of the results in ICL studies calls\\nfor a systematic discussion of biases in ICL and\\nnew methods to properly categorize, detect, and\\ncomprehensively mitigate various types of biases.\\nIn this work, we conduct a thorough investiga-\\ntion of biases in ICL for text classification. We start\\nby defining a typology of three types of label biases\\n(the model\\u2019s undesirable preference toward certain\\nlabel names): vanilla label bias, context-label bias,\\nand domain-label bias. What we term vanilla label\"}\n{\"text_content\":\"bias captures the model\\u2019s non-contextualized pref-\\nerence for the label names (e.g., the common token\\nbias mentioned by Zhao et al. (2021) caused by dif-\\nferent frequencies of label names in the pretraining\\ncorpus). Context-label bias summarizes the effects\\nof the context prompt (e.g., LLMs tend to prefer the\\nmajority and last label of the in-context examples).\\nFinally, domain-label bias captures the effects of\\nthe task corpus on the model\\u2019s predictions.\\nWe show that domain-label biases significantly\"}\n{\"text_content\":\"on a hate detection task with two nearly balanced\\nclasses, simply seeing random words sampled from\\nthe dataset severely biases the model towards pre-\\ndicting the label hate (Fig. 1(a)), while seeing\\nrandom English words does not show such an ef-\\nfect. More importantly, on many tasks with large\\ndomain-label bias, LLMs achieve no better than\\nrandom performance, regardless of the choice of\\nin-context examples (Fig. 2). Moreover, we find\\nthat existing bias mitigation methods, such as Con-\"}\n{\"text_content\":\"(Mishra et al., 2021; Holtzman et al., 2021).\\nDomain-label bias\\ncaptures the effect of the task\\ncorpus. Beyond the text-label association demon-\\nstrated in the in-context examples, the model also\\nrelies on its prior knowledge of the task when mak-\\ning predictions. We show that the association of\\nwords to the label names learned from pre-training\\nis a potential pitfall and discuss domain-label bias\\nin more detail in the next section.\\n3\\nDomain Label Bias\\nTo illustrate how the domain of a task can induce\"}\n{\"text_content\":\"domain-context calibration (DC) handles all of them.\\nfrom the dataset, the label priors shift dramatically,\\nbecoming 0.95 (hate) v.s. 0.05 (neutral).\\nMotivated by this experiment, we quantify the\\ndomain-label bias of a model for a particular task\\nusing the distance of the model\\u2019s priors estimated\\nusing random English words and in-domain words.\\nTo make the measure more comparable on tasks\\nwith different numbers of classes, we define the\\nfollowing metric:\\nbias = 1\\n2\\nX\\ny\\u2208L\\n\\f\\n\\f\\n\\fPM(y|xEng.) \\u2212PM(y|xi.d.)\"}\n{\"text_content\":\", (1)\\nwhere xEng. and xi.d. correspond to L random En-\\nglish or random in-domain words and L is the av-\\nerage text length of the dataset.\\nWe find that datasets1 exhibit different levels of\\ndomain-label bias (see Fig. 17 in App. A). More\\nimportantly, LLMs behave distinctively on datasets\\nwith small and large domain-label bias. As shown\\nin Fig. 5, while GPT-J performs competitively on\\ndatasets with small domain-label bias, it rarely\\noutperforms the random baselines on large-bias\"}\n{\"text_content\":\"datasets, indicating that domain-label bias signifi-\\ncantly affects ICL. Contextual calibration, which\\nonly considers vanilla-label bias and context-label\\nbias, fails to handle domain-label bias.\\n4\\nDomain-context Calibration\\nIn this section, we propose Domain-context Cal-\\nibration (DC), which mitigates the effects of the\\nmultiple label biases of our typology (\\u00a7 2.1). Fol-\\nlowing contextual calibration (CC; Zhao et al.,\\n2021), we estimate the overall label bias of a model\"}\n\n... # only display 10 rows in JSON format, more are truncated due to length constraint based on max_rows (10)"}
{"role": "assistant", "content": "[Thought]: The retrieved chunks from the database provide detailed definitions of the categories of label biases. I will extract and format the definitions to generate the final answer.\n[Action]:\nGenerateAnswer(answer=['vanilla-label bias: captures the modelâ€™s non-contextualized preference for the label names (e.g., the common token bias caused by different frequencies of label names in the pretraining corpus).', 'context-label bias: summarizes the effects of the context prompt (e.g., LLMs tend to prefer the majority and last label of the in-context examples).', 'domain-label bias: captures the effects of the task corpus on the modelâ€™s predictions. Beyond the text-label association demonstrated in the in-context examples, the model also relies on its prior knowledge of the task when making predictions.'])"}
{"role": "user", "content": "[Observation]: ['vanilla-label bias: captures the modelâ€™s non-contextualized preference for the label names (e.g., the common token bias caused by different frequencies of label names in the pretraining corpus).', 'context-label bias: summarizes the effects of the context prompt (e.g., LLMs tend to prefer the majority and last label of the in-context examples).', 'domain-label bias: captures the effects of the task corpus on the modelâ€™s predictions. Beyond the text-label association demonstrated in the in-context examples, the model also relies on its prior knowledge of the task when making predictions.']"}
