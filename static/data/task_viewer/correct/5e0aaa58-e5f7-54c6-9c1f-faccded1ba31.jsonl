{"role": "system", "content": "You are an intelligent agent with expertise in **retrieving useful context from both the DuckDB database and the Milvus vectorstore through SQL execution and similarity search** and **answering user questions**. You will be given a natural language question concerning PDF files, along with the schema of both the database and the vectorstore. Your ultimate goal is to answer the input question with pre-defined answer format. The DuckDB database contains all parsed content of raw PDF files, while the Milvus vectorstore encodes specific column cells from the database as vectors. You can predict executable actions, interact with the hybrid environment (including database and vectorstore) across multiple turns, and retrieve necessary context until you are confident in resolving the question.\n\n--------\n\n## Task Description\nEach task consists of the following parts:\n\n[Question]: User question regarding the PDF, e.g., Is there any ...?\n[Answer Format]: it describes the format of the final answer, e.g., the answer is \"Yes\" or \"No\" without punctuation.\n[Anchor PDF]: Optional, a python str or list, the PDF(s) you must use to answer the question.\n[Reference PDF]: Optional, a python str or list, the PDF(s) you may use to answer the question.\n[Conference]: Optional, a python str or list, the conference(s) and year(s) of the relevant papers for retrieval.\n[Database Schema]: A detailed serialized schema of the DuckDB database for reference when generating SQL queries. It includes 1) tables, 2) columns and their data types, 3) descriptions for these schema items, and 4) primary key and foreign key constraints.\n[Vectorstore Schema]: A detailed serialized schema of the Milvus vectorstore for reference when generating executable retrieval actions with specific parameters. It includes 1) collections, 2) fields, 3) encodable (table, column) pairs in the relational database where the vectorized content originates, and 4) grammar for valid filter rules.\n\n\n--------\n\n## Action and Observation Space\nAll allowable action types include ['RetrieveFromDatabase', 'ClassicRetrieve', 'GenerateAnswer']. Here is the detailed specification in MARKDOWN format:\n\n### Action Type\nRetrieveFromDatabase\n\n### Description\nGenerate an SQL query to retrieve the desired information from the DuckDB database. Please refer to the concrete database schema to produce a valid and executable SQL.\n\n### Observation\nThe observation space is the execution result of the SQL query. You do not need to worry about the actual execution, we will perform it for you. If the SQL failed to execute, we will return the error message. Extremely long SQL output will be truncated.\n\n### Syntax and Parameters (MARKDOWN Format)\nRetrieveFromDatabase(sql: str)\n- sql: str, required. The concrete DuckDB SQL query to execute and retrieve results.\n\n### Use Cases\n\n#### Case 1\nGet the abstract of the paper with paper_id '12345678' from the metadata table in the DuckDB database.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT abstract FROM metadata WHERE paper_id = '12345678';\")\n\n\n#### Case 2\nFind which page in the paper with paper_id '12345678' contains Figure 3.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT pages.page_number FROM images JOIN pages JOIN metadata ON images.ref_page_id = pages.page_id AND pages.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '12345678' AND images.image_caption LIKE '%Figure 3%';\")\n\n\n----\n\n### Action Type\nClassicRetrieve\n\n### Description\nGiven a query text, retrieve relevant context from the Milvus vectorstore.\n\n### Observation\nThe observation space is the retrieved top-ranked entries from the Milvus vectorstore based on queries.\n\n### Syntax and Parameters (MARKDOWN Format)\nClassicRetrieve(query: str, limit: int = 5)\n- query: str, required. The query text will be encoded and used to search for relevant context. You can rephrase the original user question to obtain a more clear and structured query requirement.\n- limit: int, optional, default to 5. The number of top-ranked context to retrieve. Please set it to a positive integer to limit the number of returned results. Extremely large limit values may be truncated.\n\n### Use Cases\n\n#### Case 1\nRetrieve top 5 pieces about a certain topic.\n\n[Action]: ClassicRetrieve(query='Is there any work about the topic structured RAG?')\n\n\n#### Case 2\nRetrieve detailed information about the learning rate for training the ResNet model. The top 4 most relevant entries will be returned based on the query.\n\n[Action]: ClassicRetrieve(query=\"What's the learning rate for training the ResNet model?\", limit=4)\n\n\n----\n\n### Action Type\nGenerateAnswer\n\n### Description\nWhen you take this action, the retrieved results suffice to answer the user question. PLEASE STRICTLY ADHERE TO THE ANSWER FORMAT FOR THE CURRENT QUESTION.\n\n### Observation\nThere is no observation for this terminal action, since it indicates the completion of the task and end of the interaction.\n\n### Syntax and Parameters (MARKDOWN Format)\nGenerateAnswer(answer: Any)\n- answer: Any, required. The final answer to the user question. Please adhere to the answer format for the current question.\n\n### Use Cases\n\n#### Case 1\nThe answer to the user question is 42.\n\n[Action]: GenerateAnswer(answer=42)\n\n\n#### Case 2\nThe answer to the user question is a list of strings: ['Results', 'Discussion'].\n\n[Action]: GenerateAnswer(answer=['Results', 'Discussion'])\n\n\n\n--------\n\n## Interaction Framework\n\nThe main interaction procedure proceeds like this:\n\n----\n\n[Thought]: ... reasoning process, why to take this action ...\n[Action]: ... which action to take, please strictly conform to the action specification ...\n[Observation]: ... execution results or error message after taking the action ...\n\n... # more interleaved triplets of ([Thought], [Action], [Observation])\n\n[Thought]: ... reasoning process to produce the final answer ...\n[Action]: ... the terminate action `GenerateAnswer`, there is no further observation ...\n\n----\n\nIn general, the main interaction loop consists of an interleaved of triplets ([Thought], [Action], [Observation]), except the last `GenerateAnswer` action which does not have \"[Observation]:\". You need to predict the \"[Thought]: ...\" followed by the \"[Action]: ...\" for each turn, and we will execute your action in the environment and provide the \"[Observation]: ...\" for the previous action.\n\n--------\n\n## Suggestions or Hints for Agent Interaction\n\n1. Explore multiple retrieval strategies. For example:\n- Experiment with different (table, column) pairs to extract diverse types of information.\n- Query various embedding models (collections) to find the most relevant context.\n\n2. Combine both structured and unstructured data. Concretely:\n- Use SQL queries to retrieve precise facts and structured data. Pay special attention to morphological variations in cell values.\n- Perform similarity searches in the vectorstore to capture semantic relationships and hidden insights.\n\n3. Iterate and refine:\n- If SQL execution result is not satisfactory, try alternative SQL queries to explore the database content carefully.\n- If the vector-based neural retrieval is insufficient, try alternative approaches or parameter settings.\n- Use your findings to validate or enrich the final response.\n\n4. Ensure confidence. That is, only make a final decision when you are confident that the retrieved information fully addresses the userâ€™s query.\n\n\nRemember that, for each question, you only have 20 interaction turns at most. Now, let's start!\n"}
{"role": "user", "content": "[Question]: In the agent \"MO-DDN\" (Multi-object Demand-driven Navigation), what is the basic success rate for a specific demand instruction DI?\n[Answer Format]: Your answer should be a formula string in latex format.\n[Conference]: neurips2024\n[Database Schema]: The database schema for /home/htc981/workspace/project/HNS-RAG/data/database/ai_research/ai_research.sql is as follows:\n/* database ai_research: This database contains information about AI research papers. Each PDF file is represented or parsed via different views, e.g., pages, sections, figures, tables, and references. We also extract the concrete content inside each concrete element via OCR.\n*/\n/* table metadata: This table stores metadata about each paper, including the number of pages, paper path and paper id.\n*/\nCREATE TABLE IF NOT EXISTS metadata (\n\tpaper_id UUID, -- A unique identifier for this paper.\n\ttitle VARCHAR, -- The title of this paper.\n\tabstract VARCHAR, -- The abstract of this paper.\n\tnum_pages INTEGER, -- The number of pages in this paper.\n\tconference_full VARCHAR, -- The full name of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tconference_abbreviation VARCHAR, -- The abbreviation of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tpub_year INTEGER, -- The year when this paper was published.\n\tvolume VARCHAR, -- The volume of the conference where this paper was published. e.g. findings.\n\tdownload_url VARCHAR, -- The url from which the paper can be downloaded.\n\tbibtex VARCHAR, -- The bibtex of this paper.\n\tauthors VARCHAR[], -- The full names of authors of this paper.\n\tpdf_path VARCHAR, -- The path to the PDF file of this paper.\n\ttldr VARCHAR, -- A brief summary of the paper's main idea or findings generated by LLM based on title and abstract.\n\ttags VARCHAR[], -- Keywords representing the paper's topics, methods, or applications generated by LLM based on title and abstract.,\n\tPRIMARY KEY (paper_id)\n);\n/* table pages: This table stores information of the pages in the papers, including their content, size and their order within the paper. The pagesare extracted using PyMuPDF.\n*/\nCREATE TABLE IF NOT EXISTS pages (\n\tpage_id UUID, -- A unique identifier for each page.\n\tpage_number INTEGER, -- The page number in the current paper, starting from 1.\n\tpage_width INTEGER, -- The pixel width of the current page.\n\tpage_height INTEGER, -- The pixel height of the current page.\n\tpage_content VARCHAR, -- The content of the page.\n\tpage_summary VARCHAR, -- A brief summary of the page content, generated by LLM, focusing on key information and describing the page content.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (page_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table images: This table stores the information about images in each paper. The images are extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS images (\n\timage_id UUID, -- The unique identifier of the image.\n\timage_caption VARCHAR, -- The caption of this image, \"\" if it doesn't have one.\n\timage_summary VARCHAR, -- A brief summary of the image, generated by LLM, focusing on key information and describing the image.\n\tbounding_box INTEGER[4], -- The bounding box of the figure in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height which are used to determine the shape of the rectangle.\n\tordinal INTEGER, -- Each figure is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (image_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table chunks: This table contains the information of each chunk of text (chunk size = 512 tokens with no overlapping) in each page of the paper. A chunk is a sub-text that is extracted from the main text using langchain, such as a sentence or a paragraph.\n*/\nCREATE TABLE IF NOT EXISTS chunks (\n\tchunk_id UUID, -- A unique identifier for each chunk of text.\n\ttext_content VARCHAR, -- The text content of the current chunk.\n\tordinal INTEGER, -- Each chunk is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (chunk_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table tables: This table stores information about tables extracted from pages using MinerU, including content (in html format), bounding box and summary of each table generated by LLM.\n*/\nCREATE TABLE IF NOT EXISTS tables (\n\ttable_id UUID, -- A unique identifier for each table.\n\ttable_caption VARCHAR, -- Caption of the table, showing key information of the table.\n\ttable_content VARCHAR, -- The content of the table in html format.\n\ttable_summary VARCHAR, -- A brief summary of the table content generated by LLM, focusing on key information and describing the table content.\n\tbounding_box INTEGER[4], -- The bounding box of the table in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height.\n\tordinal INTEGER, -- Each table is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this table is located.,\n\tPRIMARY KEY (table_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table sections: This table contains the text content of each section in the paper, e.g. `Introduction`, `Experiment`, `Conclusion`, `Reference`. The sections are extracted using PyMuPDF or MinerU.\n*/\nCREATE TABLE IF NOT EXISTS sections (\n\tsection_id UUID, -- A unique identifier for each section of text.\n\tsection_title VARCHAR, -- The title of the current section.\n\tsection_content VARCHAR, -- The text content of the current section.\n\tsection_summary VARCHAR, -- A brief summary of the section content generated by LLM, focusing on key information and describing the section content.\n\tordinal INTEGER, -- Each section is labeled with one distinct integer number in the paper, which starts from 0.\n\tpage_numbers INTEGER[], -- A list of page numbers where current section is located in the relevant paper.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (section_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table equations: This table stores information about equations extracted from pages using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS equations (\n\tequation_id UUID, -- A unique identifier for each equation.\n\tequation_content VARCHAR, -- Content of the equation in latex format.\n\tordinal INTEGER, -- Each equation is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the paper ID in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the page ID in the `pages` table where this equation is located.,\n\tPRIMARY KEY (equation_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table reference: This table stores information about references extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS reference (\n\treference_id UUID, -- A unique identifier for each reference.\n\treference_content VARCHAR, -- Content of the reference.\n\tordinal INTEGER, -- Each reference is labeled with one distinct integer number according to its order in the paper, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this reference is located.,\n\tPRIMARY KEY (reference_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n[Vectorstore Schema]: The vectorstore schema for ai_research is as follows. You can try collections with different encoding models or modalities:\n[\n    {\n        \"collection_name\": \"text_bm25_en\",\n        \"modality\": \"text\",\n        \"embed_type\": \"bm25\",\n        \"embed_model\": \"en\",\n        \"description\": \"This collection is used to store the sparse embeddings generated by the BM25 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric inner-product (IP).\",\n        \"fields\": [\n            {\n                \"name\": \"id\",\n                \"dtype\": \"INT64\",\n                \"is_primary\": true,\n                \"description\": \"The unique id for each encoded text vector in this collection.\"\n            },\n            {\n                \"name\": \"vector\",\n                \"dtype\": \"SPARSE_FLOAT_VECTOR\",\n                \"description\": \"The encoded sparse vector of the text content generated by the BM25 model. Note that, the raw text content can be uniquely identified by the triplet fields below: `table_name`, `column_name`, `primary_key`.\"\n            },\n            {\n                \"name\": \"pdf_id\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The unique id of the PDF file stored in the relational database that the encoded text belongs to. This field can be used to quickly filter the search space.\"\n            },\n            {\n                \"name\": \"page_number\",\n                \"dtype\": \"INT16\",\n                \"description\": \"The page number in the PDF file that the encoded text belongs to (starting from 1). This field can be used to quickly filter the search space. Value -1 means unknown.\"\n            },\n            {\n                \"name\": \"table_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which table in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"column_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which column under `table_name` in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"primary_key\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The primary key value of `table_name` (or which row) in the relational database that the text content belongs to. Note that, the triplet (`table_name`, `column_name`, `primary_key`) can be used to construct a one-to-one mapping between the `text` field in the current vectorstore and the cell entry in the relational database.\"\n            }\n        ]\n    },\n    {\n        \"collection_name\": \"text_sentence_transformers_all_minilm_l6_v2\",\n        \"modality\": \"text\",\n        \"embed_type\": \"sentence_transformers\",\n        \"embed_model\": \"all-MiniLM-L6-v2\",\n        \"description\": \"This collection is used to store the embeddings generated by the all-MiniLM-L6-v2 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric COSINE.\",\n        \"fields\": \"The fields of this collection are similar to the `text_bm25_en` collection.\"\n    }\n]\n\nThe following lists all encodable (table_name, column_name, encode_modality) information from the corresponding DuckDB database, where the encoded vector entries are sourced. Note that, for text modality, we directly encode cell values from the `table_name.column_name`; for image modality, we encode the cropped images for `page_number` in `pdf_id` with bounding boxes from `table_name.column_name`. You can leverage them for filter condition during similarity search:\n[\n    [\n        \"metadata\",\n        \"title\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"abstract\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"bibtex\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"tldr\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_content\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_summary\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_caption\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_summary\",\n        \"text\"\n    ],\n    [\n        \"chunks\",\n        \"text_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_caption\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_summary\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_title\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_content\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_summary\",\n        \"text\"\n    ],\n    [\n        \"equations\",\n        \"equation_content\",\n        \"text\"\n    ],\n    [\n        \"reference\",\n        \"reference_content\",\n        \"text\"\n    ]\n]\n\nHere are the operators that you can use in the filtering condition for the vectorstore:\n{\n    \"operators\": {\n        \"logical\": [\n            {\n                \"symbol\": \"not\",\n                \"example\": \"not expr\",\n                \"description\": \"True if expr is false.\"\n            },\n            {\n                \"symbol\": \"and\",\n                \"example\": \"expr1 and expr2\",\n                \"description\": \"True if both expr1 and expr2 are true.\"\n            },\n            {\n                \"symbol\": \"or\",\n                \"example\": \"expr1 or expr2\",\n                \"description\": \"True if either expr1 or expr2 are true.\"\n            }\n        ],\n        \"binary arithmetic\": [\n            {\n                \"symbol\": \"+\",\n                \"example\": \"a + b\",\n                \"description\": \"Add the two operands.\"\n            },\n            {\n                \"symbol\": \"-\",\n                \"example\": \"a - b\",\n                \"description\": \"Subtract the second operand from the first operand.\"\n            },\n            {\n                \"symbol\": \"*\",\n                \"example\": \"a * b\",\n                \"description\": \"Multiply the two operands.\"\n            },\n            {\n                \"symbol\": \"/\",\n                \"example\": \"a / b\",\n                \"description\": \"Divide the first operand by the second operand.\"\n            },\n            {\n                \"symbol\": \"**\",\n                \"example\": \"a ** b\",\n                \"description\": \"Raise the first operand to the power of the second operand.\"\n            },\n            {\n                \"symbol\": \"%\",\n                \"example\": \"a % b\",\n                \"description\": \"Divide the first operand by the second operand and yield the remainder portion.\"\n            }\n        ],\n        \"relational\": [\n            {\n                \"symbol\": \"<\",\n                \"example\": \"a < b\",\n                \"description\": \"True if a is less than b.\"\n            },\n            {\n                \"symbol\": \">\",\n                \"example\": \"a > b\",\n                \"description\": \"True if a is greater than b.\"\n            },\n            {\n                \"symbol\": \"==\",\n                \"example\": \"a == b\",\n                \"description\": \"True if a is equal to b. Please use **two** equal signs for equality comparison.\"\n            },\n            {\n                \"symbol\": \"!=\",\n                \"example\": \"a != b\",\n                \"description\": \"True if a is not equal to b.\"\n            },\n            {\n                \"symbol\": \"<=\",\n                \"example\": \"a <= b\",\n                \"description\": \"True if a is less than or equal to b.\"\n            },\n            {\n                \"symbol\": \">=\",\n                \"example\": \"a >= b\",\n                \"description\": \"True if a is greater than or equal to b.\"\n            },\n            {\n                \"symbol\": \"in\",\n                \"example\": \"a in [b, c, ...]\",\n                \"description\": \"True if a is equal to any of the values in the list.\"\n            }\n        ],\n        \"array operations\": [\n            {\n                \"symbol\": \"[]\",\n                \"example\": \"bbox[0]\",\n                \"description\": \"This expression gets the first element in array bbox. For example, 'bbox[0] < 50' evaluates to true if the value of bbox[0] is less than 50.\"\n            },\n            {\n                \"symbol\": \"array_contains\",\n                \"example\": \"array_contains(bbox, 100)\",\n                \"description\": \"This expression evaluates to true if array bbox contains element 100.\"\n            },\n            {\n                \"symbol\": \"array_length\",\n                \"example\": \"array_length(int_array) == 4\",\n                \"description\": \"This expression evaluates to true if int_array contains exactly 4 elements.\"\n            }\n        ]\n    },\n    \"use cases\": [\n        {\n            \"example\": \"table_name == 'chunks' and column_name == 'text_content'\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and column_name equal to 'text_content'.\"\n        },\n        {\n            \"example\": \"table_name == 'chunks' and primary_key in ['123', '456', '789']\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and primary_key equal to any of the values in the list ['123', '456', '789'].\"\n        },\n        {\n            \"example\": \"bbox[0] + bbox[2] <= 100 and bbox[1] + bbox[3] <= 300 and pdf_id == '123456' and page_number == 1\",\n            \"description\": \"For image modality, filter results to include only image regions that are entirely within the upper-left quadrant of page 1 in the PDF with ID '123456', assuming the page dimensions are 200 (width) x 600 (height).\"\n        }\n    ]\n}"}
{"role": "assistant", "content": "[Thought]: To find the basic success rate for a specific demand instruction DI in the agent \"MO-DDN\", I need to first identify the relevant paper and then extract the information about the success rate. I will start by retrieving the paper ID for the paper titled \"MO-DDN\" from the metadata table.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT paper_id FROM metadata WHERE title = 'MO-DDN' AND conference_abbreviation = 'NeurIPS' AND pub_year = 2024;\")"}
{"role": "user", "content": "[Observation]: [Warning]: The SQL execution result is empty, please check the SQL first."}
{"role": "assistant", "content": "[Thought]: The SQL query did not return any results, which suggests that the paper title, conference, or year might not be exact. I will try a more flexible query to find the paper ID by searching for the paper title \"MO-DDN\" and the conference \"NeurIPS\" without specifying the year.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT paper_id FROM metadata WHERE title LIKE '%MO-DDN%' AND conference_abbreviation = 'NeurIPS';\")"}
{"role": "user", "content": "[Observation]:\n{\"paper_id\":\"a5033bfe-a076-50b9-90e2-c6cdf45a33cd\"}\n\nIn total, 1 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: I have successfully retrieved the paper ID for the paper titled \"MO-DDN\" from the metadata table. Next, I will search the sections and chunks tables to find the specific information about the success rate for a specific demand instruction DI.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_content FROM sections WHERE ref_paper_id = 'a5033bfe-a076-50b9-90e2-c6cdf45a33cd' AND section_content LIKE '%success rate%';\")"}
{"role": "user", "content": "[Observation]:\n{\"section_content\":\"Related Work\\n2.1\\nVisual Navigation\\nGoal Description\\nIn general terms, visual navigation involves the continuous generation of ac-\\ntions based on RGB-D and GPS+Compass inputs until a specified objective is reached [60]. Visual\\nnavigation tasks vary in their goal description, such as step-by-step instructions in Vision-Language\\nNavigation (VLN) [61\\u201368], audio in Audio-visual Navigation [69\\u201374], object categories in Object-\\nGoal Navigation (ON) [15\\u201321], object category lists in MultiObject Navigation (MON) [43, 23\\u201325],\\nand demand instructions in Demand-driven Navigation (DDN) [14]. Our proposed benchmark,\\nMO-DDN, can be viewed as a multi-object version of DDN. Although, like DDN, MO-DDN\\u2019s inputs\\nare demand instructions, MO-DDN\\u2019s solutions are multi-object rather than single-object, as in DDN.\\nPrevious Method Overview\\nIn ON, with the rise of object detection models [31, 30, 75, 76], object\\nsegmentation models [77\\u201380], and large language models, modular methods [43, 44, 17, 45\\u201350]\\nare gradually being developed. They greatly improve navigation efficiency and success rate by\\nbuilding semantic maps and navigable maps and then planning paths on the maps. Meanwhile, end-\\nto-end methods [19, 51\\u201358] focus more on learning associations in object-object and object-scene to\\nhelp reason about the potential location of target objects. In MON, previous work has focused on\\n3\\nstudying how to quickly construct [25], memorize [24, 43], and use semantic maps [81] or implicit\\nrepresentations [23] of scenes. In DDN, the concept of attributes is introduced as a way of expressing\\nwhat an object shows when it fulfills a demand, e.g., quenching thirst is an attribute of water in the\\ncontext of demand \\u201cI am thirsty\\u201d. In this paper, we extend the concept of attributes and propose a\\nnew method to train the attribute model. We combine the advantages of modular and end-to-end\\nmethods and propose a coarse-to-fine attribute-based exploration modular agent.\\n2.2\\nFoundation Large Model in Embodied Task\\nFoundation Large Models refer to self-supervised pre-trained models trained on large Internet-scale\\ndatasets, which have demonstrated promising capabilities across various embodied tasks. Large\\nlanguage models (LLMs) such as GPT-4 [82], LLaMA [83, 40], and Gemma [84] exhibit performance\\ncomparable to humans in task planning [26\\u201329, 85], common sense reasoning [86] and question\\nanswering [87\\u201390, 34, 91]. Furthermore, researchers use LLMs to synthesize task datasets [14].\\nThe CLIP model [92], which employs contrastive learning with image and text pairs, showcases\\nstrong semantic extraction abilities in navigation [14, 93, 21, 68, 94]. Visual Language Models\\noffer understanding of images such as image descriptions [95\\u201398], object detection [31, 30, 75,\\n76], and object segmentation [77\\u201380] for downstream embodied tasks. This paper uses LLMs,\\nspecifically GPT-4, to generate task instructions, solutions, and attribute examples for attribute\\nlearning. Furthermore, we employ GLEE [31], a state-of-the-art object detection model, to detect\\nobject categories within the field of view for attribute feature extraction.\\n3\"}\n{\"section_content\":\"Multi-object Demand-driven Navigation\\nFollowing the basic settings in DDN, let D denote a set of demand instructions, Se denotes a set\\nof navigable scenes, and O denotes a set of object categories. Let So denote a set of solutions for\\ndemand instructions. An element in So (i.e., a solution) is a subset of O. In each episode, similar\\nto the DDN task, an agent is randomly initialized to a location within a mapless environment and\\nreceives a demand instruction DI \\u2208D in natural language. In this benchmark, a demand instruction\\nconsists of two parts: one is basic demand instruction DIb, and the other is preferred demand\\ninstruction DIp, e.g., \\u201c I need a comfortable place to play computer games, preferably with good\\nlighting.\\u201d Each DI has two sets of solutions, i.e., basic solution Sob and preferred solution Sop\\nfor DIb and DIp, respectively. For example, {desk, soft chair} is an element in Sob for the above\\nexample demand instruction, and {desk, soft chair, table lamp} is an element in Sop.\\nThen, at each time step, the agent should choose an action from MoveAhead, RotateRight,\\nRotateLeft, LookUp, LookDown, Find, and Done. The action Find is similar in MON, which\\nautomatically reports the objects in the field of view. To reduce the difficulty of the MO-DDN task\\nand focus it on navigation, if the agent chooses Find, all objects in the field of view with distance\\nbelow the threshold dfind will be recorded in a found list FL, instead of requiring the bounding box\\nof the target object as in DDN. The found list FL is used to calculate the basic and preferred success\\nrate later. When the agent chooses Done, or the number of choices Find reaches a threshold nfind,\\nor the number of steps reaches a threshold nstep, the episode ends and the success rate is calculated.\\nFor a specific demand instruction DI, We calculate the basic success rate as follows:\\nSRb = 1\\nN\\nN\\nX\\ni=1\\nmax\\nsb\\u2208Sob\\nP\\no\\u2208F L 1o\\u2208sb\\nLen(sb)\\n(1)\\nwhere N donates the number of testing episodes, sb donates a basic solution in the solution set of\\nDI, FL donates the found list that the agent reports, o donates an object category. The preferred\\nsuccess rate SRp is calculated similarly. To summarize, the success rate of an episode is the value\\nwith the highest percentage of satisfaction among all solutions. We also calculate the SPL [60]\\ncorresponding to SRb and SRp. We generate 300 tasks, encompassing 358 object categories from\\nthe HSSD dataset [99]. These tasks are referred to as HSSD\\u2019s world-grounding tasks, indicating that\\nobjects in these tasks are in the HSSD dataset. We generate some language-grounding tasks to train\\nthe attribute model afterward. Language-grounding means that the objects in the solutions can be\\neverything that makes sense rather than restricting objects in HSSD. Please see the supplementary\\nmaterial for details about task generation A.1.1, task metrics A.1.2, and task dataset statistics A.1.3.\\n4\\n4\"}\n{\"section_content\":\"Experiment\\n5.1\\nExperimental Settings\\nWe use habitat-sim and habitat-lab as our simulator and HSSD as our scene dataset. We randomly\\nselect 30 tasks as testing tasks and the remaining 270 tasks as training tasks(i.e., unseen task and seen\\ntask in Tab. 5.3, respectively). These training tasks are used to collect trajectories to train the fine\\nexploration module, VTN and ZSON. HSSD splits the scenes into val scenes and train scenes (i.e.,\\nunseen scenes and seen scenes in Tab. 5.3, respectively). In all experimental settings, the judgment\\ndistance of the found list dfind is one meter, and a maximum number of Find nfind is five times,\\nand the maximum step number nstep is 300. A single RTX 4090 is enough to run the experiments.\\nMore experimental settings are available in the supplementary material A.4.\\n8\\nTable 1: Baseline Comparison. Values in parentheses represent standard deviations. * represents the\\nusage of ground truth semantic labels in the RGB image. The bold fonts represent optimal values.\\nMethod\\nSeen Scene\\nSeen Task\\nUnseen Task\\nSRb\\nSRp\\nSPLb\\nSPLp\\nSRb\\nSRp\\nSPLb\\nSPLp\\nRandom\\n4.36 (0.36)\\n3.30 (0.07)\\n4.10 (0.45)\\n2.92 (0.04)\\n3.47 (0.27)\\n2.40 (0.22)\\n3.14 (0.26)\\n2.17 (0.25)\\nVTN\\n7.50 (3.01)\\n4.79 (3.02)\\n4.19 (1.16)\\n2.45 (1.51)\\n5.17 (1.53)\\n4.06 (1.15)\\n3.38 (0.59)\\n3.01 (0.99)\\nZSON\\n6.75 (2.61)\\n3.79 (0.82)\\n4.27 (1.95)\\n2.41 (0.82)\\n4.33 (1.26)\\n3.08 (0.75)\\n3.02 (1.22)\\n2.18 (0.65)\\nDDN\\n8.10 (2.20)\\n6.62 (0.94)\\n5.95 (2.09)\\n4.73 (1.20)\\n6.70 (2.41)\\n4.52 (0.85)\\n4.67 (1.52)\\n3.14 (0.96)\\nMOPA+LLM*\\n18.61 (3.75)\\n13.25 (1.99)\\n3.00 (1.26)\\n2.18 (0.58)\\n14.67 (1.44)\\n10.22 (1.28)\\n2.03 (0.13)\\n1.55 (0.19)\\nFBE+LLM*\\n13.25 (0.35)\\n9.95 (2.3)\\n3.9 (0.71)\\n3.24 (0.96)\\n10.00 (1.80)\\n8.03 (2.23)\\n3.37 (0.54)\\n2.99 (0.73)\\nC2FAgent (MLP branch)\\n18.58 (2.78)\\n12.45 (2.30)\\n6.99 (1.72)\\n5.53 (1.05)\\n13.91 (2.91)\\n8.44 (0.87)\\n4.45 (0.77)\\n3.43 (0.41)\\nC2FAgent (LLM branch)\\n23.82 (3.89)\\n14.28 (3.72)\\n7.94 (1.30)\\n5.80 (1.00)\\n15.93 (1.68)\\n8.65 (0.71)\\n6.21 (1.81)\\n4.60 (1.40)\\nMethod\\nUnseen Scene\\nSeen Task\\nUnseen Task\\nSRb\\nSRp\\nSPLb\\nSPLp\\nSRb\\nSRp\\nSPLb\\nSPLp\\nRandom\\n6.60 (0.67)\\n4.47 (0.47)\\n6.02 (0.71)\\n4.07 (0.44)\\n4.63 (0.52)\\n3.46 (0.40)\\n4.18 (0.50)\\n3.18 (0.42)\\nVTN\\n8.61 (4.25)\\n6.12 (3.84)\\n4.76 (1.96)\\n3.64 (1.86)\\n6.83 (1.04)\\n3.47 (1.55)\\n3.48 (0.15)\\n1.97 (0.56)\\nZSON\\n6.89 (1.50)\\n5.06 (1.71)\\n4.02 (1.19)\\n3.46 (1.92)\\n5.33 (0.76)\\n2.94 (0.51)\\n2.70 (1.02)\\n1.91 (0.57)\\nDDN\\n10.00 (2.50)\\n5.93 (0.86)\\n7.89 (1.93)\\n4.86 (0.52)\\n7.10 (2.95)\\n4.70 (1.81)\\n5.37 (2.46)\\n3.48 (1.45)\\nMOPA+LLM*\\n17.83 (9.41)\\n14.17 (1.93)\\n3.06 (0.53)\\n2.96 (0.31)\\n10.33 (2.08)\\n6.72 (1.92)\\n1.19 (0.23)\\n0.78 (0.24)\\nFBE+LLM*\\n14.00 (4.47)\\n8.03 (2.23)\\n3.13 (0.66)\\n2.99 (0.73)\\n9.67 (1.53)\\n6.86 (1.04)\\n1.78 (0.58)\\n2.12 (0.68)\\nC2FAgent (MLP branch)\\n17.97 (2.87)\\n12.35 (2.49)\\n5.49 (1.23)\\n3.77 (0.70)\\n12.17 (3.71)\\n6.93 (1.63)\\n3.51 (1.05)\\n2.46 (0.59)\\nC2FAgent (LLM branch)\\n23.06 (1.58)\\n15.98 (0.87)\\n6.52 (0.91)\\n5.11 (0.51)\\n15.88 (2.63)\\n9.48 (1.30)\\n6.03 (0.77)\\n4.50 (0.48)\\n5.2\\nBaselines\\nRandom is a method for randomly selecting actions. VTN [15] is an end-to-end closed-vocabulary\\nObjectGoal Navigation method. ZSON [21] is an end-to-end open-vocabulary ObjectGoal Navigation\\nmethod. MOPA+LLM [43] is a modular-based Multi-object Navigation method using LLM to select\\ntarget objects. FBE+LLM [59] is a modular-based Multi-object Navigation method that uses\\nfrontier-based exploration (FBE) and LLM to find objects. DDN [14] is an end-to-end Single-\\nobject Demand-driven Navigation method. For more details about baselines in training and method\\nmodifications, please see supplementary material A.4.2.\\n5.3\\nBaseline Comparison\\nThe experimental results are in Tab. 5.3. Random reflects the difficulty of MO-DDN. The two\\nend-to-end ON methods, VTN and ZSON, perform poorly, only slightly higher than Random. In\\ncomparison, though DDN uses attribute features designed for single object-instruction pairs, DDN\\u2019s\\nattribute features still provide some prior knowledge, outperforming VTN and ZSON. FBE+LLM\\nand MOPA+LLM use different exploration strategies, but both use LLM to select waypoints. Both of\\nthem acquire the ground truth semantic label in the current RGB image when asking LLM whether\\nor not to perform Find5, and they outperform the three end-to-end methods. MOPA+LLM obtains\\nsuboptimal results in many cases, better than FBE+LLM, which may stem from the fact [43] that its\\nexploration strategy is superior to FBE, allowing more objects to be detected.\\nOur method outperforms the baseline in the vast majority of settings. Attribute similarity scores are a\\ngood substitute for LLM for waypoint selection. Compared to MOPA+LLM, which requires 5.15\\nrequests to the LLM per episode on average, C2FAgent (LLM branch) only needs to request the LLM\\nto parse instructions into attributes once at the beginning and achieves better performance. Moreover,\\nC2FAgent (MLP branch) does not need LLM parsing and gets results comparable to MOPA+LLM.\\nWe also find that when no object meets the demand in the current detected object list, each block has\\na low score, approximating a randomly selected block to explore. In contrast, when there exists an\\nobject that meets the demand, the corresponding block has a significantly higher score than the other\\nblocks. This indicates that the attribute model can balance exploration and exploitation on its own.\\n5.4\\nAblation Study\\nIn this section, we would like to discuss the following four questions:\\n\\u2022 Q1: Is selecting waypoints by attribute feature similarity scores better than FBE, LLM and\\nCLIP features\\u2019 similarity scores?\\n5when other actions are performed, the ground truth semantic label will not be provided, and only the\\nGLEE [31] detection will be provided.\\n9\\nTable 2: Ablation on Coarse Exploration (Q1)\\nMethod\\nSRb\\nSRp\\nSPLb\\nSPLp\\nCoarse+Fine (Ours)\\n23.82 (3.89)\\n14.28 (3.72)\\n7.94 (1.30)\\n5.80 (1.00)\\nFBE+Fine\\n14.56 (5.57)\\n11.36 (5.45)\\n4.94 (0.84)\\n3.92 (0.95)\\nLLM+Fine\\n13.69 (4.91)\\n9.47 (2.57)\\n5.12 (0.72)\\n3.32 (0.07)\\nCLIP+Fine\\n12.51 (3.85)\\n7.65 (2.77)\\n4.52 (0.87)\\n3.05 (0.43)\\nTable 3: Ablation on Fine Exploration (Q2)\\nMethod\\nSRb\\nSRp\\nSPLb\\nSPLp\\nCoarse+Fine (Ours)\\n23.82 (3.89)\\n14.28 (3.72)\\n7.94 (1.30)\\n5.80 (1.00)\\nCoarse+ZSON\\n8.74 (5.07)\\n4.21 (2.0)\\n6.72 (4.29)\\n3.45 (2.0)\\nCoarse+VTN\\n16.89 (4.57)\\n10.87 (4.73)\\n5.36 (1.11)\\n3.83 (1.32)\\nCoarse+Random\\n5.82 (1.22)\\n4.63 (0.93)\\n4.04 (2.52)\\n3.27 (2.12)\\nTable 4: Ablation on Attribute Training (Q3)\\nMethod\\nSRb\\nSRp\\nSPLb\\nSPLp\\nOurs\\n23.82 (3.89)\\n14.28 (3.72)\\n7.94 (1.30)\\n5.80 (1.00)\\nOurs w\\/o VQ-VAE\\n18.34 (1.33)\\n11.42 (0.23)\\n5.63 (0.72)\\n4.72 (0.63)\\nOurs w\\/o codebook init\\n17.36 (2.32)\\n12.02 (2.54)\\n5.73 (1.14)\\n4.56 (1.18)\\nTable 5: Ablation on Score Weights (Q4)\\nMethod (C2FAgent)\\nSRb\\nSRp\\nSPLb\\nSPLp\\nrb = 1, rp = 2\\n19.89 (2.00)\\n15.05 (1.58)\\n7.91 (1.32)\\n6.20 (0.64)\\nrb = 1, rp = 1\\n23.82 (3.89)\\n14.28 (3.72)\\n7.94 (1.30)\\n5.80 (1.00)\\nrb = 1, rp = 0\\n25.10 (2.06)\\n12.43 (1.04)\\n9.26 (2.07)\\n5.34 (1.09)\\n\\u2022 Q2: Do attribute features also work in the end-to-end fine exploration modules? How about\\nreplacing the fine exploration module with VTN and ZSON?\\n\\u2022 Q3: Do VQ-VAE losses and codebook initialization contribute to experimental results?\\n\\u2022 Q4: Can adjusting the weights of basic and preferred scores affect agent behavior?\\nIn the ablation study, we report the results in the seen tasks and seen scenes. Ours refers to C2FAgent\\n(LLM branch). The experimental results for all four questions are in Tab. 5.4. For specific experimen-\\ntal setups, please see supplementary materials A.4.3.\\nFor Q1, the experimental results demonstrate that attribute-based coarse exploration outperforms rule-\\nbased FBE, commonsense-based LLM and CLIP-based exploration. For Q2, the experimental results\\nshow that the fine exploration module utilizes the prior in the attribute model well, outperforming\\nthe VTN, which has larger model parameters, and the ZSON, which has been pre-trained on 36M\\ntotal episodes and fine-tuned on the same trajectory dataset with Ours. In addition, we note that\\nCoarse+VTN exceeds VTN, suggesting that the coarse exploration module can steer the agent to\\nthe region where it is more likely to find objects that satisfy the demand. For Q3, we find that\\nthe performance decreases after removing the VQ-VAE Loss or codebook initialization. Since the\\nattribute model itself is trained on language-grounding tasks and thus agnostic to the task being\\nevaluated, we can argue that the VQ-VAE Loss and the initialization contribute to the generalizability\\nof attribute features. For Q4, adjusting the weights of two scores can indeed affect the agent\\u2019s\\nbehavior. By tuning up rp, SRp and SPLp increase, while SRb and SPLb decrease; and vice versa.\\nThis characteristic allows the user to freely decide whether to prioritize the search for the basic or\\npreferred solution in the current situation. For example, when a user who likes Coke is very thirsty,\\nhe can increase rb to allow the agent to satisfy the basic demand with a higher success rate, while in\\nthe general case, rp can be increased to allow the agent to try to satisfy the preferred demand.\\n6\"}\n\n... # only display 3 rows in JSON format, more are truncated due to length constraint based on max_tokens (5000)"}
{"role": "assistant", "content": "[Thought]: The retrieved sections contain the formula for the basic success rate (SRb) of a specific demand instruction DI. I will extract the relevant part and format it as a LaTeX formula.\n[Action]:\nGenerateAnswer(answer='SR_b = \\\\frac{1}{N} \\\\sum_{i=1}^{N} \\\\max_{s_b \\\\in S_{ob}} \\\\frac{\\\\sum_{o \\\\in FL} 1(o \\\\in s_b)}{|s_b|}')"}
{"role": "user", "content": "[Observation]: SR_b = \\frac{1}{N} \\sum_{i=1}^{N} \\max_{s_b \\in S_{ob}} \\frac{\\sum_{o \\in FL} 1(o \\in s_b)}{|s_b|}"}
