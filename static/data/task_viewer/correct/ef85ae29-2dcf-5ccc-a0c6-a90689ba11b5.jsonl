{"role": "system", "content": "You are an intelligent agent with expertise in **retrieving useful context from both the DuckDB database and the Milvus vectorstore through SQL execution and similarity search** and **answering user questions**. You will be given a natural language question concerning PDF files, along with the schema of both the database and the vectorstore. Your ultimate goal is to answer the input question with pre-defined answer format. The DuckDB database contains all parsed content of raw PDF files, while the Milvus vectorstore encodes specific column cells from the database as vectors. You can predict executable actions, interact with the hybrid environment (including database and vectorstore) across multiple turns, and retrieve necessary context until you are confident in resolving the question.\n\n--------\n\n## Task Description\nEach task consists of the following parts:\n\n[Question]: User question regarding the PDF, e.g., Is there any ...?\n[Answer Format]: it describes the format of the final answer, e.g., the answer is \"Yes\" or \"No\" without punctuation.\n[Anchor PDF]: Optional, a python str or list, the PDF(s) you must use to answer the question.\n[Reference PDF]: Optional, a python str or list, the PDF(s) you may use to answer the question.\n[Conference]: Optional, a python str or list, the conference(s) and year(s) of the relevant papers for retrieval.\n[Database Schema]: A detailed serialized schema of the DuckDB database for reference when generating SQL queries. It includes 1) tables, 2) columns and their data types, 3) descriptions for these schema items, and 4) primary key and foreign key constraints.\n[Vectorstore Schema]: A detailed serialized schema of the Milvus vectorstore for reference when generating executable retrieval actions with specific parameters. It includes 1) collections, 2) fields, 3) encodable (table, column) pairs in the relational database where the vectorized content originates, and 4) grammar for valid filter rules.\n\n\n--------\n\n## Action and Observation Space\nAll allowable action types include ['RetrieveFromDatabase', 'ClassicRetrieve', 'GenerateAnswer']. Here is the detailed specification in MARKDOWN format:\n\n### Action Type\nRetrieveFromDatabase\n\n### Description\nGenerate an SQL query to retrieve the desired information from the DuckDB database. Please refer to the concrete database schema to produce a valid and executable SQL.\n\n### Observation\nThe observation space is the execution result of the SQL query. You do not need to worry about the actual execution, we will perform it for you. If the SQL failed to execute, we will return the error message. Extremely long SQL output will be truncated.\n\n### Syntax and Parameters (MARKDOWN Format)\nRetrieveFromDatabase(sql: str)\n- sql: str, required. The concrete DuckDB SQL query to execute and retrieve results.\n\n### Use Cases\n\n#### Case 1\nGet the abstract of the paper with paper_id '12345678' from the metadata table in the DuckDB database.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT abstract FROM metadata WHERE paper_id = '12345678';\")\n\n\n#### Case 2\nFind which page in the paper with paper_id '12345678' contains Figure 3.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT pages.page_number FROM images JOIN pages JOIN metadata ON images.ref_page_id = pages.page_id AND pages.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '12345678' AND images.image_caption LIKE '%Figure 3%';\")\n\n\n----\n\n### Action Type\nClassicRetrieve\n\n### Description\nGiven a query text, retrieve relevant context from the Milvus vectorstore.\n\n### Observation\nThe observation space is the retrieved top-ranked entries from the Milvus vectorstore based on queries.\n\n### Syntax and Parameters (MARKDOWN Format)\nClassicRetrieve(query: str, limit: int = 5)\n- query: str, required. The query text will be encoded and used to search for relevant context. You can rephrase the original user question to obtain a more clear and structured query requirement.\n- limit: int, optional, default to 5. The number of top-ranked context to retrieve. Please set it to a positive integer to limit the number of returned results. Extremely large limit values may be truncated.\n\n### Use Cases\n\n#### Case 1\nRetrieve top 5 pieces about a certain topic.\n\n[Action]: ClassicRetrieve(query='Is there any work about the topic structured RAG?')\n\n\n#### Case 2\nRetrieve detailed information about the learning rate for training the ResNet model. The top 4 most relevant entries will be returned based on the query.\n\n[Action]: ClassicRetrieve(query=\"What's the learning rate for training the ResNet model?\", limit=4)\n\n\n----\n\n### Action Type\nGenerateAnswer\n\n### Description\nWhen you take this action, the retrieved results suffice to answer the user question. PLEASE STRICTLY ADHERE TO THE ANSWER FORMAT FOR THE CURRENT QUESTION.\n\n### Observation\nThere is no observation for this terminal action, since it indicates the completion of the task and end of the interaction.\n\n### Syntax and Parameters (MARKDOWN Format)\nGenerateAnswer(answer: Any)\n- answer: Any, required. The final answer to the user question. Please adhere to the answer format for the current question.\n\n### Use Cases\n\n#### Case 1\nThe answer to the user question is 42.\n\n[Action]: GenerateAnswer(answer=42)\n\n\n#### Case 2\nThe answer to the user question is a list of strings: ['Results', 'Discussion'].\n\n[Action]: GenerateAnswer(answer=['Results', 'Discussion'])\n\n\n\n--------\n\n## Interaction Framework\n\nThe main interaction procedure proceeds like this:\n\n----\n\n[Thought]: ... reasoning process, why to take this action ...\n[Action]: ... which action to take, please strictly conform to the action specification ...\n[Observation]: ... execution results or error message after taking the action ...\n\n... # more interleaved triplets of ([Thought], [Action], [Observation])\n\n[Thought]: ... reasoning process to produce the final answer ...\n[Action]: ... the terminate action `GenerateAnswer`, there is no further observation ...\n\n----\n\nIn general, the main interaction loop consists of an interleaved of triplets ([Thought], [Action], [Observation]), except the last `GenerateAnswer` action which does not have \"[Observation]:\". You need to predict the \"[Thought]: ...\" followed by the \"[Action]: ...\" for each turn, and we will execute your action in the environment and provide the \"[Observation]: ...\" for the previous action.\n\n--------\n\n## Suggestions or Hints for Agent Interaction\n\n1. Explore multiple retrieval strategies. For example:\n- Experiment with different (table, column) pairs to extract diverse types of information.\n- Query various embedding models (collections) to find the most relevant context.\n\n2. Combine both structured and unstructured data. Concretely:\n- Use SQL queries to retrieve precise facts and structured data. Pay special attention to morphological variations in cell values.\n- Perform similarity searches in the vectorstore to capture semantic relationships and hidden insights.\n\n3. Iterate and refine:\n- If SQL execution result is not satisfactory, try alternative SQL queries to explore the database content carefully.\n- If the vector-based neural retrieval is insufficient, try alternative approaches or parameter settings.\n- Use your findings to validate or enrich the final response.\n\n4. Ensure confidence. That is, only make a final decision when you are confident that the retrieved information fully addresses the userâ€™s query.\n\n\nRemember that, for each question, you only have 20 interaction turns at most. Now, let's start!\n"}
{"role": "user", "content": "[Question]: What are the three types of instruction-following data, and which one has the largest number of samples?\n[Answer Format]: Your answer should be a Python list of 2 elements. The first element is a Python list of 3 elements, containing the names of the three types of instruction-following data. The second element is a string, indicating the name of the type of instruction-following data that has the largest number of samples. e.g. [[\"type1\", \"type2\", \"type3\"], \"type\"].\n[Anchor PDF]: '86922a0e-7874-5f9a-926b-0f886076d6e8'\n[Database Schema]: The database schema for /home/htc981/workspace/project/HNS-RAG/data/database/ai_research/ai_research.sql is as follows:\n/* database ai_research: This database contains information about AI research papers. Each PDF file is represented or parsed via different views, e.g., pages, sections, figures, tables, and references. We also extract the concrete content inside each concrete element via OCR.\n*/\n/* table metadata: This table stores metadata about each paper, including the number of pages, paper path and paper id.\n*/\nCREATE TABLE IF NOT EXISTS metadata (\n\tpaper_id UUID, -- A unique identifier for this paper.\n\ttitle VARCHAR, -- The title of this paper.\n\tabstract VARCHAR, -- The abstract of this paper.\n\tnum_pages INTEGER, -- The number of pages in this paper.\n\tconference_full VARCHAR, -- The full name of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tconference_abbreviation VARCHAR, -- The abbreviation of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tpub_year INTEGER, -- The year when this paper was published.\n\tvolume VARCHAR, -- The volume of the conference where this paper was published. e.g. findings.\n\tdownload_url VARCHAR, -- The url from which the paper can be downloaded.\n\tbibtex VARCHAR, -- The bibtex of this paper.\n\tauthors VARCHAR[], -- The full names of authors of this paper.\n\tpdf_path VARCHAR, -- The path to the PDF file of this paper.\n\ttldr VARCHAR, -- A brief summary of the paper's main idea or findings generated by LLM based on title and abstract.\n\ttags VARCHAR[], -- Keywords representing the paper's topics, methods, or applications generated by LLM based on title and abstract.,\n\tPRIMARY KEY (paper_id)\n);\n/* table pages: This table stores information of the pages in the papers, including their content, size and their order within the paper. The pagesare extracted using PyMuPDF.\n*/\nCREATE TABLE IF NOT EXISTS pages (\n\tpage_id UUID, -- A unique identifier for each page.\n\tpage_number INTEGER, -- The page number in the current paper, starting from 1.\n\tpage_width INTEGER, -- The pixel width of the current page.\n\tpage_height INTEGER, -- The pixel height of the current page.\n\tpage_content VARCHAR, -- The content of the page.\n\tpage_summary VARCHAR, -- A brief summary of the page content, generated by LLM, focusing on key information and describing the page content.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (page_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table images: This table stores the information about images in each paper. The images are extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS images (\n\timage_id UUID, -- The unique identifier of the image.\n\timage_caption VARCHAR, -- The caption of this image, \"\" if it doesn't have one.\n\timage_summary VARCHAR, -- A brief summary of the image, generated by LLM, focusing on key information and describing the image.\n\tbounding_box INTEGER[4], -- The bounding box of the figure in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height which are used to determine the shape of the rectangle.\n\tordinal INTEGER, -- Each figure is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (image_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table chunks: This table contains the information of each chunk of text (chunk size = 512 tokens with no overlapping) in each page of the paper. A chunk is a sub-text that is extracted from the main text using langchain, such as a sentence or a paragraph.\n*/\nCREATE TABLE IF NOT EXISTS chunks (\n\tchunk_id UUID, -- A unique identifier for each chunk of text.\n\ttext_content VARCHAR, -- The text content of the current chunk.\n\tordinal INTEGER, -- Each chunk is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (chunk_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table tables: This table stores information about tables extracted from pages using MinerU, including content (in html format), bounding box and summary of each table generated by LLM.\n*/\nCREATE TABLE IF NOT EXISTS tables (\n\ttable_id UUID, -- A unique identifier for each table.\n\ttable_caption VARCHAR, -- Caption of the table, showing key information of the table.\n\ttable_content VARCHAR, -- The content of the table in html format.\n\ttable_summary VARCHAR, -- A brief summary of the table content generated by LLM, focusing on key information and describing the table content.\n\tbounding_box INTEGER[4], -- The bounding box of the table in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height.\n\tordinal INTEGER, -- Each table is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this table is located.,\n\tPRIMARY KEY (table_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table sections: This table contains the text content of each section in the paper, e.g. `Introduction`, `Experiment`, `Conclusion`, `Reference`. The sections are extracted using PyMuPDF or MinerU.\n*/\nCREATE TABLE IF NOT EXISTS sections (\n\tsection_id UUID, -- A unique identifier for each section of text.\n\tsection_title VARCHAR, -- The title of the current section.\n\tsection_content VARCHAR, -- The text content of the current section.\n\tsection_summary VARCHAR, -- A brief summary of the section content generated by LLM, focusing on key information and describing the section content.\n\tordinal INTEGER, -- Each section is labeled with one distinct integer number in the paper, which starts from 0.\n\tpage_numbers INTEGER[], -- A list of page numbers where current section is located in the relevant paper.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (section_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table equations: This table stores information about equations extracted from pages using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS equations (\n\tequation_id UUID, -- A unique identifier for each equation.\n\tequation_content VARCHAR, -- Content of the equation in latex format.\n\tordinal INTEGER, -- Each equation is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the paper ID in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the page ID in the `pages` table where this equation is located.,\n\tPRIMARY KEY (equation_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table reference: This table stores information about references extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS reference (\n\treference_id UUID, -- A unique identifier for each reference.\n\treference_content VARCHAR, -- Content of the reference.\n\tordinal INTEGER, -- Each reference is labeled with one distinct integer number according to its order in the paper, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this reference is located.,\n\tPRIMARY KEY (reference_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n[Vectorstore Schema]: The vectorstore schema for ai_research is as follows. You can try collections with different encoding models or modalities:\n[\n    {\n        \"collection_name\": \"text_bm25_en\",\n        \"modality\": \"text\",\n        \"embed_type\": \"bm25\",\n        \"embed_model\": \"en\",\n        \"description\": \"This collection is used to store the sparse embeddings generated by the BM25 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric inner-product (IP).\",\n        \"fields\": [\n            {\n                \"name\": \"id\",\n                \"dtype\": \"INT64\",\n                \"is_primary\": true,\n                \"description\": \"The unique id for each encoded text vector in this collection.\"\n            },\n            {\n                \"name\": \"vector\",\n                \"dtype\": \"SPARSE_FLOAT_VECTOR\",\n                \"description\": \"The encoded sparse vector of the text content generated by the BM25 model. Note that, the raw text content can be uniquely identified by the triplet fields below: `table_name`, `column_name`, `primary_key`.\"\n            },\n            {\n                \"name\": \"pdf_id\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The unique id of the PDF file stored in the relational database that the encoded text belongs to. This field can be used to quickly filter the search space.\"\n            },\n            {\n                \"name\": \"page_number\",\n                \"dtype\": \"INT16\",\n                \"description\": \"The page number in the PDF file that the encoded text belongs to (starting from 1). This field can be used to quickly filter the search space. Value -1 means unknown.\"\n            },\n            {\n                \"name\": \"table_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which table in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"column_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which column under `table_name` in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"primary_key\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The primary key value of `table_name` (or which row) in the relational database that the text content belongs to. Note that, the triplet (`table_name`, `column_name`, `primary_key`) can be used to construct a one-to-one mapping between the `text` field in the current vectorstore and the cell entry in the relational database.\"\n            }\n        ]\n    },\n    {\n        \"collection_name\": \"text_sentence_transformers_all_minilm_l6_v2\",\n        \"modality\": \"text\",\n        \"embed_type\": \"sentence_transformers\",\n        \"embed_model\": \"all-MiniLM-L6-v2\",\n        \"description\": \"This collection is used to store the embeddings generated by the all-MiniLM-L6-v2 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric COSINE.\",\n        \"fields\": \"The fields of this collection are similar to the `text_bm25_en` collection.\"\n    }\n]\n\nThe following lists all encodable (table_name, column_name, encode_modality) information from the corresponding DuckDB database, where the encoded vector entries are sourced. Note that, for text modality, we directly encode cell values from the `table_name.column_name`; for image modality, we encode the cropped images for `page_number` in `pdf_id` with bounding boxes from `table_name.column_name`. You can leverage them for filter condition during similarity search:\n[\n    [\n        \"metadata\",\n        \"title\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"abstract\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"bibtex\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"tldr\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_content\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_summary\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_caption\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_summary\",\n        \"text\"\n    ],\n    [\n        \"chunks\",\n        \"text_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_caption\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_summary\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_title\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_content\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_summary\",\n        \"text\"\n    ],\n    [\n        \"equations\",\n        \"equation_content\",\n        \"text\"\n    ],\n    [\n        \"reference\",\n        \"reference_content\",\n        \"text\"\n    ]\n]\n\nHere are the operators that you can use in the filtering condition for the vectorstore:\n{\n    \"operators\": {\n        \"logical\": [\n            {\n                \"symbol\": \"not\",\n                \"example\": \"not expr\",\n                \"description\": \"True if expr is false.\"\n            },\n            {\n                \"symbol\": \"and\",\n                \"example\": \"expr1 and expr2\",\n                \"description\": \"True if both expr1 and expr2 are true.\"\n            },\n            {\n                \"symbol\": \"or\",\n                \"example\": \"expr1 or expr2\",\n                \"description\": \"True if either expr1 or expr2 are true.\"\n            }\n        ],\n        \"binary arithmetic\": [\n            {\n                \"symbol\": \"+\",\n                \"example\": \"a + b\",\n                \"description\": \"Add the two operands.\"\n            },\n            {\n                \"symbol\": \"-\",\n                \"example\": \"a - b\",\n                \"description\": \"Subtract the second operand from the first operand.\"\n            },\n            {\n                \"symbol\": \"*\",\n                \"example\": \"a * b\",\n                \"description\": \"Multiply the two operands.\"\n            },\n            {\n                \"symbol\": \"/\",\n                \"example\": \"a / b\",\n                \"description\": \"Divide the first operand by the second operand.\"\n            },\n            {\n                \"symbol\": \"**\",\n                \"example\": \"a ** b\",\n                \"description\": \"Raise the first operand to the power of the second operand.\"\n            },\n            {\n                \"symbol\": \"%\",\n                \"example\": \"a % b\",\n                \"description\": \"Divide the first operand by the second operand and yield the remainder portion.\"\n            }\n        ],\n        \"relational\": [\n            {\n                \"symbol\": \"<\",\n                \"example\": \"a < b\",\n                \"description\": \"True if a is less than b.\"\n            },\n            {\n                \"symbol\": \">\",\n                \"example\": \"a > b\",\n                \"description\": \"True if a is greater than b.\"\n            },\n            {\n                \"symbol\": \"==\",\n                \"example\": \"a == b\",\n                \"description\": \"True if a is equal to b. Please use **two** equal signs for equality comparison.\"\n            },\n            {\n                \"symbol\": \"!=\",\n                \"example\": \"a != b\",\n                \"description\": \"True if a is not equal to b.\"\n            },\n            {\n                \"symbol\": \"<=\",\n                \"example\": \"a <= b\",\n                \"description\": \"True if a is less than or equal to b.\"\n            },\n            {\n                \"symbol\": \">=\",\n                \"example\": \"a >= b\",\n                \"description\": \"True if a is greater than or equal to b.\"\n            },\n            {\n                \"symbol\": \"in\",\n                \"example\": \"a in [b, c, ...]\",\n                \"description\": \"True if a is equal to any of the values in the list.\"\n            }\n        ],\n        \"array operations\": [\n            {\n                \"symbol\": \"[]\",\n                \"example\": \"bbox[0]\",\n                \"description\": \"This expression gets the first element in array bbox. For example, 'bbox[0] < 50' evaluates to true if the value of bbox[0] is less than 50.\"\n            },\n            {\n                \"symbol\": \"array_contains\",\n                \"example\": \"array_contains(bbox, 100)\",\n                \"description\": \"This expression evaluates to true if array bbox contains element 100.\"\n            },\n            {\n                \"symbol\": \"array_length\",\n                \"example\": \"array_length(int_array) == 4\",\n                \"description\": \"This expression evaluates to true if int_array contains exactly 4 elements.\"\n            }\n        ]\n    },\n    \"use cases\": [\n        {\n            \"example\": \"table_name == 'chunks' and column_name == 'text_content'\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and column_name equal to 'text_content'.\"\n        },\n        {\n            \"example\": \"table_name == 'chunks' and primary_key in ['123', '456', '789']\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and primary_key equal to any of the values in the list ['123', '456', '789'].\"\n        },\n        {\n            \"example\": \"bbox[0] + bbox[2] <= 100 and bbox[1] + bbox[3] <= 300 and pdf_id == '123456' and page_number == 1\",\n            \"description\": \"For image modality, filter results to include only image regions that are entirely within the upper-left quadrant of page 1 in the PDF with ID '123456', assuming the page dimensions are 200 (width) x 600 (height).\"\n        }\n    ]\n}"}
{"role": "assistant", "content": "[Thought]: To answer the question, I need to retrieve the information about the types of instruction-following data and the number of samples for each type. I will start by querying the `sections` table to find the section that contains this information.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_content FROM sections WHERE ref_paper_id = '86922a0e-7874-5f9a-926b-0f886076d6e8' AND section_title LIKE '%Instruction-Following Data%'\")"}
{"role": "user", "content": "[Observation]: [Warning]: The SQL execution result is empty, please check the SQL first."}
{"role": "assistant", "content": "[Thought]: The initial SQL query did not return any results, which suggests that the section title might not be an exact match. I will try a more flexible search by looking for sections that contain the phrase \"instruction-following data\" in their content.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_content FROM sections WHERE ref_paper_id = '86922a0e-7874-5f9a-926b-0f886076d6e8' AND section_content LIKE '%instruction-following data%'\")"}
{"role": "user", "content": "[Observation]:\n{\"section_content\":\"Introduction\\nHumans interact with the world through many channels such as vision and language, as each\\nindividual channel has a unique advantage in representing and communicating certain concepts, and\\nthus facilitates a better understanding of the world. One of the core aspirations in arti\\ufb01cial intelligence\\nis to develop a general-purpose assistant that can effectively follow multi-modal vision-and-language\\ninstructions, aligned with human intent to complete various real-world tasks in the wild [4, 26].\\nTo this end, the community has witnessed an emergent interest in developing language-augmented\\nfoundation vision models [26, 16], with strong capabilities in open-world visual understanding\\nsuch as classi\\ufb01cation [39, 21, 56, 53, 38], detection [28, 61, 32], segmentation [25, 62, 57] and\\ncaptioning [49, 27], as well as visual generation and editing [41, 42, 55, 15, 43, 29]. We refer readers\\nto the Computer Vision in the Wild reading list for a more up-to-date literature compilation [12]. In\\nthis line of work, each task is solved independently by one single large vision model, with the task\\ninstruction implicitly considered in the model design. Further, language is only utilized to describe\\nthe image content. While this allows language to play an important role in mapping visual signals to\\nlanguage semantics\\u2014a common channel for human communication, it leads to models that usually\\nhave a \\ufb01xed interface with limited interactivity and adaptability to the user\\u2019s instructions.\\nLarge language models (LLM), on the other hand, have shown that language can play a wider\\nrole: a universal interface for a general-purpose assistant, where various task instructions can be\\nexplicitly represented in language and guide the end-to-end trained neural assistant to switch to the\\ntask of interest to solve it. For example, the recent success of ChatGPT [34] and GPT-4 [35] have\\ndemonstrated the power of aligned LLMs in following human instructions, and have stimulated\\ntremendous interest in developing open-source LLMs. Among them, LLaMA [48] is an open-\\nsource LLM that matches the performance of GPT-3. Alpaca [47], Vicuna [9], GPT-4-LLM [37]\\n37th Conference on Neural Information Processing Systems (NeurIPS 2023).\\nutilize various machine-generated high-quality instruction-following samples to improve the LLM\\u2019s\\nalignment ability, reporting impressive performance compared with proprietary LLMs. Importantly,\\nthis line of work is text-only.\\nIn this paper, we present visual instruction-tuning, the \\ufb01rst attempt to extend instruction-tuning to\\nthe language-image multimodal space, to pave the way towards building a general-purpose visual\\nassistant. In particular, our paper makes the following contributions:\\n\\u2022 Multimodal instruction-following data. One key challenge is the lack of vision-language\\ninstruction-following data. We present a data reformation perspective and pipeline to convert\\nimage-text pairs into an appropriate instruction-following format, using ChatGPT\\/GPT-4.\\n\\u2022 Large multimodal models. We develop a large multimodal model (LMM), by connecting the\\nopen-set visual encoder of CLIP [39] with the language decoder Vicuna [9], and \\ufb01ne-tuning\\nend-to-end on our generated instructional vision-language data. Our empirical study validates\\nthe effectiveness of using generated data for LMM instruction-tuning, and suggests practical\\ntips for building a general-purpose instruction-following visual agent. When ensembled with\\nGPT-4, our approach achieves SoTA on the Science QA [33] multimodal reasoning dataset.\\n\\u2022 Multimodal instruction-following benchmark. We present LLaVA-Bench with two challenging\\nbenchmarks, with a diverse selection of paired images, instructions and detailed annotations.\\n\\u2022 Open-source. We release the following assets to the public: the generated multimodal instruction\\ndata, the codebase, the model checkpoints, and a visual chat demo.\\n2\"}\n{\"section_content\":\"Related Work\\nMultimodal Instruction-following Agents.\\nIn computer vision, existing works that build\\ninstruction-following agents can be broadly categorized into two classes: (i) End-to-end trained\\nmodels, which are separately explored for each speci\\ufb01c research topic. For example, the vision-\\nlanguage navigation task [3, 19] and Habitat [46] require the embodied AI agent to follow natural\\nlanguage instructions and take a sequence of actions to complete goals in visual environments.\\nIn the image editing domain, given an input image and a written instruction that tells the agent\\nwhat to do, InstructPix2Pix [6] edits images by following the human instructions. (ii) A system\\nthat coordinates various models via LangChain [1] \\/ LLMs [34], such as Visual ChatGPT [52],\\nX-GPT [62], MM-REACT [54], VisProg [18], and ViperGPT [45]. While sharing the same goal in\\nbuilding instruction-following agents, we focus on developing an end-to-end trained language-vision\\nmultimodal model for multiple tasks.\\nInstruction Tuning. In the natural language processing (NLP) community, to enable LLMs such\\nas GPT-3 [7], T5 [40], PaLM [10], and OPT [59] to follow natural language instructions and\\ncomplete real-world tasks, researchers have explored methods for LLM instruction-tuning [36, 51, 50],\\nleading to instruction-tuned counterparts such as InstructGPT [36]\\/ChatGPT [34], FLAN-T5 [11],\\nFLAN-PaLM [11], and OPT-IML [22], respectively. It turns out that this simple approach can\\neffectively improve the zero- and few-shot generalization abilities of LLMs. It is thus natural\\nto borrow the idea from NLP to computer vision. More broadly, the teacher-student distillation\\nideas with foundation models have been studied in other topics such as image classi\\ufb01cation [14].\\nFlamingo [2] can be viewed as the GPT-3 moment in the multimodal domain, due to its strong\\nperformance on zero-shot task transfer and in-context-learning. Other LMMs trained on image-\\ntext pairs include BLIP-2 [27], FROMAGe [24], and KOSMOS-1 [20]. PaLM-E [13] is an LMM\\nfor embodied AI. Based on the recent \\u201cbest\\u201d open-source LLM LLaMA, OpenFlamingo [5] and\\nLLaMA-Adapter [58] are open-source efforts that enable LLaMA to use image inputs, paving the\\nway to build open-source multimodal LLMs. While these models present promising task transfer\\ngeneralization performance, they are not explicitly tuned with vision-language instruction data, and\\ntheir performance in multimodal tasks usually falls short compared to language-only tasks. In this\\npaper, we aim to \\ufb01ll this gap and study its effectiveness. Finally, note that visual instruction tuning\\nis different from visual prompt tuning [23]: the former aims to improve the model\\u2019s instruction-\\nfollowing abilities, while the latter aims to improve the parameter-ef\\ufb01ciency in model adaptation.\\n2\\nContext type 1: Captions\\nA group of people standing outside of a black vehicle with various luggage.\\nLuggage surrounds a vehicle in an underground parking area\\nPeople try to \\ufb01t all of their luggage in an SUV.\\nThe sport utility vehicle is parked in the public garage, being packed for a trip\\nSome people with luggage near a van that is transporting it.\\nContext type 2: Boxes\\nperson: [0.681, 0.242, 0.774, 0.694], backpack: [0.384, 0.696, 0.485, 0.914], suitcase: ...<omitted>\\nResponse type 1: conversation\\nQuestion: What type of vehicle is featured in the image?\\nAnswer: The image features a black sport utility vehicle (SUV) ...<omitted>\\nResponse type 2: detailed description\\nThe image is an underground parking area with a black sport utility vehicle (SUV) parked. There\\nare three people in the scene, with one person standing closer to the left side of the vehicle, another\\nperson in the middle, and the third person on the right side. They are all working together to pack\\ntheir luggage into the SUV for a trip. ...<omitted>\\nResponse type 3: complex reasoning\\nQuestion: What challenges do these people face?\\nAnswer: In the image, a group of people is standing outside a black SUV in a parking area,\\nsurrounded by various pieces of luggage, including suitcases and backpacks. They are facing the\\nchallenge of \\ufb01tting all their luggage into the black SUV. There are multiple suitcases and backpacks\\nto be packed, which suggests that the group has a signi\\ufb01cant amount of belongings ...<omitted>\\nTable 1: One example to illustrate the instruction-following data. The top block shows the contexts\\nsuch as captions and boxes used to prompt GPT, and the bottom block shows the three types of\\nresponses. Note that the visual image is not used to prompt GPT, we only show it here as a reference.\\n3\"}\n{\"section_content\":\"GPT-assisted Visual Instruction Data Generation\\nThe community has witnessed a surge in the amount of public multimodal data such as image-text\\npairs, ranging from CC [8] to LAION [44]. However, when it comes to multimodal instruction-\\nfollowing data, the available amount is limited, partially because the process for creating such data is\\ntime-consuming and less well-de\\ufb01ned when human crowd-scouring is considered. Inspired by the\\nsuccess of recent GPT models in text-annotation tasks [17], we propose to leverage ChatGPT\\/GPT-4\\nfor multimodal instruction-following data collection, based on the widely existing image-pair data.\\nFor an image Xv and its associated caption Xc, it is natural to create a set of questions Xq with the\\nintent to instruct the assistant to describe the image content. We prompt GPT-4 to curate such a list\\nof questions (see details in Appendix). Therefore, a simple way to expand an image-text pair to its\\ninstruction-following version is Human : Xq Xv<STOP> Assistant : Xc<STOP>. Though cheap to\\nconstruct, this simple expanded version lacks diversity and in-depth reasoning in both the instructions\\nand responses.\\nTo mitigate this issue, we leverage language-only GPT-4 or ChatGPT as the strong teacher (both\\naccept only text as input), to create instruction-following data involving visual content. Speci\\ufb01cally,\\nin order to encode an image into its visual features to prompt a text-only GPT, we use two types of\\nsymbolic representations: (i) Captions typically describe the visual scene from various perspectives;\\n(ii) Bounding boxes usually localize the objects in the scene, and each box encodes the object concept\\nand its spatial location. One example is shown in the top block of Table 14.\\nThis symbolic representation allows us to encode the image as an LLM-recognizable sequence. We\\nuse COCO images [30] and generate three types of instruction-following data. One example per type\\nis shown in the bottom block of Table 14. For each type, we \\ufb01rst manually design a few examples.\\nThey are the only human annotations we have during data collection, and are used as seed examples\\nin in-context-learning to query GPT-4.\\n\\u2022 Conversation. We design a conversation between the assistant and a person asking questions\\nabout this photo. The answers are in a tone as if the assistant is seeing the image and answering\\nthe question. A diverse set of questions are asked about the visual content of the image, including\\nthe object types, counting the objects, object actions, object locations, relative positions between\\n3\\nobjects. Only questions that have de\\ufb01nite answers are considered. Please see Appendix for the\\ndetailed prompt.\\n\\u2022 Detailed description. To include a rich and comprehensive description for an image, we create a\\nlist of questions with such an intent. We prompt GPT-4 then curate the list (see detailed prompts\\nand curation process in Appendix). For each image, we randomly sample one question from the\\nlist to ask GPT-4 to generate the detailed description.\\n\\u2022 Complex reasoning. The above two types focus on the visual content itself, based on which\\nwe further create in-depth reasoning questions. The answers typically require a step-by-step\\nreasoning process by following rigorous logic.\\nWe collect 158K unique language-image instruction-following samples in total, including 58K in\\nconversations, 23K in detailed description, and 77k in complex reasoning, respectively. We ablated\\nthe use of ChatGPT and GPT-4 in our early experiments, and found that GPT-4 consistently provides\\nhigher quality instruction-following data, such as spatial reasoning.\\n4\"}\n\n... # only display 3 rows in JSON format, more are truncated due to length constraint based on max_tokens (5000)"}
{"role": "assistant", "content": "[Thought]: The retrieved sections contain the information about the types of instruction-following data and the number of samples for each type. I will extract the relevant information and format it as required.\n[Action]:\nGenerateAnswer(answer=[['Conversation', 'Detailed description', 'Complex reasoning'], 'Complex reasoning'])"}
{"role": "user", "content": "[Observation]: [['Conversation', 'Detailed description', 'Complex reasoning'], 'Complex reasoning']"}
