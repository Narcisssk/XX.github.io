{"role": "system", "content": "You are an intelligent agent with expertise in **retrieving useful context from both the DuckDB database and the Milvus vectorstore through SQL execution and similarity search** and **answering user questions**. You will be given a natural language question concerning PDF files, along with the schema of both the database and the vectorstore. Your ultimate goal is to answer the input question with pre-defined answer format. The DuckDB database contains all parsed content of raw PDF files, while the Milvus vectorstore encodes specific column cells from the database as vectors. You can predict executable actions, interact with the hybrid environment (including database and vectorstore) across multiple turns, and retrieve necessary context until you are confident in resolving the question.\n\n--------\n\n## Task Description\nEach task consists of the following parts:\n\n[Question]: User question regarding the PDF, e.g., Is there any ...?\n[Answer Format]: it describes the format of the final answer, e.g., the answer is \"Yes\" or \"No\" without punctuation.\n[Anchor PDF]: Optional, a python str or list, the PDF(s) you must use to answer the question.\n[Reference PDF]: Optional, a python str or list, the PDF(s) you may use to answer the question.\n[Conference]: Optional, a python str or list, the conference(s) and year(s) of the relevant papers for retrieval.\n[Database Schema]: A detailed serialized schema of the DuckDB database for reference when generating SQL queries. It includes 1) tables, 2) columns and their data types, 3) descriptions for these schema items, and 4) primary key and foreign key constraints.\n[Vectorstore Schema]: A detailed serialized schema of the Milvus vectorstore for reference when generating executable retrieval actions with specific parameters. It includes 1) collections, 2) fields, 3) encodable (table, column) pairs in the relational database where the vectorized content originates, and 4) grammar for valid filter rules.\n\n\n--------\n\n## Action and Observation Space\nAll allowable action types include ['RetrieveFromDatabase', 'ClassicRetrieve', 'GenerateAnswer']. Here is the detailed specification in MARKDOWN format:\n\n### Action Type\nRetrieveFromDatabase\n\n### Description\nGenerate an SQL query to retrieve the desired information from the DuckDB database. Please refer to the concrete database schema to produce a valid and executable SQL.\n\n### Observation\nThe observation space is the execution result of the SQL query. You do not need to worry about the actual execution, we will perform it for you. If the SQL failed to execute, we will return the error message. Extremely long SQL output will be truncated.\n\n### Syntax and Parameters (MARKDOWN Format)\nRetrieveFromDatabase(sql: str)\n- sql: str, required. The concrete DuckDB SQL query to execute and retrieve results.\n\n### Use Cases\n\n#### Case 1\nGet the abstract of the paper with paper_id '12345678' from the metadata table in the DuckDB database.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT abstract FROM metadata WHERE paper_id = '12345678';\")\n\n\n#### Case 2\nFind which page in the paper with paper_id '12345678' contains Figure 3.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT pages.page_number FROM images JOIN pages JOIN metadata ON images.ref_page_id = pages.page_id AND pages.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '12345678' AND images.image_caption LIKE '%Figure 3%';\")\n\n\n----\n\n### Action Type\nClassicRetrieve\n\n### Description\nGiven a query text, retrieve relevant context from the Milvus vectorstore.\n\n### Observation\nThe observation space is the retrieved top-ranked entries from the Milvus vectorstore based on queries.\n\n### Syntax and Parameters (MARKDOWN Format)\nClassicRetrieve(query: str, limit: int = 5)\n- query: str, required. The query text will be encoded and used to search for relevant context. You can rephrase the original user question to obtain a more clear and structured query requirement.\n- limit: int, optional, default to 5. The number of top-ranked context to retrieve. Please set it to a positive integer to limit the number of returned results. Extremely large limit values may be truncated.\n\n### Use Cases\n\n#### Case 1\nRetrieve top 5 pieces about a certain topic.\n\n[Action]: ClassicRetrieve(query='Is there any work about the topic structured RAG?')\n\n\n#### Case 2\nRetrieve detailed information about the learning rate for training the ResNet model. The top 4 most relevant entries will be returned based on the query.\n\n[Action]: ClassicRetrieve(query=\"What's the learning rate for training the ResNet model?\", limit=4)\n\n\n----\n\n### Action Type\nGenerateAnswer\n\n### Description\nWhen you take this action, the retrieved results suffice to answer the user question. PLEASE STRICTLY ADHERE TO THE ANSWER FORMAT FOR THE CURRENT QUESTION.\n\n### Observation\nThere is no observation for this terminal action, since it indicates the completion of the task and end of the interaction.\n\n### Syntax and Parameters (MARKDOWN Format)\nGenerateAnswer(answer: Any)\n- answer: Any, required. The final answer to the user question. Please adhere to the answer format for the current question.\n\n### Use Cases\n\n#### Case 1\nThe answer to the user question is 42.\n\n[Action]: GenerateAnswer(answer=42)\n\n\n#### Case 2\nThe answer to the user question is a list of strings: ['Results', 'Discussion'].\n\n[Action]: GenerateAnswer(answer=['Results', 'Discussion'])\n\n\n\n--------\n\n## Interaction Framework\n\nThe main interaction procedure proceeds like this:\n\n----\n\n[Thought]: ... reasoning process, why to take this action ...\n[Action]: ... which action to take, please strictly conform to the action specification ...\n[Observation]: ... execution results or error message after taking the action ...\n\n... # more interleaved triplets of ([Thought], [Action], [Observation])\n\n[Thought]: ... reasoning process to produce the final answer ...\n[Action]: ... the terminate action `GenerateAnswer`, there is no further observation ...\n\n----\n\nIn general, the main interaction loop consists of an interleaved of triplets ([Thought], [Action], [Observation]), except the last `GenerateAnswer` action which does not have \"[Observation]:\". You need to predict the \"[Thought]: ...\" followed by the \"[Action]: ...\" for each turn, and we will execute your action in the environment and provide the \"[Observation]: ...\" for the previous action.\n\n--------\n\n## Suggestions or Hints for Agent Interaction\n\n1. Explore multiple retrieval strategies. For example:\n- Experiment with different (table, column) pairs to extract diverse types of information.\n- Query various embedding models (collections) to find the most relevant context.\n\n2. Combine both structured and unstructured data. Concretely:\n- Use SQL queries to retrieve precise facts and structured data. Pay special attention to morphological variations in cell values.\n- Perform similarity searches in the vectorstore to capture semantic relationships and hidden insights.\n\n3. Iterate and refine:\n- If SQL execution result is not satisfactory, try alternative SQL queries to explore the database content carefully.\n- If the vector-based neural retrieval is insufficient, try alternative approaches or parameter settings.\n- Use your findings to validate or enrich the final response.\n\n4. Ensure confidence. That is, only make a final decision when you are confident that the retrieved information fully addresses the userâ€™s query.\n\n\nRemember that, for each question, you only have 20 interaction turns at most. Now, let's start!\n"}
{"role": "user", "content": "[Question]: For handling hallucinations with auxiliary models, what is the model they use, and what are the metrics or measures to evaluate semantic similarity of two sentences?\n[Answer Format]: Your answer should be a Python list of two elements, the first element is the model name string, and the second element is a list of metric names, e.g., [\"model_name\", [\"metric1\", \"metric2\", ...]].\n[Anchor PDF]: 'b5062515-e162-5a98-a421-ab84dfe1d930'\n[Database Schema]: The database schema for /home/htc981/workspace/project/HNS-RAG/data/database/ai_research/ai_research.sql is as follows:\n/* database ai_research: This database contains information about AI research papers. Each PDF file is represented or parsed via different views, e.g., pages, sections, figures, tables, and references. We also extract the concrete content inside each concrete element via OCR.\n*/\n/* table metadata: This table stores metadata about each paper, including the number of pages, paper path and paper id.\n*/\nCREATE TABLE IF NOT EXISTS metadata (\n\tpaper_id UUID, -- A unique identifier for this paper.\n\ttitle VARCHAR, -- The title of this paper.\n\tabstract VARCHAR, -- The abstract of this paper.\n\tnum_pages INTEGER, -- The number of pages in this paper.\n\tconference_full VARCHAR, -- The full name of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tconference_abbreviation VARCHAR, -- The abbreviation of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tpub_year INTEGER, -- The year when this paper was published.\n\tvolume VARCHAR, -- The volume of the conference where this paper was published. e.g. findings.\n\tdownload_url VARCHAR, -- The url from which the paper can be downloaded.\n\tbibtex VARCHAR, -- The bibtex of this paper.\n\tauthors VARCHAR[], -- The full names of authors of this paper.\n\tpdf_path VARCHAR, -- The path to the PDF file of this paper.\n\ttldr VARCHAR, -- A brief summary of the paper's main idea or findings generated by LLM based on title and abstract.\n\ttags VARCHAR[], -- Keywords representing the paper's topics, methods, or applications generated by LLM based on title and abstract.,\n\tPRIMARY KEY (paper_id)\n);\n/* table pages: This table stores information of the pages in the papers, including their content, size and their order within the paper. The pagesare extracted using PyMuPDF.\n*/\nCREATE TABLE IF NOT EXISTS pages (\n\tpage_id UUID, -- A unique identifier for each page.\n\tpage_number INTEGER, -- The page number in the current paper, starting from 1.\n\tpage_width INTEGER, -- The pixel width of the current page.\n\tpage_height INTEGER, -- The pixel height of the current page.\n\tpage_content VARCHAR, -- The content of the page.\n\tpage_summary VARCHAR, -- A brief summary of the page content, generated by LLM, focusing on key information and describing the page content.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (page_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table images: This table stores the information about images in each paper. The images are extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS images (\n\timage_id UUID, -- The unique identifier of the image.\n\timage_caption VARCHAR, -- The caption of this image, \"\" if it doesn't have one.\n\timage_summary VARCHAR, -- A brief summary of the image, generated by LLM, focusing on key information and describing the image.\n\tbounding_box INTEGER[4], -- The bounding box of the figure in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height which are used to determine the shape of the rectangle.\n\tordinal INTEGER, -- Each figure is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (image_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table chunks: This table contains the information of each chunk of text (chunk size = 512 tokens with no overlapping) in each page of the paper. A chunk is a sub-text that is extracted from the main text using langchain, such as a sentence or a paragraph.\n*/\nCREATE TABLE IF NOT EXISTS chunks (\n\tchunk_id UUID, -- A unique identifier for each chunk of text.\n\ttext_content VARCHAR, -- The text content of the current chunk.\n\tordinal INTEGER, -- Each chunk is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (chunk_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table tables: This table stores information about tables extracted from pages using MinerU, including content (in html format), bounding box and summary of each table generated by LLM.\n*/\nCREATE TABLE IF NOT EXISTS tables (\n\ttable_id UUID, -- A unique identifier for each table.\n\ttable_caption VARCHAR, -- Caption of the table, showing key information of the table.\n\ttable_content VARCHAR, -- The content of the table in html format.\n\ttable_summary VARCHAR, -- A brief summary of the table content generated by LLM, focusing on key information and describing the table content.\n\tbounding_box INTEGER[4], -- The bounding box of the table in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height.\n\tordinal INTEGER, -- Each table is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this table is located.,\n\tPRIMARY KEY (table_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table sections: This table contains the text content of each section in the paper, e.g. `Introduction`, `Experiment`, `Conclusion`, `Reference`. The sections are extracted using PyMuPDF or MinerU.\n*/\nCREATE TABLE IF NOT EXISTS sections (\n\tsection_id UUID, -- A unique identifier for each section of text.\n\tsection_title VARCHAR, -- The title of the current section.\n\tsection_content VARCHAR, -- The text content of the current section.\n\tsection_summary VARCHAR, -- A brief summary of the section content generated by LLM, focusing on key information and describing the section content.\n\tordinal INTEGER, -- Each section is labeled with one distinct integer number in the paper, which starts from 0.\n\tpage_numbers INTEGER[], -- A list of page numbers where current section is located in the relevant paper.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (section_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table equations: This table stores information about equations extracted from pages using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS equations (\n\tequation_id UUID, -- A unique identifier for each equation.\n\tequation_content VARCHAR, -- Content of the equation in latex format.\n\tordinal INTEGER, -- Each equation is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the paper ID in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the page ID in the `pages` table where this equation is located.,\n\tPRIMARY KEY (equation_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table reference: This table stores information about references extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS reference (\n\treference_id UUID, -- A unique identifier for each reference.\n\treference_content VARCHAR, -- Content of the reference.\n\tordinal INTEGER, -- Each reference is labeled with one distinct integer number according to its order in the paper, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this reference is located.,\n\tPRIMARY KEY (reference_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n[Vectorstore Schema]: The vectorstore schema for ai_research is as follows. You can try collections with different encoding models or modalities:\n[\n    {\n        \"collection_name\": \"text_bm25_en\",\n        \"modality\": \"text\",\n        \"embed_type\": \"bm25\",\n        \"embed_model\": \"en\",\n        \"description\": \"This collection is used to store the sparse embeddings generated by the BM25 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric inner-product (IP).\",\n        \"fields\": [\n            {\n                \"name\": \"id\",\n                \"dtype\": \"INT64\",\n                \"is_primary\": true,\n                \"description\": \"The unique id for each encoded text vector in this collection.\"\n            },\n            {\n                \"name\": \"vector\",\n                \"dtype\": \"SPARSE_FLOAT_VECTOR\",\n                \"description\": \"The encoded sparse vector of the text content generated by the BM25 model. Note that, the raw text content can be uniquely identified by the triplet fields below: `table_name`, `column_name`, `primary_key`.\"\n            },\n            {\n                \"name\": \"pdf_id\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The unique id of the PDF file stored in the relational database that the encoded text belongs to. This field can be used to quickly filter the search space.\"\n            },\n            {\n                \"name\": \"page_number\",\n                \"dtype\": \"INT16\",\n                \"description\": \"The page number in the PDF file that the encoded text belongs to (starting from 1). This field can be used to quickly filter the search space. Value -1 means unknown.\"\n            },\n            {\n                \"name\": \"table_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which table in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"column_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which column under `table_name` in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"primary_key\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The primary key value of `table_name` (or which row) in the relational database that the text content belongs to. Note that, the triplet (`table_name`, `column_name`, `primary_key`) can be used to construct a one-to-one mapping between the `text` field in the current vectorstore and the cell entry in the relational database.\"\n            }\n        ]\n    },\n    {\n        \"collection_name\": \"text_sentence_transformers_all_minilm_l6_v2\",\n        \"modality\": \"text\",\n        \"embed_type\": \"sentence_transformers\",\n        \"embed_model\": \"all-MiniLM-L6-v2\",\n        \"description\": \"This collection is used to store the embeddings generated by the all-MiniLM-L6-v2 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric COSINE.\",\n        \"fields\": \"The fields of this collection are similar to the `text_bm25_en` collection.\"\n    }\n]\n\nThe following lists all encodable (table_name, column_name, encode_modality) information from the corresponding DuckDB database, where the encoded vector entries are sourced. Note that, for text modality, we directly encode cell values from the `table_name.column_name`; for image modality, we encode the cropped images for `page_number` in `pdf_id` with bounding boxes from `table_name.column_name`. You can leverage them for filter condition during similarity search:\n[\n    [\n        \"metadata\",\n        \"title\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"abstract\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"bibtex\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"tldr\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_content\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_summary\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_caption\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_summary\",\n        \"text\"\n    ],\n    [\n        \"chunks\",\n        \"text_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_caption\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_summary\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_title\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_content\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_summary\",\n        \"text\"\n    ],\n    [\n        \"equations\",\n        \"equation_content\",\n        \"text\"\n    ],\n    [\n        \"reference\",\n        \"reference_content\",\n        \"text\"\n    ]\n]\n\nHere are the operators that you can use in the filtering condition for the vectorstore:\n{\n    \"operators\": {\n        \"logical\": [\n            {\n                \"symbol\": \"not\",\n                \"example\": \"not expr\",\n                \"description\": \"True if expr is false.\"\n            },\n            {\n                \"symbol\": \"and\",\n                \"example\": \"expr1 and expr2\",\n                \"description\": \"True if both expr1 and expr2 are true.\"\n            },\n            {\n                \"symbol\": \"or\",\n                \"example\": \"expr1 or expr2\",\n                \"description\": \"True if either expr1 or expr2 are true.\"\n            }\n        ],\n        \"binary arithmetic\": [\n            {\n                \"symbol\": \"+\",\n                \"example\": \"a + b\",\n                \"description\": \"Add the two operands.\"\n            },\n            {\n                \"symbol\": \"-\",\n                \"example\": \"a - b\",\n                \"description\": \"Subtract the second operand from the first operand.\"\n            },\n            {\n                \"symbol\": \"*\",\n                \"example\": \"a * b\",\n                \"description\": \"Multiply the two operands.\"\n            },\n            {\n                \"symbol\": \"/\",\n                \"example\": \"a / b\",\n                \"description\": \"Divide the first operand by the second operand.\"\n            },\n            {\n                \"symbol\": \"**\",\n                \"example\": \"a ** b\",\n                \"description\": \"Raise the first operand to the power of the second operand.\"\n            },\n            {\n                \"symbol\": \"%\",\n                \"example\": \"a % b\",\n                \"description\": \"Divide the first operand by the second operand and yield the remainder portion.\"\n            }\n        ],\n        \"relational\": [\n            {\n                \"symbol\": \"<\",\n                \"example\": \"a < b\",\n                \"description\": \"True if a is less than b.\"\n            },\n            {\n                \"symbol\": \">\",\n                \"example\": \"a > b\",\n                \"description\": \"True if a is greater than b.\"\n            },\n            {\n                \"symbol\": \"==\",\n                \"example\": \"a == b\",\n                \"description\": \"True if a is equal to b. Please use **two** equal signs for equality comparison.\"\n            },\n            {\n                \"symbol\": \"!=\",\n                \"example\": \"a != b\",\n                \"description\": \"True if a is not equal to b.\"\n            },\n            {\n                \"symbol\": \"<=\",\n                \"example\": \"a <= b\",\n                \"description\": \"True if a is less than or equal to b.\"\n            },\n            {\n                \"symbol\": \">=\",\n                \"example\": \"a >= b\",\n                \"description\": \"True if a is greater than or equal to b.\"\n            },\n            {\n                \"symbol\": \"in\",\n                \"example\": \"a in [b, c, ...]\",\n                \"description\": \"True if a is equal to any of the values in the list.\"\n            }\n        ],\n        \"array operations\": [\n            {\n                \"symbol\": \"[]\",\n                \"example\": \"bbox[0]\",\n                \"description\": \"This expression gets the first element in array bbox. For example, 'bbox[0] < 50' evaluates to true if the value of bbox[0] is less than 50.\"\n            },\n            {\n                \"symbol\": \"array_contains\",\n                \"example\": \"array_contains(bbox, 100)\",\n                \"description\": \"This expression evaluates to true if array bbox contains element 100.\"\n            },\n            {\n                \"symbol\": \"array_length\",\n                \"example\": \"array_length(int_array) == 4\",\n                \"description\": \"This expression evaluates to true if int_array contains exactly 4 elements.\"\n            }\n        ]\n    },\n    \"use cases\": [\n        {\n            \"example\": \"table_name == 'chunks' and column_name == 'text_content'\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and column_name equal to 'text_content'.\"\n        },\n        {\n            \"example\": \"table_name == 'chunks' and primary_key in ['123', '456', '789']\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and primary_key equal to any of the values in the list ['123', '456', '789'].\"\n        },\n        {\n            \"example\": \"bbox[0] + bbox[2] <= 100 and bbox[1] + bbox[3] <= 300 and pdf_id == '123456' and page_number == 1\",\n            \"description\": \"For image modality, filter results to include only image regions that are entirely within the upper-left quadrant of page 1 in the PDF with ID '123456', assuming the page dimensions are 200 (width) x 600 (height).\"\n        }\n    ]\n}"}
{"role": "assistant", "content": "[Thought]: To answer the question, I need to retrieve the relevant sections or chunks of text from the specified PDF. I will first query the `sections` table to find the section that discusses handling hallucinations with auxiliary models. If that does not provide the necessary information, I will query the `chunks` table to find relevant chunks of text.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_content FROM sections WHERE ref_paper_id = 'b5062515-e162-5a98-a421-ab84dfe1d930' AND section_content LIKE '%hallucinations%';\")"}
{"role": "user", "content": "[Observation]:\n{\"section_content\":\"While the problem of hallucinations in neural machine translation has long been recognized, so far the progress on its alleviation is very little. Indeed, recently it turned out that without artifcially encouraging models to hallucinate, previously existing methods fall short and even the standard sequence log-probability is more informative. It means that internal characteristics of the model can give much more information than we expect, and before using external models and measures, we frst need to ask: how far can we go if we use nothing but the translation model itself ? We propose to use a method that evaluates the percentage of the source contribution to a generated translation. Intuitively, hallucinations are translations \\u201cdetached\\u201d from the source, hence they can be identifed by low source contribution. This method improves detection accuracy for the most severe hallucinations by a factor of 2 and is able to alleviate hallucinations at test time on par with the previous best approach that relies on external models. Next, if we move away from internal model characteristics and allow external tools, we show that using sentence similarity from cross-lingual embeddings further improves these results. We release the code of our experiments.1\"}\n{\"section_content\":\"Hallucinations in machine translation (MT) are cases when the model generates output that is partially or fully unrelated to the source sentence. While generally this phenomenon is not frequent and has low impact on corpus-level automatic metrics, the impact of hallucinations on user experience can be rather dramatic. For example, if a translation system generates The staff were very friendly and helpful in response to an input sentence about e.g. a marvelous view from the window, a user is unlikely to trust this system in future.\\nWhile the problem of hallucinations is known, addressing it remains challenging. Firstly, hallucinations are very rare. This is why previous work mostly resorted to settings where models are encouraged to hallucinate, by e.g. artifcially perturbing source sentence (Lee et al., 2019; Raunak et al., 2021), adding specifc types of noise to the training data (Raunak et al., 2021), working under domain shift (Wang and Sennrich, 2020; M\\u00fcller et al., 2020), among others (Zhou et al., 2021). Secondly, hallucinations are hard to identify with automatic metrics. Often, hallucinations were defned as translations with low quality according to some metric such as adjusted BLEU or chrF (Lee et al., 2019; Raunak et al., 2021; M\\u00fcller and Sennrich, 2021) or translations satisfying some heuristic condition (Berard et al., 2019; Raunak et al., 2021). Overall, it is not clear whether proposed methods detect naturally occurring hallucinations well.\\nRecently, when revisiting previous work in a relatively clean setting, Guerreiro et al. (2022) found that existing detection methods fall short and the standard sequence log-probability is the most informative. To show this, the authors gathered a large dataset with professional annotations of translations that, according to 10 previously proposed methods, are likely to be hallucinations. This data (hallucinations along with the model that generated them) made it possible to frst, evaluate the performance of various detection methods and second, to work on alleviating hallucinations at test time. For the latter, the idea is \\u201cdetect-then-rewrite\\u201d: after fagging a translation as likely to be pathological, generate several alternative hypotheses and pick the best one relying on some measure. So far, the best realization of this general framework uses sequence log-probability \\u2013 Seq-Logprob \\u2013 for detection, Monte Carlo dropout (Gal and Ghahramani, 2016) to generate several alternative translation hypotheses, and COMET-QE to pick the fnal candidate (see Guerreiro et al. (2022) for the details).\\nWe use the same test bed and substantially improve previous results.\\nRegarding hallucination detection, we view the observation that Seq-Logprob outperforms previous (specifcally targeted to hallucinations) methods as follows: internal model characteristics may contain much more information than we expect. Therefore, before developing or using external models and measures, we ask: how far can we go if we use nothing but the translation model itself ? We propose to use a method that evaluates the percentage of the source contribution to a generated translation. Intuitively, since hallucinations are translations that are \\u201cdetached\\u201d from the source, low source contribution should be able to identify hallucinations. Despite the fact that understanding hallucinations was one of the motivations behind the frst method evaluating relative source and target contributions, both existing methods only looked at highly artifcial hallucinations (Voita et al., 2021; Ferrando et al., 2022). We propose to use ALTI+ by Ferrando et al. (2022), the method that aggregates layer-wise tokens attributions, for both hallucination detection and reranking in the \\u201cdetect-then-rewrite\\u201d pipeline. For detection of the most severe hallucinations, it is twice more accurate than Seq-Logprob. For reranking, it performs on par with the previous best COMET-QE. All in all, we improve the overall pipeline results by relying on internal model characteristics alone.\\nWhen allowing external tools, previous work mostly focused on different ways to automatically evaluate quality of a translation example, either with string-based methods or neural quality estimation systems. This idea (the better we estimate translation quality, the better we are at detecting hallucinations) is natural: hallucinations are lowquality translations in the frst place. However, implementing this idea in practice is challenging: even state-of-the-art quality estimation system substantially fails (Guerreiro et al., 2022). We hypothesize that instead of targeting quality evaluation, it might be benefcial to use models trained with a rather different objective. Indeed, as we show in this paper, similarity between the source and a translation estimated via cross-lingual sentence embeddings outperforms the best internal method. Apart from cross-lingual sentence similarity (which is expected to be sensitive to highly incorrect translations), we fnd that cross-lingual natural language inference models (less anticipated in the context of machine translation) also perform quite well. To the best of our knowledge, we are the frst to apply these models for hallucination detection.\\n\\n\\u2022 by using only the model\\u2019s inner workings, we $\\\\bigcirc$ detect the most severe type of hallucinations with twice better precision; $\\\\bigcirc$ alleviate hallucinations at test time with results on par with the best previous method that relies on an external model;   \\n\\u2022 models focused on semantic similarity of sentences detect all types of hallucinations with precision $80\\\\%$ higher than previous methods.\"}\n{\"section_content\":\"In this section, we describe the framework and data we use for evaluation of hallucination detection and mitigation methods. This framework was proposed by Guerreiro et al. (2022) and consists of a large dataset of annotated translations along with the model that produced them. To the best of our knowledge, this is the only released data that can be used to analyze hallucinations in a \\u201cclean\\u201d setting.\"}\n{\"section_content\":\"The model is Transformer base (Vaswani et al., 2017) from fairseq (Ott et al., 2019) with the standard hyperparameters setting. It was trained on the WMT\\u201918 German-English news translation data excluding Paracrawl (Bojar et al., 2018) \\u2013 totalling $5.8\\\\mathrm{M}$ sentence pairs. Since Guerreiro et al. (2022) used randomly chosen 1\\/3 of the dataset as a held-out set for analysis, the model was trained on the remaining 2\\/3 of the dataset. We use the model released by Guerreiro et al. (2022) that has been used to generate the hallucinations we analyze.\"}\n{\"section_content\":\"Following previous work (M\\u00fcller and Sennrich, 2021; Guerreiro et al., 2022), we use:\\n\\u2022 chrF: character $n$ -gram F score of the translation with respect to the reference. We use the ${\\\\mathrm{CHRF}}++$ version that also takes into account word unigrams and bigrams (Popovic\\u00b4, 2017); \\u2022 COMET: a neural quality estimation metric by Rei et al. (2020a) which was shown to be the state-of-the-art reference-based method (Kocmi et al., 2021).\\nThe taxonomy of translation pathologies in the dataset is shown in Figure 1. Here, hallucinations are defned as severe translation errors that are detached from the source. These can be either oscillatory (i.e. contain erroneous repetitions of words and phrases) or largely fuent. The latter is further split by severity of an error into fully detached (the whole content is not supported by the source) and strongly, but not fully, detached (signifcant proportion of output is not supported by the source).2 Additionally, the annotated data contains translation errors that are deemed not detached from the source (Figure 1). Overall, 323 examples are judged to be hallucinations, 1044 are less severe translation errors and the rest are correct translations.\\nNote that so far, there is no \\u201ccanonical\\u201d hallucination taxonomy and previous work used various, mostly overlapping, defnitions (Lee et al., 2019; Raunak et al., 2021; Zhou et al., 2021; Ji et al., 2022; Raunak et al., 2022; Guerreiro et al., 2022). We follow the taxonomy by Guerreiro et al. (2022) for consistency with the dataset and the evaluation framework we use and because this taxonomy is general enough for our purposes.\"}\n{\"section_content\":\"Generally, methods for handling hallucinations can be either internal, i.e. using only information coming from the translation model itself, or external, i.e. using auxiliary models. In addition to these, we also consider \\u201coracles\\u201d relying on reference translation. Note that these cannot be used in preventive settings when references are not available; here we use them only for analysis.\"}\n{\"section_content\":\"Baseline: Seq-Logprob. This is the standard length-normalized sequence log-probability. Compared to previously introduced methods specifcally targeting hallucinations, this simple metric performs the best (Guerreiro et al., 2022).\\nWe use ALTI: percentage of source contribution. We compute the percentage of source impact on the generated translation using the recently introduced $\\\\mathrm{ALTI+}$ (Ferrando et al., 2022). At a high level, it decomposes each transformer block into a sum of functions of individual tokens and views an output representation as a summation of transformed input vectors. Then it evaluates contribution of these vectors to the resulting sum. Among other things, $\\\\mathrm{ALTI+}$ (as well as an earlier Layerwise Relevance Propagation (LRP) -based method by Voita et al. (2021)) was used to show that for artifcially created hallucinations, source infuence is much lower than for \\u201chealthy\\u201d translations. Our work is the frst to test this intuition in a real setting where hallucinations are generated naturally.3\\nFormally, for a model and its generated translation, we compute the total source contribution as the sum of contributions of all source tokens. We do it for each target token individually and then average across target tokens. The scores are computed by the same model that produced the translations (Section 2.1).\"}\n{\"section_content\":\"Overall results are shown in Table 1. We report ROC AUC and precision at $90\\\\%$ recall.5 In addition to overall results, we also report metrics for fully detached hallucinations separately.\\nFirst, let us look at internal methods. While for all hallucinations ALTI performs comparably to Seq-Logprob, for fully detached hallucinations it has twice better precision. Since ALTI averages the source contributions over all generated tokens, it is more effective at detecting the most severe hallucinations rather than the ones where only part of the tokens are detached. Note also that for fully detached hallucinations, internal ALTI performs almost on par with the best external methods.\\nAmong external methods, LaBSE and XNLI substantially outperform previous best detector: for both all and fully detached hallucinations, their precision at $90\\\\%$ recall is roughly twice better than that of Seq-Logprob. While such a good performance might be expected for LaBSE that evaluates crosslingual sentence similarity (in a way, this might be seen as a measure of translation quality), results for XNLI are rather surprising: to the best of our knowledge, models optimized for XNLI have not been used in the context of machine translation.\\n\\nNote also the large difference between LaBSE and LASER: while the former shows big improvements compared to Seq-Lobprob, the latter noticeably lags behind. This is not surprising when looking at training objectives of the underlying models. LaBSE is trained on a translation ranking task and thus explicitly encourages ordering translations by severity of an error; for LASER, this is not the case.\\nTo further understand differences between detectors, we look at the distributions of the detection scores in Section 4.2 and the detected pathology types in Section 4.3.\"}\n{\"section_content\":\"For each of the methods, Figure 2 shows distributions of the scores for fully detached hallucinations, strongly detached hallucinations, less severe errors and correct translations.\\nInternal methods: partial hallucinations are bimodal. ALTI and Seq-Logprob show similar behavior: errors are distributed similarly to correct translations, and the scores for partial (strongly detached) hallucinations have bimodal distribution. At a high level, for the model, some partial hallucinations \\u201clook\\u201d more like full hallucinations, and some \\u2013 like errors. This can motivate future work:\\nit would be interesting to understand whether it depends on detachment or on more simple patterns such as e.g. the proportion of hallucinated tokens.\\nCOMETs: blind to error severity. COMET and COMET-QE scores do not separate hallucinations from less severe errors. This agrees with previous work noting that since quality estimation models are mostly trained on data that lacks negative examples, COMETs may be inadequate at evaluating poor translations in general (Takahashi et al., 2021; Sudoh et al., 2021) and hallucinations in particular (Guerreiro et al., 2022). What is also expected, is that compared to reference-free COMET-QE, the overlap between the scores for correct and incorrect translations is much lower for reference-based COMET. ChrF behaves similarly to COMET.\\nLaBSE: ranks hallucination severity best. LaBSE is the only detector with a clear order between full, partial hallucinations, and non-hallucinations. Once again, this is expected because only LaBSE is trained for ranking. Interestingly, for LASER, modes for the three distributions are also ordered; unfortunately, the distributions themselves overlap signifcantly which makes it not suitable as a detector. Both LaBSE and LASER ignore most of the non-hallucinated translation errors.\\nXNLI: no middle ground. Finally, XNLI distributions are very peaky and concentrated around 0 and 1. This is expected: XNLI\\u2019s decision is always binary. While this provides good separation between fully detached hallucinations and correct translations, it is hard to estimate error severity.\"}\n{\"section_content\":\"Now we come to fne-grained categories and look at detected pathology types. For each method, we fag a translation as \\u201cdetected\\u201d if it belongs to a fraction (e.g. $10\\\\%$ ) of the hallucination dataset corresponding to the lowest scores.7 Then we look at \\u2022 the distribution of pathology types contained among detected examples (Figure 3); recall for different translation types with respect to the whole dataset (Figure 4).\\n\\nThe three best methods are similar. Figure 3 shows that ALTI, LaBSE and XNLI select similar pathology types. For them, fagged examples consist mostly of fully detached and strongly detached hallucinations, along with other errors.\\nLASER is an outlier. Instead of focusing on pathological translations, LASER behaves differently and fags correct translations more. This explains its poor detection performance mentioned above.\\nFigure 3: Distribution of translation types when selecting the worst $10\\\\%$ of the dataset according to each metric. While in the original dataset the annotations are multilabel (e.g. a translation could be annotated both as oscillatory hal. and as a NE error), we label with the most severe pathology type (with severity increasing clockwise from \\u201cCorrect\\u201d to \\u201cFully detached\\u201d).\\nXNLI fags undergenerations. Figure 4 shows that XNLI (and, to a lesser extent, LaBSE) fags a large proportion of undertranslations. This makes sense: these criteria are symmetric, and if we swap the source and the undergenerated translation, the longer source can be seen as a hallucination.\\nFully detached are the easiest to detect. As expected, fully detached hallucinations are the easiest to detect: all methods detect them entirely when taking $20\\\\%$ of the hallucination dataset (Figure 4), and they are the most frequent among the examples fagged by the best performing methods (Figure 3). This agrees with Guerreiro et al. (2022) that oscillatory and strongly detached hallucinations are more diffcult to detect, and shows that improvements with our methods mostly come from these types.\"}\n\n... # only display 10 rows in JSON format, more are truncated due to length constraint based on max_rows (10)"}
{"role": "assistant", "content": "[Thought]: The retrieved sections provide a lot of context, but I need to extract the specific information about the model and metrics used for evaluating semantic similarity. I will use the `ClassicRetrieve` action to search the vectorstore for more focused information.\n[Action]:\nClassicRetrieve(query='For handling hallucinations with auxiliary models, what is the model they use, and what are the metrics or measures to evaluate semantic similarity of two sentences?', limit=5)"}
{"role": "user", "content": "[Observation]:\n{\"score\":0.7404,\"pdf_id\":\"b5062515-e162-5a98-a421-ab84dfe1d930\",\"page_number\":2,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"7a6fd12c-7984-5903-b195-9f785c38eb41\",\"text\":\"method that relies on an external model;\\n\\u2022 models focused on semantic similarity of sen-\\ntences detect all types of hallucinations with\\nprecision 80% higher than previous methods.\\n2\\nBackground and Setting\\nIn this section, we describe the framework and data\\nwe use for evaluation of hallucination detection\\nand mitigation methods. This framework was pro-\\nposed by Guerreiro et al. (2022) and consists of a\\nlarge dataset of annotated translations along with\\nthe model that produced them. To the best of our\"}\n{\"score\":0.7252,\"pdf_id\":\"2179984c-a613-5d35-a263-3038fbebf35d\",\"page_number\":7,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"1597bea6-dd11-5b02-9aae-4401905971e9\",\"text\":\"Abhimanyu Dubey et al. The Llama 3 Herd of Models. Aug. 2024. arXiv: 2407.21783 [cs].\\n(Visited on 08\\/27\\/2024).\\n[7]\\nSebastian Farquhar et al. \\u201cDetecting Hallucinations in Large Language Models Using Semantic\\nEntropy\\u201d. In: Nature 630.8017 (June 2024), pp. 625\\u2013630. ISSN: 0028-0836, 1476-4687. DOI:\\n10.1038\\/s41586-024-07421-0. (Visited on 08\\/27\\/2024).\\n[8]\\nSebastian Farquhar et al. \\u201cDetecting hallucinations in large language models using semantic\"}\n{\"score\":0.7252,\"pdf_id\":\"55eba75a-be2c-5b9f-bd02-7238bef96667\",\"page_number\":7,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"017a31bc-ec5d-5f5c-b508-b9e7a338cfaa\",\"text\":\"Abhimanyu Dubey et al. The Llama 3 Herd of Models. Aug. 2024. arXiv: 2407.21783 [cs].\\n(Visited on 08\\/27\\/2024).\\n[7]\\nSebastian Farquhar et al. \\u201cDetecting Hallucinations in Large Language Models Using Semantic\\nEntropy\\u201d. In: Nature 630.8017 (June 2024), pp. 625\\u2013630. ISSN: 0028-0836, 1476-4687. DOI:\\n10.1038\\/s41586-024-07421-0. (Visited on 08\\/27\\/2024).\\n[8]\\nSebastian Farquhar et al. \\u201cDetecting hallucinations in large language models using semantic\"}\n{\"score\":0.7252,\"pdf_id\":\"60f33074-c9d1-5533-b80d-e9f58ba2fadf\",\"page_number\":7,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"43014d9c-5040-5fa0-bb39-9253ac709d53\",\"text\":\"Abhimanyu Dubey et al. The Llama 3 Herd of Models. Aug. 2024. arXiv: 2407.21783 [cs].\\n(Visited on 08\\/27\\/2024).\\n[7]\\nSebastian Farquhar et al. \\u201cDetecting Hallucinations in Large Language Models Using Semantic\\nEntropy\\u201d. In: Nature 630.8017 (June 2024), pp. 625\\u2013630. ISSN: 0028-0836, 1476-4687. DOI:\\n10.1038\\/s41586-024-07421-0. (Visited on 08\\/27\\/2024).\\n[8]\\nSebastian Farquhar et al. \\u201cDetecting hallucinations in large language models using semantic\"}\n{\"score\":0.7071,\"pdf_id\":\"53b4052c-0d14-5bd5-ae73-2be2f6eea5a2\",\"page_number\":9,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"2e9a8431-f61c-5328-b8b8-b4e3a9d6363f\",\"text\":\"Sebastian Farquhar, Jannik Kossen, Lorenz Kuhn, and Yarin Gal. Detecting hallucinations in large\\nlanguage models using semantic entropy. Nature, 630(8017):625\\u2013630, 2024.\\nMarina Fomicheva, Shuo Sun, Lisa Yankovskaya, Fr\\u00b4\\ned\\u00b4\\neric Blain, Francisco Guzm\\u00b4\\nan, Mark Fishel,\\nNikolaos Aletras, Vishrav Chaudhary, and Lucia Specia. Unsupervised quality estimation for\\nneural machine translation. Transactions of the Association for Computational Linguistics, 8:\\n539\\u2013555, 2020.\"}\n\nIn total, 5 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved chunks provide more focused information. The first chunk mentions that models focused on semantic similarity of sentences detect all types of hallucinations with precision 80% higher than previous methods. This suggests that the model used is likely LaBSE or XNLI, as they are mentioned in the context of semantic similarity. I will refine the search to confirm the specific model and metrics.\n[Action]:\nClassicRetrieve(query='models focused on semantic similarity of sentences detect all types of hallucinations with precision 80% higher than previous methods', limit=5)"}
{"role": "user", "content": "[Observation]:\n{\"score\":0.8453,\"pdf_id\":\"b5062515-e162-5a98-a421-ab84dfe1d930\",\"page_number\":2,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"7a6fd12c-7984-5903-b195-9f785c38eb41\",\"text\":\"method that relies on an external model;\\n\\u2022 models focused on semantic similarity of sen-\\ntences detect all types of hallucinations with\\nprecision 80% higher than previous methods.\\n2\\nBackground and Setting\\nIn this section, we describe the framework and data\\nwe use for evaluation of hallucination detection\\nand mitigation methods. This framework was pro-\\nposed by Guerreiro et al. (2022) and consists of a\\nlarge dataset of annotated translations along with\\nthe model that produced them. To the best of our\"}\n{\"score\":0.7936,\"pdf_id\":\"2179984c-a613-5d35-a263-3038fbebf35d\",\"page_number\":7,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"1597bea6-dd11-5b02-9aae-4401905971e9\",\"text\":\"Abhimanyu Dubey et al. The Llama 3 Herd of Models. Aug. 2024. arXiv: 2407.21783 [cs].\\n(Visited on 08\\/27\\/2024).\\n[7]\\nSebastian Farquhar et al. \\u201cDetecting Hallucinations in Large Language Models Using Semantic\\nEntropy\\u201d. In: Nature 630.8017 (June 2024), pp. 625\\u2013630. ISSN: 0028-0836, 1476-4687. DOI:\\n10.1038\\/s41586-024-07421-0. (Visited on 08\\/27\\/2024).\\n[8]\\nSebastian Farquhar et al. \\u201cDetecting hallucinations in large language models using semantic\"}\n{\"score\":0.7936,\"pdf_id\":\"55eba75a-be2c-5b9f-bd02-7238bef96667\",\"page_number\":7,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"017a31bc-ec5d-5f5c-b508-b9e7a338cfaa\",\"text\":\"Abhimanyu Dubey et al. The Llama 3 Herd of Models. Aug. 2024. arXiv: 2407.21783 [cs].\\n(Visited on 08\\/27\\/2024).\\n[7]\\nSebastian Farquhar et al. \\u201cDetecting Hallucinations in Large Language Models Using Semantic\\nEntropy\\u201d. In: Nature 630.8017 (June 2024), pp. 625\\u2013630. ISSN: 0028-0836, 1476-4687. DOI:\\n10.1038\\/s41586-024-07421-0. (Visited on 08\\/27\\/2024).\\n[8]\\nSebastian Farquhar et al. \\u201cDetecting hallucinations in large language models using semantic\"}\n{\"score\":0.7936,\"pdf_id\":\"60f33074-c9d1-5533-b80d-e9f58ba2fadf\",\"page_number\":7,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"43014d9c-5040-5fa0-bb39-9253ac709d53\",\"text\":\"Abhimanyu Dubey et al. The Llama 3 Herd of Models. Aug. 2024. arXiv: 2407.21783 [cs].\\n(Visited on 08\\/27\\/2024).\\n[7]\\nSebastian Farquhar et al. \\u201cDetecting Hallucinations in Large Language Models Using Semantic\\nEntropy\\u201d. In: Nature 630.8017 (June 2024), pp. 625\\u2013630. ISSN: 0028-0836, 1476-4687. DOI:\\n10.1038\\/s41586-024-07421-0. (Visited on 08\\/27\\/2024).\\n[8]\\nSebastian Farquhar et al. \\u201cDetecting hallucinations in large language models using semantic\"}\n{\"score\":0.7682,\"pdf_id\":\"eb18c622-baeb-51e0-a1da-1555a2637589\",\"page_number\":2,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"b0d15513-7ad3-5786-8dde-a564cab8683c\",\"text\":\"efficient, achieving up to 2x speedup with minimal effects on accuracy.\\n1.2\\nRELATED WORK\\nThe majority of research on hallucinations in language models has focused on detecting and mit-\\nigating this phenomenon rather than explaining its underlying causes. Recent techniques can be\\ncategorized into two main approaches: those that rely on output text or model probabilities at in-\\nference time (Manakul et al., 2023; Joshi et al., 2017; Li et al., 2023) and those that utilize internal\"}\n\nIn total, 5 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved chunks confirm that models focused on semantic similarity of sentences detect all types of hallucinations with precision 80% higher than previous methods. The first chunk specifically mentions this, and the context suggests that the models used are LaBSE and XNLI. I will now generate the final answer.\n[Action]:\nGenerateAnswer(answer=['LaBSE', ['chrF', 'COMET', 'LaBSE', 'XNLI']])"}
{"role": "user", "content": "[Observation]: ['LaBSE', ['chrF', 'COMET', 'LaBSE', 'XNLI']]"}
