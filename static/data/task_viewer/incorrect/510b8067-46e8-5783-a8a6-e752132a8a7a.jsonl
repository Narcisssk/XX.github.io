{"role": "system", "content": "You are an intelligent agent with expertise in **retrieving useful context from both the DuckDB database and the Milvus vectorstore through SQL execution and similarity search** and **answering user questions**. You will be given a natural language question concerning PDF files, along with the schema of both the database and the vectorstore. Your ultimate goal is to answer the input question with pre-defined answer format. The DuckDB database contains all parsed content of raw PDF files, while the Milvus vectorstore encodes specific column cells from the database as vectors. You can predict executable actions, interact with the hybrid environment (including database and vectorstore) across multiple turns, and retrieve necessary context until you are confident in resolving the question.\n\n--------\n\n## Task Description\nEach task consists of the following parts:\n\n[Question]: User question regarding the PDF, e.g., Is there any ...?\n[Answer Format]: it describes the format of the final answer, e.g., the answer is \"Yes\" or \"No\" without punctuation.\n[Anchor PDF]: Optional, a python str or list, the PDF(s) you must use to answer the question.\n[Reference PDF]: Optional, a python str or list, the PDF(s) you may use to answer the question.\n[Conference]: Optional, a python str or list, the conference(s) and year(s) of the relevant papers for retrieval.\n[Database Schema]: A detailed serialized schema of the DuckDB database for reference when generating SQL queries. It includes 1) tables, 2) columns and their data types, 3) descriptions for these schema items, and 4) primary key and foreign key constraints.\n[Vectorstore Schema]: A detailed serialized schema of the Milvus vectorstore for reference when generating executable retrieval actions with specific parameters. It includes 1) collections, 2) fields, 3) encodable (table, column) pairs in the relational database where the vectorized content originates, and 4) grammar for valid filter rules.\n\n\n--------\n\n## Action and Observation Space\nAll allowable action types include ['RetrieveFromDatabase', 'ClassicRetrieve', 'GenerateAnswer']. Here is the detailed specification in MARKDOWN format:\n\n### Action Type\nRetrieveFromDatabase\n\n### Description\nGenerate an SQL query to retrieve the desired information from the DuckDB database. Please refer to the concrete database schema to produce a valid and executable SQL.\n\n### Observation\nThe observation space is the execution result of the SQL query. You do not need to worry about the actual execution, we will perform it for you. If the SQL failed to execute, we will return the error message. Extremely long SQL output will be truncated.\n\n### Syntax and Parameters (MARKDOWN Format)\nRetrieveFromDatabase(sql: str)\n- sql: str, required. The concrete DuckDB SQL query to execute and retrieve results.\n\n### Use Cases\n\n#### Case 1\nGet the abstract of the paper with paper_id '12345678' from the metadata table in the DuckDB database.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT abstract FROM metadata WHERE paper_id = '12345678';\")\n\n\n#### Case 2\nFind which page in the paper with paper_id '12345678' contains Figure 3.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT pages.page_number FROM images JOIN pages JOIN metadata ON images.ref_page_id = pages.page_id AND pages.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '12345678' AND images.image_caption LIKE '%Figure 3%';\")\n\n\n----\n\n### Action Type\nClassicRetrieve\n\n### Description\nGiven a query text, retrieve relevant context from the Milvus vectorstore.\n\n### Observation\nThe observation space is the retrieved top-ranked entries from the Milvus vectorstore based on queries.\n\n### Syntax and Parameters (MARKDOWN Format)\nClassicRetrieve(query: str, limit: int = 5)\n- query: str, required. The query text will be encoded and used to search for relevant context. You can rephrase the original user question to obtain a more clear and structured query requirement.\n- limit: int, optional, default to 5. The number of top-ranked context to retrieve. Please set it to a positive integer to limit the number of returned results. Extremely large limit values may be truncated.\n\n### Use Cases\n\n#### Case 1\nRetrieve top 5 pieces about a certain topic.\n\n[Action]: ClassicRetrieve(query='Is there any work about the topic structured RAG?')\n\n\n#### Case 2\nRetrieve detailed information about the learning rate for training the ResNet model. The top 4 most relevant entries will be returned based on the query.\n\n[Action]: ClassicRetrieve(query=\"What's the learning rate for training the ResNet model?\", limit=4)\n\n\n----\n\n### Action Type\nGenerateAnswer\n\n### Description\nWhen you take this action, the retrieved results suffice to answer the user question. PLEASE STRICTLY ADHERE TO THE ANSWER FORMAT FOR THE CURRENT QUESTION.\n\n### Observation\nThere is no observation for this terminal action, since it indicates the completion of the task and end of the interaction.\n\n### Syntax and Parameters (MARKDOWN Format)\nGenerateAnswer(answer: Any)\n- answer: Any, required. The final answer to the user question. Please adhere to the answer format for the current question.\n\n### Use Cases\n\n#### Case 1\nThe answer to the user question is 42.\n\n[Action]: GenerateAnswer(answer=42)\n\n\n#### Case 2\nThe answer to the user question is a list of strings: ['Results', 'Discussion'].\n\n[Action]: GenerateAnswer(answer=['Results', 'Discussion'])\n\n\n\n--------\n\n## Interaction Framework\n\nThe main interaction procedure proceeds like this:\n\n----\n\n[Thought]: ... reasoning process, why to take this action ...\n[Action]: ... which action to take, please strictly conform to the action specification ...\n[Observation]: ... execution results or error message after taking the action ...\n\n... # more interleaved triplets of ([Thought], [Action], [Observation])\n\n[Thought]: ... reasoning process to produce the final answer ...\n[Action]: ... the terminate action `GenerateAnswer`, there is no further observation ...\n\n----\n\nIn general, the main interaction loop consists of an interleaved of triplets ([Thought], [Action], [Observation]), except the last `GenerateAnswer` action which does not have \"[Observation]:\". You need to predict the \"[Thought]: ...\" followed by the \"[Action]: ...\" for each turn, and we will execute your action in the environment and provide the \"[Observation]: ...\" for the previous action.\n\n--------\n\n## Suggestions or Hints for Agent Interaction\n\n1. Explore multiple retrieval strategies. For example:\n- Experiment with different (table, column) pairs to extract diverse types of information.\n- Query various embedding models (collections) to find the most relevant context.\n\n2. Combine both structured and unstructured data. Concretely:\n- Use SQL queries to retrieve precise facts and structured data. Pay special attention to morphological variations in cell values.\n- Perform similarity searches in the vectorstore to capture semantic relationships and hidden insights.\n\n3. Iterate and refine:\n- If SQL execution result is not satisfactory, try alternative SQL queries to explore the database content carefully.\n- If the vector-based neural retrieval is insufficient, try alternative approaches or parameter settings.\n- Use your findings to validate or enrich the final response.\n\n4. Ensure confidence. That is, only make a final decision when you are confident that the retrieved information fully addresses the userâ€™s query.\n\n\nRemember that, for each question, you only have 20 interaction turns at most. Now, let's start!\n"}
{"role": "user", "content": "[Question]: In the proxy task of exploring lexical semantics in the paper \"Fantastic Semantics and Where to Find Them: Investigating Which Layers of Generative LLMs Reflect Lexical Semantics\", how many instances are there in total?\n[Answer Format]: Your answer should be a python int.\n[Anchor PDF]: 'f0d961d2-d190-5de7-874b-91a05aa91921'\n[Database Schema]: The database schema for /home/htc981/workspace/project/HNS-RAG/data/database/ai_research/ai_research.sql is as follows:\n/* database ai_research: This database contains information about AI research papers. Each PDF file is represented or parsed via different views, e.g., pages, sections, figures, tables, and references. We also extract the concrete content inside each concrete element via OCR.\n*/\n/* table metadata: This table stores metadata about each paper, including the number of pages, paper path and paper id.\n*/\nCREATE TABLE IF NOT EXISTS metadata (\n\tpaper_id UUID, -- A unique identifier for this paper.\n\ttitle VARCHAR, -- The title of this paper.\n\tabstract VARCHAR, -- The abstract of this paper.\n\tnum_pages INTEGER, -- The number of pages in this paper.\n\tconference_full VARCHAR, -- The full name of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tconference_abbreviation VARCHAR, -- The abbreviation of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tpub_year INTEGER, -- The year when this paper was published.\n\tvolume VARCHAR, -- The volume of the conference where this paper was published. e.g. findings.\n\tdownload_url VARCHAR, -- The url from which the paper can be downloaded.\n\tbibtex VARCHAR, -- The bibtex of this paper.\n\tauthors VARCHAR[], -- The full names of authors of this paper.\n\tpdf_path VARCHAR, -- The path to the PDF file of this paper.\n\ttldr VARCHAR, -- A brief summary of the paper's main idea or findings generated by LLM based on title and abstract.\n\ttags VARCHAR[], -- Keywords representing the paper's topics, methods, or applications generated by LLM based on title and abstract.,\n\tPRIMARY KEY (paper_id)\n);\n/* table pages: This table stores information of the pages in the papers, including their content, size and their order within the paper. The pagesare extracted using PyMuPDF.\n*/\nCREATE TABLE IF NOT EXISTS pages (\n\tpage_id UUID, -- A unique identifier for each page.\n\tpage_number INTEGER, -- The page number in the current paper, starting from 1.\n\tpage_width INTEGER, -- The pixel width of the current page.\n\tpage_height INTEGER, -- The pixel height of the current page.\n\tpage_content VARCHAR, -- The content of the page.\n\tpage_summary VARCHAR, -- A brief summary of the page content, generated by LLM, focusing on key information and describing the page content.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (page_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table images: This table stores the information about images in each paper. The images are extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS images (\n\timage_id UUID, -- The unique identifier of the image.\n\timage_caption VARCHAR, -- The caption of this image, \"\" if it doesn't have one.\n\timage_summary VARCHAR, -- A brief summary of the image, generated by LLM, focusing on key information and describing the image.\n\tbounding_box INTEGER[4], -- The bounding box of the figure in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height which are used to determine the shape of the rectangle.\n\tordinal INTEGER, -- Each figure is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (image_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table chunks: This table contains the information of each chunk of text (chunk size = 512 tokens with no overlapping) in each page of the paper. A chunk is a sub-text that is extracted from the main text using langchain, such as a sentence or a paragraph.\n*/\nCREATE TABLE IF NOT EXISTS chunks (\n\tchunk_id UUID, -- A unique identifier for each chunk of text.\n\ttext_content VARCHAR, -- The text content of the current chunk.\n\tordinal INTEGER, -- Each chunk is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (chunk_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table tables: This table stores information about tables extracted from pages using MinerU, including content (in html format), bounding box and summary of each table generated by LLM.\n*/\nCREATE TABLE IF NOT EXISTS tables (\n\ttable_id UUID, -- A unique identifier for each table.\n\ttable_caption VARCHAR, -- Caption of the table, showing key information of the table.\n\ttable_content VARCHAR, -- The content of the table in html format.\n\ttable_summary VARCHAR, -- A brief summary of the table content generated by LLM, focusing on key information and describing the table content.\n\tbounding_box INTEGER[4], -- The bounding box of the table in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height.\n\tordinal INTEGER, -- Each table is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this table is located.,\n\tPRIMARY KEY (table_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table sections: This table contains the text content of each section in the paper, e.g. `Introduction`, `Experiment`, `Conclusion`, `Reference`. The sections are extracted using PyMuPDF or MinerU.\n*/\nCREATE TABLE IF NOT EXISTS sections (\n\tsection_id UUID, -- A unique identifier for each section of text.\n\tsection_title VARCHAR, -- The title of the current section.\n\tsection_content VARCHAR, -- The text content of the current section.\n\tsection_summary VARCHAR, -- A brief summary of the section content generated by LLM, focusing on key information and describing the section content.\n\tordinal INTEGER, -- Each section is labeled with one distinct integer number in the paper, which starts from 0.\n\tpage_numbers INTEGER[], -- A list of page numbers where current section is located in the relevant paper.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (section_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table equations: This table stores information about equations extracted from pages using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS equations (\n\tequation_id UUID, -- A unique identifier for each equation.\n\tequation_content VARCHAR, -- Content of the equation in latex format.\n\tordinal INTEGER, -- Each equation is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the paper ID in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the page ID in the `pages` table where this equation is located.,\n\tPRIMARY KEY (equation_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table reference: This table stores information about references extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS reference (\n\treference_id UUID, -- A unique identifier for each reference.\n\treference_content VARCHAR, -- Content of the reference.\n\tordinal INTEGER, -- Each reference is labeled with one distinct integer number according to its order in the paper, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this reference is located.,\n\tPRIMARY KEY (reference_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n[Vectorstore Schema]: The vectorstore schema for ai_research is as follows. You can try collections with different encoding models or modalities:\n[\n    {\n        \"collection_name\": \"text_bm25_en\",\n        \"modality\": \"text\",\n        \"embed_type\": \"bm25\",\n        \"embed_model\": \"en\",\n        \"description\": \"This collection is used to store the sparse embeddings generated by the BM25 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric inner-product (IP).\",\n        \"fields\": [\n            {\n                \"name\": \"id\",\n                \"dtype\": \"INT64\",\n                \"is_primary\": true,\n                \"description\": \"The unique id for each encoded text vector in this collection.\"\n            },\n            {\n                \"name\": \"vector\",\n                \"dtype\": \"SPARSE_FLOAT_VECTOR\",\n                \"description\": \"The encoded sparse vector of the text content generated by the BM25 model. Note that, the raw text content can be uniquely identified by the triplet fields below: `table_name`, `column_name`, `primary_key`.\"\n            },\n            {\n                \"name\": \"pdf_id\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The unique id of the PDF file stored in the relational database that the encoded text belongs to. This field can be used to quickly filter the search space.\"\n            },\n            {\n                \"name\": \"page_number\",\n                \"dtype\": \"INT16\",\n                \"description\": \"The page number in the PDF file that the encoded text belongs to (starting from 1). This field can be used to quickly filter the search space. Value -1 means unknown.\"\n            },\n            {\n                \"name\": \"table_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which table in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"column_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which column under `table_name` in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"primary_key\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The primary key value of `table_name` (or which row) in the relational database that the text content belongs to. Note that, the triplet (`table_name`, `column_name`, `primary_key`) can be used to construct a one-to-one mapping between the `text` field in the current vectorstore and the cell entry in the relational database.\"\n            }\n        ]\n    },\n    {\n        \"collection_name\": \"text_sentence_transformers_all_minilm_l6_v2\",\n        \"modality\": \"text\",\n        \"embed_type\": \"sentence_transformers\",\n        \"embed_model\": \"all-MiniLM-L6-v2\",\n        \"description\": \"This collection is used to store the embeddings generated by the all-MiniLM-L6-v2 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric COSINE.\",\n        \"fields\": \"The fields of this collection are similar to the `text_bm25_en` collection.\"\n    }\n]\n\nThe following lists all encodable (table_name, column_name, encode_modality) information from the corresponding DuckDB database, where the encoded vector entries are sourced. Note that, for text modality, we directly encode cell values from the `table_name.column_name`; for image modality, we encode the cropped images for `page_number` in `pdf_id` with bounding boxes from `table_name.column_name`. You can leverage them for filter condition during similarity search:\n[\n    [\n        \"metadata\",\n        \"title\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"abstract\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"bibtex\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"tldr\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_content\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_summary\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_caption\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_summary\",\n        \"text\"\n    ],\n    [\n        \"chunks\",\n        \"text_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_caption\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_summary\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_title\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_content\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_summary\",\n        \"text\"\n    ],\n    [\n        \"equations\",\n        \"equation_content\",\n        \"text\"\n    ],\n    [\n        \"reference\",\n        \"reference_content\",\n        \"text\"\n    ]\n]\n\nHere are the operators that you can use in the filtering condition for the vectorstore:\n{\n    \"operators\": {\n        \"logical\": [\n            {\n                \"symbol\": \"not\",\n                \"example\": \"not expr\",\n                \"description\": \"True if expr is false.\"\n            },\n            {\n                \"symbol\": \"and\",\n                \"example\": \"expr1 and expr2\",\n                \"description\": \"True if both expr1 and expr2 are true.\"\n            },\n            {\n                \"symbol\": \"or\",\n                \"example\": \"expr1 or expr2\",\n                \"description\": \"True if either expr1 or expr2 are true.\"\n            }\n        ],\n        \"binary arithmetic\": [\n            {\n                \"symbol\": \"+\",\n                \"example\": \"a + b\",\n                \"description\": \"Add the two operands.\"\n            },\n            {\n                \"symbol\": \"-\",\n                \"example\": \"a - b\",\n                \"description\": \"Subtract the second operand from the first operand.\"\n            },\n            {\n                \"symbol\": \"*\",\n                \"example\": \"a * b\",\n                \"description\": \"Multiply the two operands.\"\n            },\n            {\n                \"symbol\": \"/\",\n                \"example\": \"a / b\",\n                \"description\": \"Divide the first operand by the second operand.\"\n            },\n            {\n                \"symbol\": \"**\",\n                \"example\": \"a ** b\",\n                \"description\": \"Raise the first operand to the power of the second operand.\"\n            },\n            {\n                \"symbol\": \"%\",\n                \"example\": \"a % b\",\n                \"description\": \"Divide the first operand by the second operand and yield the remainder portion.\"\n            }\n        ],\n        \"relational\": [\n            {\n                \"symbol\": \"<\",\n                \"example\": \"a < b\",\n                \"description\": \"True if a is less than b.\"\n            },\n            {\n                \"symbol\": \">\",\n                \"example\": \"a > b\",\n                \"description\": \"True if a is greater than b.\"\n            },\n            {\n                \"symbol\": \"==\",\n                \"example\": \"a == b\",\n                \"description\": \"True if a is equal to b. Please use **two** equal signs for equality comparison.\"\n            },\n            {\n                \"symbol\": \"!=\",\n                \"example\": \"a != b\",\n                \"description\": \"True if a is not equal to b.\"\n            },\n            {\n                \"symbol\": \"<=\",\n                \"example\": \"a <= b\",\n                \"description\": \"True if a is less than or equal to b.\"\n            },\n            {\n                \"symbol\": \">=\",\n                \"example\": \"a >= b\",\n                \"description\": \"True if a is greater than or equal to b.\"\n            },\n            {\n                \"symbol\": \"in\",\n                \"example\": \"a in [b, c, ...]\",\n                \"description\": \"True if a is equal to any of the values in the list.\"\n            }\n        ],\n        \"array operations\": [\n            {\n                \"symbol\": \"[]\",\n                \"example\": \"bbox[0]\",\n                \"description\": \"This expression gets the first element in array bbox. For example, 'bbox[0] < 50' evaluates to true if the value of bbox[0] is less than 50.\"\n            },\n            {\n                \"symbol\": \"array_contains\",\n                \"example\": \"array_contains(bbox, 100)\",\n                \"description\": \"This expression evaluates to true if array bbox contains element 100.\"\n            },\n            {\n                \"symbol\": \"array_length\",\n                \"example\": \"array_length(int_array) == 4\",\n                \"description\": \"This expression evaluates to true if int_array contains exactly 4 elements.\"\n            }\n        ]\n    },\n    \"use cases\": [\n        {\n            \"example\": \"table_name == 'chunks' and column_name == 'text_content'\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and column_name equal to 'text_content'.\"\n        },\n        {\n            \"example\": \"table_name == 'chunks' and primary_key in ['123', '456', '789']\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and primary_key equal to any of the values in the list ['123', '456', '789'].\"\n        },\n        {\n            \"example\": \"bbox[0] + bbox[2] <= 100 and bbox[1] + bbox[3] <= 300 and pdf_id == '123456' and page_number == 1\",\n            \"description\": \"For image modality, filter results to include only image regions that are entirely within the upper-left quadrant of page 1 in the PDF with ID '123456', assuming the page dimensions are 200 (width) x 600 (height).\"\n        }\n    ]\n}"}
{"role": "assistant", "content": "[Thought]: To find the total number of instances in the proxy task of exploring lexical semantics, I need to locate the relevant section or table in the paper. I will start by querying the `sections` table to find the section that discusses this proxy task.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_id, section_title, section_content FROM sections WHERE ref_paper_id = 'f0d961d2-d190-5de7-874b-91a05aa91921' AND section_title LIKE '%lexical semantics%'\")"}
{"role": "user", "content": "[Observation]: [Warning]: The SQL execution result is empty, please check the SQL first."}
{"role": "assistant", "content": "[Thought]: The section title might not contain the exact phrase \"lexical semantics\". I will try a more general search in the `sections` table to find the relevant section.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_id, section_title, section_content FROM sections WHERE ref_paper_id = 'f0d961d2-d190-5de7-874b-91a05aa91921' AND section_content LIKE '%lexical semantics%'\")"}
{"role": "user", "content": "[Observation]:\n{\"section_id\":\"d031db18-6870-5993-a6d5-d8fe4e77aeae\",\"section_title\":\"Abstract\",\"section_content\":\"Large language models have achieved remarkable success in general language understanding tasks. However, as a family of generative methods with the objective of next token prediction, the semantic evolution with the depth of these models are not fully explored, unlike their predecessors, such as BERT-like architectures. In this paper, we specifcally investigate the bottom-up evolution of lexical semantics for a popular LLM, namely Llama2, by probing its hidden states at the end of each layer using a contextualized word identifcation task. Our experiments show that the representations in lower layers encode lexical semantics, while the higher layers, with weaker semantic induction, are responsible for prediction. This is in contrast to models with discriminative objectives, such as mask language modeling, where the higher layers obtain better lexical semantics. The conclusion is further supported by the monotonic increase in performance via the hidden states for the last meaningless symbols, such as punctuation, in the prompting strategy. Our codes are available at https: \\/\\/github.com\\/RyanLiut\\/LLM_LexSem.\"}\n{\"section_id\":\"3aa48e5b-ed72-5b0b-a624-13c2baa9417a\",\"section_title\":\"1 Introduction\",\"section_content\":\"GPT-like large language models (LLMs) (Brown et al., 2020; Touvron et al., 2023) have recently demonstrated impressive performance on various understanding and generative tasks, shifting from the pretraining-then-fnetuning approach employed by BERT-like models (Zhao et al., 2023). However, existing research (Ethayarajh, 2019) suggests that the contextual representations of GPT-like models exhibit subpar performance in downstream tasks, struggling to fully capture the semantic nuances of words. This discrepancy raises a crucial research question: To what extent and through which layers do LLMs encode lexical semantics?\\nPrevious research on intermediate layer representations in BERT has revealed important linguistic information, including its hierarchy. For instance, BERT encodes surface features at the bottom, syntactic features in the middle, and semantic features at the top (Jawahar et al., 2019). However, contextual representations in LLMs have received less attention due to structural differences and challenges, as illustrated in Figure 1. Firstly, LLMs employ a decoder-only strategy, which restricts their ability to access only preceding context during inference. Consequently, LLMs struggle to differentiate between homonymous meanings of words such as \\\"bank\\\" in the case of \\\"the bank of the river\\\" and \\\"the bank to save money,\\\" due to the shared left context \\\"the\\\". Furthermore, LLMs are trained to predict the next token, resulting in varying degrees of comprehension of historical and predictive contexts across layers (Wang et al., 2023a; Voita et al., 2019). In contrast, BERT focuses on masked word restoration through mask language modeling (MLM), where both understanding and prediction processes are targeted for the same word.\\nIn addition, the extraction of contextual word representations from generative Large Language\\nModels (LLMs) often proves to be more benefcial than those derived from models akin to BERT in certain scenarios. Firstly, as generative LLMs are increasingly recognized for their robustness and prevalence as foundational models (Zhao et al., 2023), we only obtain \\u201cautoregressive embeddings\\u201d without compromising their generative capabilities. Secondly, these LLMs are consistently trained with billions of parameters across expansive webscale datasets, thereby exhibiting a signifcantly greater potential and anticipated superior performance compared to their much lighter counterparts, such as BERT-like models.\\nGiven these observations, we hypothesize that GPT-like LLMs encode lexical semantics in lower layers while making predictions, potentially leading to the forgetting of information related to current tokens in higher layers.1 This hierarchical behavior suggests a dynamic interaction between understanding and prediction in generative LLMs, as indicated by the view of information fow in recent studies (Wang et al., $2023\\\\mathrm{a}$ ; Voita et al., 2019).\\nTo validate our hypothesis, this study delves into the examination of lexical semantics in LLMs by analyzing how the hidden states at each layer refect word meanings. In particular, we investigate the understanding of lexical semantics in the popular open-source LLM, Llama2 (Touvron et al., 2023), utilizing the word in context benchmark (Pilehvar and Camacho-Collados, 2019). We employ various input transformation and prompting strategies to fully utilize the contextual information. The results suggest that lower layers of Llama2 capture lexical semantics, while higher layers prioritize prediction tasks. These fndings offer practical insights into determining which layers of hidden states to utilize as representations of the meaning of the current word in GPT-like LLMs.\"}\n{\"section_id\":\"1d9a8fdb-80f2-5ca5-970d-bb25a8d649be\",\"section_title\":\"3.1 Probing\",\"section_content\":\"We leverage the Word in Context (WiC) dataset as a proxy task for exploring lexical semantics (Pilehvar and Camacho-Collados, 2019)2. This wellstructured benchmark presents a binary classifcation challenge - determining whether identical words convey the same meaning in distinct contexts. Our approach involves utilizing 638 instances from the development set to fne-tune the optimal hyperparameter, and assessing the fnal performance on 1400 instances from test set. We evaluate results based on accuracy and calculate accuracy separately for instances with different parts of speech.\"}\n{\"section_id\":\"db787a32-e0bc-5e3f-9d61-927ba41fcd6f\",\"section_title\":\"4 Results and Analysis\",\"section_content\":\"Table 2 presents the overall performance. Llama2, as a generative model, achieves comparable results to bidirectional and non-regressive BERT models, outperforming non-transformer models like Elmo. This suggests that LLMs have the potential for word-level understanding, even though it is not explicitly trained for this capability. As expected, the prompting strategy achieves the highest accuracy among all the Llama2 variants. This approach incorporates downstream tasks into the generative process during LLM training and has proven to be popular and effective in addressing both intermediate and high-level tasks in the LLM era (Zhao et al., 2023). However, prompting relies on the choice of\\nTable 2: Overall accuracy $(\\\\%)$ on the WiC test set. \\u2020indicates methods without anisotropy removal. The numbers in brackets after the model name indicate the number of layers for achieving the best performance. The index begins at 0, representing the input embedding layer and increases as the model goes deeper. This applies similarly to the remaining indices in the fgures.\\nprompts and may not directly reveal the model\\u2019s internal understanding. On the other hand, our repeat strategy demonstrates comparable performance to prompting and signifcantly outperforms the base version (with a 4.5 advantage gap). This simple yet effective transformation strikes a balance between information accessibility and prompting robustness.\\nIn terms of parts-of-speech, nouns generally exhibit higher accuracy than verbs, as evidenced by a 7.1 advantage gap in Llama2_repeat. We also observe that in the base setting, verbs exhibit significantly lower accuracy, with decreases of 8.1 points compared to nouns. This decline is attributed to the fact that disambiguating verbs requires more context, which is often lacking in real data preceding the verbs. For instance, target verbs positioned at the beginning of sentences, where there is no prior context to aid in disambiguation, account for $19.2\\\\%$ of cases, in contrast to $14.3\\\\%$ for nouns. These observations align with previous studies that have concluded that verbs are more challenging to disambiguate (Barba et al., 2021).\\nEffectiveness of Anisotropy Removal. In Table 2, we compare methods with and without anisotropy removal (marked by \\u2020). The results consistently demonstrate the advantage of methods with anisotropy removal, suggesting that the representation space may collapse into a smaller cone space, as indicated by previous work (Ethayarajh,\\n2019). This also offers a simple and practical approach for calculating similarity in the embedding space.\\nTrends Across Layers. Figure 2 illustrates the layer-wise dynamics in two settings for Llama2 and also BERT_large. We observe non-monotonic trends for Llama2 across layers: both the base and repeat initially increase in lower layers before decreasing in higher layers. Consequently, optimal performance is achieved at lower layers when utilizing the hidden states of the target word as the default choice. This suggests that lower layers in LLMs encode lexical semantics, offering both a practical insight and a pathway for interpreting LLMs. Notice that the performance in the highest layer for LLMs does not lose to the worst (i.e., $50\\\\%$ ), indicating it has still remained word meaning in some extent. Moreover, the trend contrasts with bidirectional BERT_large model, which obtains the best performance in higher layers. This highlights a difference between these two architectures: BERT concentrates on its current word across the layers while Llama2 aims for next token prediction.\\nBalancing Understanding and Prediction. To explore the balance between lexical understanding and predictive capability in Llama2, we computed the accuracy using representations of the previous token before the target (referred to as repeat_prev) in the repeat setting. It is important to note that we opted for the repeat setting instead of the base setting, given that the base setting is constrained by incomplete information access. Furthermore, we conducted a comparison with the prompt setting, as depicted in Figure 3. Despite the fact that the representations do not originate from the correct target word but are anticipated to represent the next word, both repeat_prev and prompt exhibit a monotonic trend and comparable result across the layers. This observation suggests that while the understanding may diminish (as indicated by the inverted-U trend in the repeat setting) as layers go deeper, the predictive ability improves.\"}\n{\"section_id\":\"955b716c-47ba-5c9c-8b72-608a3381da97\",\"section_title\":\"5 Conclusion\",\"section_content\":\"This study investigates how Llama2\\u2019s layer-wise representations encode lexical semantics using the WiC dataset. Our experiments reveal that optimal performance is achieved at lower layers for generative tasks, while predictive accuracy improves in higher layers. This suggests that Llama2 prioritizes understanding before prediction as information fows from lower to higher layers. These fndings offer practical guidance on extracting representations for lexical semantics tasks in engineering applications. For example, we would opt to utilize representations from the lower layers for lexicalrelated tasks, such as POS tagging and word sense disambiguation. Conversely, those from the higher layers could be employed for prediction-related or generative tasks, including text summarization and dialogue generation. Furthermore, it also sheds light on the interpretability of LLMs from a topdown perspective.\"}\n{\"section_id\":\"95d6c423-8c35-5c8e-aced-56a8c9ac244f\",\"section_title\":\"6 Limitations\",\"section_content\":\"Probing offers a valuable viewpoint on lexical semantics, but it is still unclear what kind of semantics representations are exactly learned. Bridging the gap between dense, high-dimensional vectors from computational models and discrete, lowdimensional concepts from linguistic conventions remains an important issue to consider.\\nAnother pressing issue is the narrow focus on only English and one large language model, namely Llama2. Different languages and models may yield varying effects on lexical semantic estimation. We anticipate that future studies will refne and complement our fndings using a more diverse sample of natural languages and models.\"}\n{\"section_id\":\"5e117463-79dc-5c54-9f5c-1712bc0c6b36\",\"section_title\":\"8 Broader Impact Statement\",\"section_content\":\"Understanding the linguistic knowledge that LLMs have acquired is fundamental for the practical application of generative AI in the real world. This understanding not only enhances the interpretability of these black-box \\u201cGoliaths,\\u201d but also improves the robustness, reliability, and safety of the models. Words carry signifcant linguistic meaning, while the counterpart tokens serve as the smallest computational units for transformers. We believe that exploring the lexical semantics within LLMs is a foundational step in bridging the gap between computational modeling and linguistics, thereby highlighting the benefts of combining both felds.\"}\n\nIn total, 7 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: From the section \"3.1 Probing\", I found that the proxy task uses 638 instances from the development set and 1400 instances from the test set. To get the total number of instances, I need to sum these two numbers.\n[Action]:\nGenerateAnswer(answer=638 + 1400)"}
{"role": "user", "content": "[Observation]: [Error]: Failed to parse the parameters for action GenerateAnswer from the response. malformed node or string on line 1: <ast.BinOp object at 0x7f295108ebf0>."}
{"role": "assistant", "content": "[Thought]: The error indicates that the answer should be a single integer value, not an expression. I will calculate the sum and provide the result directly.\n[Action]:\nGenerateAnswer(answer=2038)"}
{"role": "user", "content": "[Observation]: 2038"}
