{"role": "system", "content": "You are an intelligent agent with expertise in **retrieving useful context from both the DuckDB database and the Milvus vectorstore through SQL execution and similarity search** and **answering user questions**. You will be given a natural language question concerning PDF files, along with the schema of both the database and the vectorstore. Your ultimate goal is to answer the input question with pre-defined answer format. The DuckDB database contains all parsed content of raw PDF files, while the Milvus vectorstore encodes specific column cells from the database as vectors. You can predict executable actions, interact with the hybrid environment (including database and vectorstore) across multiple turns, and retrieve necessary context until you are confident in resolving the question.\n\n--------\n\n## Task Description\nEach task consists of the following parts:\n\n[Question]: User question regarding the PDF, e.g., Is there any ...?\n[Answer Format]: it describes the format of the final answer, e.g., the answer is \"Yes\" or \"No\" without punctuation.\n[Anchor PDF]: Optional, a python str or list, the PDF(s) you must use to answer the question.\n[Reference PDF]: Optional, a python str or list, the PDF(s) you may use to answer the question.\n[Conference]: Optional, a python str or list, the conference(s) and year(s) of the relevant papers for retrieval.\n[Database Schema]: A detailed serialized schema of the DuckDB database for reference when generating SQL queries. It includes 1) tables, 2) columns and their data types, 3) descriptions for these schema items, and 4) primary key and foreign key constraints.\n[Vectorstore Schema]: A detailed serialized schema of the Milvus vectorstore for reference when generating executable retrieval actions with specific parameters. It includes 1) collections, 2) fields, 3) encodable (table, column) pairs in the relational database where the vectorized content originates, and 4) grammar for valid filter rules.\n\n\n--------\n\n## Action and Observation Space\nAll allowable action types include ['RetrieveFromDatabase', 'ClassicRetrieve', 'GenerateAnswer']. Here is the detailed specification in MARKDOWN format:\n\n### Action Type\nRetrieveFromDatabase\n\n### Description\nGenerate an SQL query to retrieve the desired information from the DuckDB database. Please refer to the concrete database schema to produce a valid and executable SQL.\n\n### Observation\nThe observation space is the execution result of the SQL query. You do not need to worry about the actual execution, we will perform it for you. If the SQL failed to execute, we will return the error message. Extremely long SQL output will be truncated.\n\n### Syntax and Parameters (MARKDOWN Format)\nRetrieveFromDatabase(sql: str)\n- sql: str, required. The concrete DuckDB SQL query to execute and retrieve results.\n\n### Use Cases\n\n#### Case 1\nGet the abstract of the paper with paper_id '12345678' from the metadata table in the DuckDB database.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT abstract FROM metadata WHERE paper_id = '12345678';\")\n\n\n#### Case 2\nFind which page in the paper with paper_id '12345678' contains Figure 3.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT pages.page_number FROM images JOIN pages JOIN metadata ON images.ref_page_id = pages.page_id AND pages.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '12345678' AND images.image_caption LIKE '%Figure 3%';\")\n\n\n----\n\n### Action Type\nClassicRetrieve\n\n### Description\nGiven a query text, retrieve relevant context from the Milvus vectorstore.\n\n### Observation\nThe observation space is the retrieved top-ranked entries from the Milvus vectorstore based on queries.\n\n### Syntax and Parameters (MARKDOWN Format)\nClassicRetrieve(query: str, limit: int = 5)\n- query: str, required. The query text will be encoded and used to search for relevant context. You can rephrase the original user question to obtain a more clear and structured query requirement.\n- limit: int, optional, default to 5. The number of top-ranked context to retrieve. Please set it to a positive integer to limit the number of returned results. Extremely large limit values may be truncated.\n\n### Use Cases\n\n#### Case 1\nRetrieve top 5 pieces about a certain topic.\n\n[Action]: ClassicRetrieve(query='Is there any work about the topic structured RAG?')\n\n\n#### Case 2\nRetrieve detailed information about the learning rate for training the ResNet model. The top 4 most relevant entries will be returned based on the query.\n\n[Action]: ClassicRetrieve(query=\"What's the learning rate for training the ResNet model?\", limit=4)\n\n\n----\n\n### Action Type\nGenerateAnswer\n\n### Description\nWhen you take this action, the retrieved results suffice to answer the user question. PLEASE STRICTLY ADHERE TO THE ANSWER FORMAT FOR THE CURRENT QUESTION.\n\n### Observation\nThere is no observation for this terminal action, since it indicates the completion of the task and end of the interaction.\n\n### Syntax and Parameters (MARKDOWN Format)\nGenerateAnswer(answer: Any)\n- answer: Any, required. The final answer to the user question. Please adhere to the answer format for the current question.\n\n### Use Cases\n\n#### Case 1\nThe answer to the user question is 42.\n\n[Action]: GenerateAnswer(answer=42)\n\n\n#### Case 2\nThe answer to the user question is a list of strings: ['Results', 'Discussion'].\n\n[Action]: GenerateAnswer(answer=['Results', 'Discussion'])\n\n\n\n--------\n\n## Interaction Framework\n\nThe main interaction procedure proceeds like this:\n\n----\n\n[Thought]: ... reasoning process, why to take this action ...\n[Action]: ... which action to take, please strictly conform to the action specification ...\n[Observation]: ... execution results or error message after taking the action ...\n\n... # more interleaved triplets of ([Thought], [Action], [Observation])\n\n[Thought]: ... reasoning process to produce the final answer ...\n[Action]: ... the terminate action `GenerateAnswer`, there is no further observation ...\n\n----\n\nIn general, the main interaction loop consists of an interleaved of triplets ([Thought], [Action], [Observation]), except the last `GenerateAnswer` action which does not have \"[Observation]:\". You need to predict the \"[Thought]: ...\" followed by the \"[Action]: ...\" for each turn, and we will execute your action in the environment and provide the \"[Observation]: ...\" for the previous action.\n\n--------\n\n## Suggestions or Hints for Agent Interaction\n\n1. Explore multiple retrieval strategies. For example:\n- Experiment with different (table, column) pairs to extract diverse types of information.\n- Query various embedding models (collections) to find the most relevant context.\n\n2. Combine both structured and unstructured data. Concretely:\n- Use SQL queries to retrieve precise facts and structured data. Pay special attention to morphological variations in cell values.\n- Perform similarity searches in the vectorstore to capture semantic relationships and hidden insights.\n\n3. Iterate and refine:\n- If SQL execution result is not satisfactory, try alternative SQL queries to explore the database content carefully.\n- If the vector-based neural retrieval is insufficient, try alternative approaches or parameter settings.\n- Use your findings to validate or enrich the final response.\n\n4. Ensure confidence. That is, only make a final decision when you are confident that the retrieved information fully addresses the userâ€™s query.\n\n\nRemember that, for each question, you only have 20 interaction turns at most. Now, let's start!\n"}
{"role": "user", "content": "[Question]: Which operation on task vectors is employed in the paper named \"Towards Safer Large Language Models through Machine Unlearning\"? Then what's other operations that can be performed on task vectors and their functions according to the paper where this technique is proposed?\n[Answer Format]: Your answer should be a single string about the operations used in the two papers.\n[Anchor PDF]: 'e1e05ea5-d527-5a3c-9e2b-e100a396b97f'\n[Database Schema]: The database schema for /home/htc981/workspace/project/HNS-RAG/data/database/ai_research/ai_research.sql is as follows:\n/* database ai_research: This database contains information about AI research papers. Each PDF file is represented or parsed via different views, e.g., pages, sections, figures, tables, and references. We also extract the concrete content inside each concrete element via OCR.\n*/\n/* table metadata: This table stores metadata about each paper, including the number of pages, paper path and paper id.\n*/\nCREATE TABLE IF NOT EXISTS metadata (\n\tpaper_id UUID, -- A unique identifier for this paper.\n\ttitle VARCHAR, -- The title of this paper.\n\tabstract VARCHAR, -- The abstract of this paper.\n\tnum_pages INTEGER, -- The number of pages in this paper.\n\tconference_full VARCHAR, -- The full name of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tconference_abbreviation VARCHAR, -- The abbreviation of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tpub_year INTEGER, -- The year when this paper was published.\n\tvolume VARCHAR, -- The volume of the conference where this paper was published. e.g. findings.\n\tdownload_url VARCHAR, -- The url from which the paper can be downloaded.\n\tbibtex VARCHAR, -- The bibtex of this paper.\n\tauthors VARCHAR[], -- The full names of authors of this paper.\n\tpdf_path VARCHAR, -- The path to the PDF file of this paper.\n\ttldr VARCHAR, -- A brief summary of the paper's main idea or findings generated by LLM based on title and abstract.\n\ttags VARCHAR[], -- Keywords representing the paper's topics, methods, or applications generated by LLM based on title and abstract.,\n\tPRIMARY KEY (paper_id)\n);\n/* table pages: This table stores information of the pages in the papers, including their content, size and their order within the paper. The pagesare extracted using PyMuPDF.\n*/\nCREATE TABLE IF NOT EXISTS pages (\n\tpage_id UUID, -- A unique identifier for each page.\n\tpage_number INTEGER, -- The page number in the current paper, starting from 1.\n\tpage_width INTEGER, -- The pixel width of the current page.\n\tpage_height INTEGER, -- The pixel height of the current page.\n\tpage_content VARCHAR, -- The content of the page.\n\tpage_summary VARCHAR, -- A brief summary of the page content, generated by LLM, focusing on key information and describing the page content.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (page_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table images: This table stores the information about images in each paper. The images are extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS images (\n\timage_id UUID, -- The unique identifier of the image.\n\timage_caption VARCHAR, -- The caption of this image, \"\" if it doesn't have one.\n\timage_summary VARCHAR, -- A brief summary of the image, generated by LLM, focusing on key information and describing the image.\n\tbounding_box INTEGER[4], -- The bounding box of the figure in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height which are used to determine the shape of the rectangle.\n\tordinal INTEGER, -- Each figure is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (image_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table chunks: This table contains the information of each chunk of text (chunk size = 512 tokens with no overlapping) in each page of the paper. A chunk is a sub-text that is extracted from the main text using langchain, such as a sentence or a paragraph.\n*/\nCREATE TABLE IF NOT EXISTS chunks (\n\tchunk_id UUID, -- A unique identifier for each chunk of text.\n\ttext_content VARCHAR, -- The text content of the current chunk.\n\tordinal INTEGER, -- Each chunk is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (chunk_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table tables: This table stores information about tables extracted from pages using MinerU, including content (in html format), bounding box and summary of each table generated by LLM.\n*/\nCREATE TABLE IF NOT EXISTS tables (\n\ttable_id UUID, -- A unique identifier for each table.\n\ttable_caption VARCHAR, -- Caption of the table, showing key information of the table.\n\ttable_content VARCHAR, -- The content of the table in html format.\n\ttable_summary VARCHAR, -- A brief summary of the table content generated by LLM, focusing on key information and describing the table content.\n\tbounding_box INTEGER[4], -- The bounding box of the table in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height.\n\tordinal INTEGER, -- Each table is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this table is located.,\n\tPRIMARY KEY (table_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table sections: This table contains the text content of each section in the paper, e.g. `Introduction`, `Experiment`, `Conclusion`, `Reference`. The sections are extracted using PyMuPDF or MinerU.\n*/\nCREATE TABLE IF NOT EXISTS sections (\n\tsection_id UUID, -- A unique identifier for each section of text.\n\tsection_title VARCHAR, -- The title of the current section.\n\tsection_content VARCHAR, -- The text content of the current section.\n\tsection_summary VARCHAR, -- A brief summary of the section content generated by LLM, focusing on key information and describing the section content.\n\tordinal INTEGER, -- Each section is labeled with one distinct integer number in the paper, which starts from 0.\n\tpage_numbers INTEGER[], -- A list of page numbers where current section is located in the relevant paper.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (section_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table equations: This table stores information about equations extracted from pages using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS equations (\n\tequation_id UUID, -- A unique identifier for each equation.\n\tequation_content VARCHAR, -- Content of the equation in latex format.\n\tordinal INTEGER, -- Each equation is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the paper ID in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the page ID in the `pages` table where this equation is located.,\n\tPRIMARY KEY (equation_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table reference: This table stores information about references extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS reference (\n\treference_id UUID, -- A unique identifier for each reference.\n\treference_content VARCHAR, -- Content of the reference.\n\tordinal INTEGER, -- Each reference is labeled with one distinct integer number according to its order in the paper, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this reference is located.,\n\tPRIMARY KEY (reference_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n[Vectorstore Schema]: The vectorstore schema for ai_research is as follows. You can try collections with different encoding models or modalities:\n[\n    {\n        \"collection_name\": \"text_bm25_en\",\n        \"modality\": \"text\",\n        \"embed_type\": \"bm25\",\n        \"embed_model\": \"en\",\n        \"description\": \"This collection is used to store the sparse embeddings generated by the BM25 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric inner-product (IP).\",\n        \"fields\": [\n            {\n                \"name\": \"id\",\n                \"dtype\": \"INT64\",\n                \"is_primary\": true,\n                \"description\": \"The unique id for each encoded text vector in this collection.\"\n            },\n            {\n                \"name\": \"vector\",\n                \"dtype\": \"SPARSE_FLOAT_VECTOR\",\n                \"description\": \"The encoded sparse vector of the text content generated by the BM25 model. Note that, the raw text content can be uniquely identified by the triplet fields below: `table_name`, `column_name`, `primary_key`.\"\n            },\n            {\n                \"name\": \"pdf_id\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The unique id of the PDF file stored in the relational database that the encoded text belongs to. This field can be used to quickly filter the search space.\"\n            },\n            {\n                \"name\": \"page_number\",\n                \"dtype\": \"INT16\",\n                \"description\": \"The page number in the PDF file that the encoded text belongs to (starting from 1). This field can be used to quickly filter the search space. Value -1 means unknown.\"\n            },\n            {\n                \"name\": \"table_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which table in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"column_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which column under `table_name` in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"primary_key\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The primary key value of `table_name` (or which row) in the relational database that the text content belongs to. Note that, the triplet (`table_name`, `column_name`, `primary_key`) can be used to construct a one-to-one mapping between the `text` field in the current vectorstore and the cell entry in the relational database.\"\n            }\n        ]\n    },\n    {\n        \"collection_name\": \"text_sentence_transformers_all_minilm_l6_v2\",\n        \"modality\": \"text\",\n        \"embed_type\": \"sentence_transformers\",\n        \"embed_model\": \"all-MiniLM-L6-v2\",\n        \"description\": \"This collection is used to store the embeddings generated by the all-MiniLM-L6-v2 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric COSINE.\",\n        \"fields\": \"The fields of this collection are similar to the `text_bm25_en` collection.\"\n    }\n]\n\nThe following lists all encodable (table_name, column_name, encode_modality) information from the corresponding DuckDB database, where the encoded vector entries are sourced. Note that, for text modality, we directly encode cell values from the `table_name.column_name`; for image modality, we encode the cropped images for `page_number` in `pdf_id` with bounding boxes from `table_name.column_name`. You can leverage them for filter condition during similarity search:\n[\n    [\n        \"metadata\",\n        \"title\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"abstract\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"bibtex\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"tldr\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_content\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_summary\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_caption\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_summary\",\n        \"text\"\n    ],\n    [\n        \"chunks\",\n        \"text_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_caption\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_summary\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_title\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_content\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_summary\",\n        \"text\"\n    ],\n    [\n        \"equations\",\n        \"equation_content\",\n        \"text\"\n    ],\n    [\n        \"reference\",\n        \"reference_content\",\n        \"text\"\n    ]\n]\n\nHere are the operators that you can use in the filtering condition for the vectorstore:\n{\n    \"operators\": {\n        \"logical\": [\n            {\n                \"symbol\": \"not\",\n                \"example\": \"not expr\",\n                \"description\": \"True if expr is false.\"\n            },\n            {\n                \"symbol\": \"and\",\n                \"example\": \"expr1 and expr2\",\n                \"description\": \"True if both expr1 and expr2 are true.\"\n            },\n            {\n                \"symbol\": \"or\",\n                \"example\": \"expr1 or expr2\",\n                \"description\": \"True if either expr1 or expr2 are true.\"\n            }\n        ],\n        \"binary arithmetic\": [\n            {\n                \"symbol\": \"+\",\n                \"example\": \"a + b\",\n                \"description\": \"Add the two operands.\"\n            },\n            {\n                \"symbol\": \"-\",\n                \"example\": \"a - b\",\n                \"description\": \"Subtract the second operand from the first operand.\"\n            },\n            {\n                \"symbol\": \"*\",\n                \"example\": \"a * b\",\n                \"description\": \"Multiply the two operands.\"\n            },\n            {\n                \"symbol\": \"/\",\n                \"example\": \"a / b\",\n                \"description\": \"Divide the first operand by the second operand.\"\n            },\n            {\n                \"symbol\": \"**\",\n                \"example\": \"a ** b\",\n                \"description\": \"Raise the first operand to the power of the second operand.\"\n            },\n            {\n                \"symbol\": \"%\",\n                \"example\": \"a % b\",\n                \"description\": \"Divide the first operand by the second operand and yield the remainder portion.\"\n            }\n        ],\n        \"relational\": [\n            {\n                \"symbol\": \"<\",\n                \"example\": \"a < b\",\n                \"description\": \"True if a is less than b.\"\n            },\n            {\n                \"symbol\": \">\",\n                \"example\": \"a > b\",\n                \"description\": \"True if a is greater than b.\"\n            },\n            {\n                \"symbol\": \"==\",\n                \"example\": \"a == b\",\n                \"description\": \"True if a is equal to b. Please use **two** equal signs for equality comparison.\"\n            },\n            {\n                \"symbol\": \"!=\",\n                \"example\": \"a != b\",\n                \"description\": \"True if a is not equal to b.\"\n            },\n            {\n                \"symbol\": \"<=\",\n                \"example\": \"a <= b\",\n                \"description\": \"True if a is less than or equal to b.\"\n            },\n            {\n                \"symbol\": \">=\",\n                \"example\": \"a >= b\",\n                \"description\": \"True if a is greater than or equal to b.\"\n            },\n            {\n                \"symbol\": \"in\",\n                \"example\": \"a in [b, c, ...]\",\n                \"description\": \"True if a is equal to any of the values in the list.\"\n            }\n        ],\n        \"array operations\": [\n            {\n                \"symbol\": \"[]\",\n                \"example\": \"bbox[0]\",\n                \"description\": \"This expression gets the first element in array bbox. For example, 'bbox[0] < 50' evaluates to true if the value of bbox[0] is less than 50.\"\n            },\n            {\n                \"symbol\": \"array_contains\",\n                \"example\": \"array_contains(bbox, 100)\",\n                \"description\": \"This expression evaluates to true if array bbox contains element 100.\"\n            },\n            {\n                \"symbol\": \"array_length\",\n                \"example\": \"array_length(int_array) == 4\",\n                \"description\": \"This expression evaluates to true if int_array contains exactly 4 elements.\"\n            }\n        ]\n    },\n    \"use cases\": [\n        {\n            \"example\": \"table_name == 'chunks' and column_name == 'text_content'\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and column_name equal to 'text_content'.\"\n        },\n        {\n            \"example\": \"table_name == 'chunks' and primary_key in ['123', '456', '789']\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and primary_key equal to any of the values in the list ['123', '456', '789'].\"\n        },\n        {\n            \"example\": \"bbox[0] + bbox[2] <= 100 and bbox[1] + bbox[3] <= 300 and pdf_id == '123456' and page_number == 1\",\n            \"description\": \"For image modality, filter results to include only image regions that are entirely within the upper-left quadrant of page 1 in the PDF with ID '123456', assuming the page dimensions are 200 (width) x 600 (height).\"\n        }\n    ]\n}"}
{"role": "assistant", "content": "[Thought]: First, I need to find the paper with the given paper ID and retrieve its title and other relevant information. Then, I will search for the specific operations on task vectors mentioned in the paper.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT paper_id, title, abstract, sections.section_content FROM metadata JOIN sections ON metadata.paper_id = sections.ref_paper_id WHERE metadata.paper_id = 'e1e05ea5-d527-5a3c-9e2b-e100a396b97f' AND sections.section_title IN ('Introduction', 'Method', 'Related Work');\")"}
{"role": "user", "content": "[Observation]: [Warning]: The SQL execution result is empty, please check the SQL first."}
{"role": "assistant", "content": "[Thought]: The SQL query did not return any results, which might be due to the section titles not matching exactly. I will try a more flexible query to retrieve the relevant sections.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT paper_id, title, abstract, sections.section_title, sections.section_content FROM metadata JOIN sections ON metadata.paper_id = sections.ref_paper_id WHERE metadata.paper_id = 'e1e05ea5-d527-5a3c-9e2b-e100a396b97f';\")"}
{"role": "user", "content": "[Observation]:\n{\"paper_id\":\"e1e05ea5-d527-5a3c-9e2b-e100a396b97f\",\"title\":\"Towards Safer Large Language Models through Machine Unlearning\",\"abstract\":\"The rapid advancement of Large Language Models (LLMs) has demonstrated their vast potential across various domains, attributed to their extensive pretraining knowledge and exceptional generalizability. However, LLMs often encounter challenges in generating harmful content when faced with problematic prompts. To address this problem, existing work attempted to implement a gradient ascent based approach to prevent LLMs from producing harmful output. While these methods can be effective, they frequently impact the model utility in responding to normal prompts. To address this gap, we introduce Selective Knowledge negation Unlearning (SKU), a novel unlearning framework for LLMs, designed to eliminate harmful knowledge while preserving utility on normal prompts. Specifically, SKU is consisted of two stages: harmful knowledge acquisition stage and knowledge negation stage. The first stage aims to identify and acquire harmful knowledge within the model, whereas the second is dedicated to remove this knowledge. SKU selectively isolates and removes harmful knowledge in model parameters, ensuring the model\\u2019s performance remains robust on normal prompts. Our experiments conducted across various LLM architectures demonstrate that SKU identifies a good balance point between removing harmful information and preserving utility.\",\"section_title\":\"Towards Safer Large Language Models through Machine Unlearning\",\"section_content\":\"Zheyuan $\\\\mathrm{\\\\bfLiu^{1}}$ , Guangyao $\\\\mathbf{Dou^{2}}$ , Zhaoxuan Tan1, Yijun Tian1, and Meng Jiang1\\n1University of Notre Dame 2University of Pennsylvania {zliu29, ztan3, yijun.tian, mjiang2}@nd.edu, gydou@seas.upenn.edu\"}\n{\"paper_id\":\"e1e05ea5-d527-5a3c-9e2b-e100a396b97f\",\"title\":\"Towards Safer Large Language Models through Machine Unlearning\",\"abstract\":\"The rapid advancement of Large Language Models (LLMs) has demonstrated their vast potential across various domains, attributed to their extensive pretraining knowledge and exceptional generalizability. However, LLMs often encounter challenges in generating harmful content when faced with problematic prompts. To address this problem, existing work attempted to implement a gradient ascent based approach to prevent LLMs from producing harmful output. While these methods can be effective, they frequently impact the model utility in responding to normal prompts. To address this gap, we introduce Selective Knowledge negation Unlearning (SKU), a novel unlearning framework for LLMs, designed to eliminate harmful knowledge while preserving utility on normal prompts. Specifically, SKU is consisted of two stages: harmful knowledge acquisition stage and knowledge negation stage. The first stage aims to identify and acquire harmful knowledge within the model, whereas the second is dedicated to remove this knowledge. SKU selectively isolates and removes harmful knowledge in model parameters, ensuring the model\\u2019s performance remains robust on normal prompts. Our experiments conducted across various LLM architectures demonstrate that SKU identifies a good balance point between removing harmful information and preserving utility.\",\"section_title\":\"Abstract\",\"section_content\":\"The rapid advancement of Large Language Models (LLMs) has demonstrated their vast potential across various domains, attributed to their extensive pretraining knowledge and exceptional generalizability. However, LLMs often encounter challenges in generating harmful content when faced with problematic prompts. To address this problem, existing work attempted to implement a gradient ascent based approach to prevent LLMs from producing harmful output. While these methods can be effective, they frequently impact the model utility in responding to normal prompts. To address this gap, we introduce Selective Knowledge negation Unlearning (SKU), a novel unlearning framework for LLMs, designed to eliminate harmful knowledge while preserving utility on normal prompts. Specifcally, SKU is consisted of two stages: harmful knowledge acquisition stage and knowledge negation stage. The frst stage aims to identify and acquire harmful knowledge within the model, whereas the second is dedicated to remove this knowledge. SKU selectively isolates and removes harmful knowledge in model parameters, ensuring the model\\u2019s performance remains robust on normal prompts. Our experiments conducted across various LLM architectures demonstrate that SKU identifes a good balance point between removing harmful information and preserving utility. 1 2\"}\n{\"paper_id\":\"e1e05ea5-d527-5a3c-9e2b-e100a396b97f\",\"title\":\"Towards Safer Large Language Models through Machine Unlearning\",\"abstract\":\"The rapid advancement of Large Language Models (LLMs) has demonstrated their vast potential across various domains, attributed to their extensive pretraining knowledge and exceptional generalizability. However, LLMs often encounter challenges in generating harmful content when faced with problematic prompts. To address this problem, existing work attempted to implement a gradient ascent based approach to prevent LLMs from producing harmful output. While these methods can be effective, they frequently impact the model utility in responding to normal prompts. To address this gap, we introduce Selective Knowledge negation Unlearning (SKU), a novel unlearning framework for LLMs, designed to eliminate harmful knowledge while preserving utility on normal prompts. Specifically, SKU is consisted of two stages: harmful knowledge acquisition stage and knowledge negation stage. The first stage aims to identify and acquire harmful knowledge within the model, whereas the second is dedicated to remove this knowledge. SKU selectively isolates and removes harmful knowledge in model parameters, ensuring the model\\u2019s performance remains robust on normal prompts. Our experiments conducted across various LLM architectures demonstrate that SKU identifies a good balance point between removing harmful information and preserving utility.\",\"section_title\":\"1 Introduction\",\"section_content\":\"Large Language Models (LLMs) (Brown et al., 2020; Chowdhery et al., 2023; Touvron et al., 2023; Qin et al., 2023) have demonstrated their exceptional ability across various AI applications (Ouyang et al., 2022; Kojima et al., 2022; Radford et al., 2019; Lewkowycz et al., 2022; Roziere et al., 2023; Liu et al., 2024; Tan et al., 2024) as LLMs\\nFigure 1: Comparison of SKU with previous gradientbased approach and pretrained LLM (i.e. LLAMA2-7B) on responding to harmful, normal prompts.\\nhave been trained and fne-tuned on vast amount of textual data (Hoffmann et al., 2022; Webson and Pavlick, 2021; Min et al., 2022; Liang et al., 2022). However, this excellent learning ability of LLMs causes undesired outputs with harmful prompts. Hence, it is imperative to ensure the LLMs generate safe outputs that align with policy regulations and human values. However, the current approach of reinforcement learning from human feedback (RLHF) is computationally expensive, and can be problematic with misaligned evaluators (Casper et al., 2023). An alternative strategy of RLHF is to use Machine Unlearning (Xu et al., 2023; Bourtoule et al., 2021) (MU) to \\u201cforget\\u201d samples that represent those undesirable behaviors during the pre-training process. Compared to RLHF, the MU approach is much more computationally effcient and easier to implement by practitioners.\\nDifferent from the traditional unlearning in classifcation tasks (Chundawat et al., 2023; Jia et al., 2023; Liu et al., 2023), where the goal is to eliminate samples and their infuence from both the dataset and trained model, unlearning samples that lead to those unwanted behaviors on LLMs is rather complicated due to its large quantity of training corpus. Besides, the model performance on normal prompts is easily deteriorated by the unlearning process (Yao et al., 2023), which means that LLMs may have excellent performance on unlearning unwanted samples but come up with poor performance on normal prompts, as shown in Figure 1. In particular, pretrained LLMs failed to avoid responding harmful prompts while previous gradient based approaches have diffculty of answering normal prompts.\\n\\nTo address this challenge, we present Selective Knowledge negation Unlearning (SKU), a novel two-stage approach for assisting LLMs to effciently unlearn harmful knowledge while maintaining the performance on normal prompts. Our method is structured in two stages: harmful knowledge acquisition stage and knowledge negation stage. In particular, the knowledge negation stage is motivated by the negation operation of task vectors (Ilharco et al., 2022a), where negating task vectors can effectively mitigate undesirable behaviors. Hence, the preliminary stage, harmful knowledge acquisition stage, is designed to enable original LLMs to assimilate various harmful knowledge from the dataset. This stage consists of three innovative components: a guided distortion module, a random disassociation module and a preservation divergence module.\\nEach of these modules is designed to facilitate the learning of harmful knowledge from distinct angles, which will be negated from the pretrained model. The guided distortion module facilitates the LLMs to acquire harmful knowledge from direct responses. The random disassociation module encourages the learning of diversifed harmful information derived from different harmful promptresponse pairs. Finally, the preservation divergence module focuses on altering the performance divergence between the unlearned LLM and the pretrained original model when responding to normal prompts. Subsequently, in the second knowledge negation stage, the accumulated harmful knowledge from the previous stage is negated from the pretrained model, resulting in a non-harmful LLM that retains satisfactory utility performance. Our main contributions are as follows:\\n1. To the best of our knowledge, this is the frst work of investigating the trade-off between unlearning harmful knowledge and preserving utility in LLMs.\\n2. We propose SKU, a novel two-stage unlearning framework for LLMs, designed to effciently remove harmful knowledge while preserving model utility to normal prompts. The frst stage involves the intentional learning of harmful content through a combination of three novel modules, each targeting different aspects of harmful knowledge. The second stage employs the concept of negation of task vectors to effectively erase this harmful knowledge, resulting in non-harmful LLMs.\\n\\n3. Experiments and ablation studies demonstrate the effectiveness of our proposed framework on unlearning harmfulness and preserve utility performance under various LLMs.\"}\n{\"paper_id\":\"e1e05ea5-d527-5a3c-9e2b-e100a396b97f\",\"title\":\"Towards Safer Large Language Models through Machine Unlearning\",\"abstract\":\"The rapid advancement of Large Language Models (LLMs) has demonstrated their vast potential across various domains, attributed to their extensive pretraining knowledge and exceptional generalizability. However, LLMs often encounter challenges in generating harmful content when faced with problematic prompts. To address this problem, existing work attempted to implement a gradient ascent based approach to prevent LLMs from producing harmful output. While these methods can be effective, they frequently impact the model utility in responding to normal prompts. To address this gap, we introduce Selective Knowledge negation Unlearning (SKU), a novel unlearning framework for LLMs, designed to eliminate harmful knowledge while preserving utility on normal prompts. Specifically, SKU is consisted of two stages: harmful knowledge acquisition stage and knowledge negation stage. The first stage aims to identify and acquire harmful knowledge within the model, whereas the second is dedicated to remove this knowledge. SKU selectively isolates and removes harmful knowledge in model parameters, ensuring the model\\u2019s performance remains robust on normal prompts. Our experiments conducted across various LLM architectures demonstrate that SKU identifies a good balance point between removing harmful information and preserving utility.\",\"section_title\":\"2 Related Work\",\"section_content\":\"\"}\n{\"paper_id\":\"e1e05ea5-d527-5a3c-9e2b-e100a396b97f\",\"title\":\"Towards Safer Large Language Models through Machine Unlearning\",\"abstract\":\"The rapid advancement of Large Language Models (LLMs) has demonstrated their vast potential across various domains, attributed to their extensive pretraining knowledge and exceptional generalizability. However, LLMs often encounter challenges in generating harmful content when faced with problematic prompts. To address this problem, existing work attempted to implement a gradient ascent based approach to prevent LLMs from producing harmful output. While these methods can be effective, they frequently impact the model utility in responding to normal prompts. To address this gap, we introduce Selective Knowledge negation Unlearning (SKU), a novel unlearning framework for LLMs, designed to eliminate harmful knowledge while preserving utility on normal prompts. Specifically, SKU is consisted of two stages: harmful knowledge acquisition stage and knowledge negation stage. The first stage aims to identify and acquire harmful knowledge within the model, whereas the second is dedicated to remove this knowledge. SKU selectively isolates and removes harmful knowledge in model parameters, ensuring the model\\u2019s performance remains robust on normal prompts. Our experiments conducted across various LLM architectures demonstrate that SKU identifies a good balance point between removing harmful information and preserving utility.\",\"section_title\":\"2.1 Large Language Model Unlearning\",\"section_content\":\"The defnition of machine unlearning was frst raised in (Cao and Yang, 2015), which can be separated to two categories: Exact Unlearning and $A p$ - proximate Unlearning. In particular, exact unlearning requires eliminating all information relevant to the removed data so that the unlearned model performs exactly the same as a completely retrained model (Ginart et al., 2019; Bourtoule et al., 2021). On the other hand, approximate unlearning only requires the parameters of the unlearned model to be similar to a retrained model from scratch (Guo et al., 2020; Sekhari et al., 2021; Liu et al., 2023; Chien et al., 2022; Pan et al., 2023; Guo et al., 2020). However, neither exact unlearning nor approximate unlearning approaches are practically applicable to Large Language Models (LLMs). This limitation is primarily due to the immense computational costs and the extensive volume of training data required for LLMs. Though scarce, few works have explored the LLM unlearning. (Yao et al., 2023) frst defned the setup and goal of unlearning on LLMs, which is to output whitespace on harmful prompts. Furthermore, this paper attempts to unlearn harmful content by using a Gradient Ascent (GA) based method, which degrades its performance on normal prompts. (Chen and Yang, 2023) proposed an effective unlearning framework with unlearning layer on classifcation and generation tasks. (Eldan and Russinovich, 2023) introduced a novel network to unlearn copyrights knowledge contained in LLMs. Until very recently, (Maini et al., 2024) presented a new benchmark that aimed to better evaluate the performance of various methods on a new task of fctitious unlearning.\"}\n{\"paper_id\":\"e1e05ea5-d527-5a3c-9e2b-e100a396b97f\",\"title\":\"Towards Safer Large Language Models through Machine Unlearning\",\"abstract\":\"The rapid advancement of Large Language Models (LLMs) has demonstrated their vast potential across various domains, attributed to their extensive pretraining knowledge and exceptional generalizability. However, LLMs often encounter challenges in generating harmful content when faced with problematic prompts. To address this problem, existing work attempted to implement a gradient ascent based approach to prevent LLMs from producing harmful output. While these methods can be effective, they frequently impact the model utility in responding to normal prompts. To address this gap, we introduce Selective Knowledge negation Unlearning (SKU), a novel unlearning framework for LLMs, designed to eliminate harmful knowledge while preserving utility on normal prompts. Specifically, SKU is consisted of two stages: harmful knowledge acquisition stage and knowledge negation stage. The first stage aims to identify and acquire harmful knowledge within the model, whereas the second is dedicated to remove this knowledge. SKU selectively isolates and removes harmful knowledge in model parameters, ensuring the model\\u2019s performance remains robust on normal prompts. Our experiments conducted across various LLM architectures demonstrate that SKU identifies a good balance point between removing harmful information and preserving utility.\",\"section_title\":\"2.2 Task Vectors\",\"section_content\":\"Another very close related technique to our work is task vectors (Ilharco et al., 2022a), which is inspired by recent work of weight interpolations (Frankle et al., 2020; Wortsman et al., 2022b; Matena and Raffel, 2021; Wortsman et al., 2022a; Ilharco et al., 2022b; Ainsworth et al., 2022) and is designed to boost pre-trained model\\u2019s performance on specifc task. Furthermore, a task vector can be created by taking the difference between the original weights of a pre-trained model and its weights after it has been fne-tuned for a specifc task. Specifcally, task vectors can be obtained via negation and addition, where negation task vectors can decreases performance on a specifc task and adding task vectors can improve the performance on multiple tasks. As it shown in (Ilharco et al., 2022a), task vectors have yielded satisfactory outcomes in generation tasks utilizing T5 models. However, in section 5, we showed that purely fnetuning a LLM and then negating the model is not enough to remove all harmful knowledge from the model. We need more curated fne-tuning strategy to have a better unlearned model.\"}\n{\"paper_id\":\"e1e05ea5-d527-5a3c-9e2b-e100a396b97f\",\"title\":\"Towards Safer Large Language Models through Machine Unlearning\",\"abstract\":\"The rapid advancement of Large Language Models (LLMs) has demonstrated their vast potential across various domains, attributed to their extensive pretraining knowledge and exceptional generalizability. However, LLMs often encounter challenges in generating harmful content when faced with problematic prompts. To address this problem, existing work attempted to implement a gradient ascent based approach to prevent LLMs from producing harmful output. While these methods can be effective, they frequently impact the model utility in responding to normal prompts. To address this gap, we introduce Selective Knowledge negation Unlearning (SKU), a novel unlearning framework for LLMs, designed to eliminate harmful knowledge while preserving utility on normal prompts. Specifically, SKU is consisted of two stages: harmful knowledge acquisition stage and knowledge negation stage. The first stage aims to identify and acquire harmful knowledge within the model, whereas the second is dedicated to remove this knowledge. SKU selectively isolates and removes harmful knowledge in model parameters, ensuring the model\\u2019s performance remains robust on normal prompts. Our experiments conducted across various LLM architectures demonstrate that SKU identifies a good balance point between removing harmful information and preserving utility.\",\"section_title\":\"3 Preliminary\",\"section_content\":\"Let $D=\\\\{(x,y)\\\\}$ , in which $x$ is the text data and $y$ is the corresponding label, to be the complete data that a LLM $\\\\theta_{o}$ was trained on. Let the forget dataset $D_{f}$ to be a set of harmful data we want to forget, and normal dataset $D_{n}$ , be a set of data we will retain. Our ultimate goal is to let the $\\\\theta_{o}$ erase all information from $D_{f}$ while retaining utility performance on $D_{n}$ . In particular, $D_{f}$ consists of a group of harmful prompt-response pairs $(x_{f},\\\\,y_{f})$ , where $x_{f}$ are harmful driven prompts and $y_{f}$ are dangerous and harmful responses that we want $\\\\theta_{o}$ to avoid generating.\\nHowever, since a LLM (i.e. $\\\\theta_{o.}$ ) is trained on a wide range of online dataset, it would be unrealistic to fnd a forget dataset that includes all harmful information. Hence, the harmful prompts $x_{f}$ in $D_{f}$ do not necessary have to belong to the training dataset of $\\\\theta_{o}$ . Similarly, normal dataset $D_{n}$ contains a group of benign prompt-response pairs $(x_{n},y_{n})$ , where $x_{n},y_{n}$ can be any prompts and responses as long as $x_{n},y_{n}\\\\notin D_{f}$ and do not present any harmful texts. Ideally, we would retrain the $\\\\theta_{o}$ by excluding the data from $D_{f}$ , and regard it as the golden baseline. However, this approach is computationally prohibitive, as highlighted in (Yao et al.,\\n2023). In addition, to ensure the generalizability of the unlearning approach, given any unseen harmful prompt $\\\\hat{x y}_{}$ , we want the unlearned model $\\\\theta_{u}$ to generate non-harmful responses as well.\"}\n{\"paper_id\":\"e1e05ea5-d527-5a3c-9e2b-e100a396b97f\",\"title\":\"Towards Safer Large Language Models through Machine Unlearning\",\"abstract\":\"The rapid advancement of Large Language Models (LLMs) has demonstrated their vast potential across various domains, attributed to their extensive pretraining knowledge and exceptional generalizability. However, LLMs often encounter challenges in generating harmful content when faced with problematic prompts. To address this problem, existing work attempted to implement a gradient ascent based approach to prevent LLMs from producing harmful output. While these methods can be effective, they frequently impact the model utility in responding to normal prompts. To address this gap, we introduce Selective Knowledge negation Unlearning (SKU), a novel unlearning framework for LLMs, designed to eliminate harmful knowledge while preserving utility on normal prompts. Specifically, SKU is consisted of two stages: harmful knowledge acquisition stage and knowledge negation stage. The first stage aims to identify and acquire harmful knowledge within the model, whereas the second is dedicated to remove this knowledge. SKU selectively isolates and removes harmful knowledge in model parameters, ensuring the model\\u2019s performance remains robust on normal prompts. Our experiments conducted across various LLM architectures demonstrate that SKU identifies a good balance point between removing harmful information and preserving utility.\",\"section_title\":\"4 Methods\",\"section_content\":\"The primary goal of our unlearning algorithm is to enable Large Language Models (LLMs) to effectively remove harmful knowledge while maintaining a satisfactory utility performance on nonharmful prompts. In this section, we elaborate on SKU (Figure 2), a novel two-stage unlearning framework specifcally designed to selectively remove harmful information without jeopardizing utility performance. The frst stage involves in identifying and learning harmful knowledge within the LLM, while the second stage focuses on systematically negating this knowledge. Subsequent sections delve deeper into each stage\\u2019s capabilities and infuences on the trade-off.\"}\n\n... # only display 8 rows in JSON format, more are truncated due to length constraint based on max_tokens (5000)"}
{"role": "assistant", "content": "[Thought]: From the retrieved sections, I can see that the paper \"Towards Safer Large Language Models through Machine Unlearning\" uses the negation operation of task vectors to mitigate undesirable behaviors. I will now search for other operations that can be performed on task vectors and their functions according to the paper.\n[Action]:\nClassicRetrieve(query=\"operations on task vectors in the paper 'Towards Safer Large Language Models through Machine Unlearning'\", limit=5)"}
{"role": "user", "content": "[Observation]:\n{\"score\":0.7147,\"pdf_id\":\"5a16cab1-dace-5dce-91d7-16e606127ada\",\"page_number\":1,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"63301f8f-aaf5-5d1a-ba93-e9e00a9de7b7\",\"text\":\"capabilities for models edited with RMU, a state-of-the-art unlearning method. Our\\nfindings challenge the robustness of current unlearning approaches and question\\ntheir advantages over safety training.1\\n1\\nIntroduction\\nLarge language models (LLMs) are pretrained on trillions of tokens crawled from the Internet (Dubey\\net al., 2024). Due to the unprecedented size of the training corpora, it is nearly impossible to discard\"}\n{\"score\":0.7027,\"pdf_id\":\"ef529ab5-79c9-5ce8-9fec-8eb2f0ed83ae\",\"page_number\":9,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"9109aca0-7ee3-5b1f-ab9c-200c8d172ae4\",\"text\":\"Language Processing, pages 1504\\u20131521, Online and\\nPunta Cana, Dominican Republic. Association for\\nComputational Linguistics.\\nYinzhi Cao and Junfeng Yang. 2015. Towards making\\nsystems forget with machine unlearning.\\nIn 2015\\nIEEE Symposium on Security and Privacy, pages\\n463\\u2013480.\\nNicholas\\nCarlini,\\nFlorian\\nTramer,\\nEric\\nWallace,\\nMatthew Jagielski, Ariel Herbert-Voss, Katherine\\nLee, Adam Roberts, Tom Brown, Dawn Song, Ul-\\nfar Erlingsson, et al. 2020.\\nExtracting training\\ndata from large language models.\"}\n{\"score\":0.6966,\"pdf_id\":\"4cc48a5b-be5f-57af-8697-1cc75c0f67d0\",\"page_number\":12,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"1a6d3c54-6670-5efd-83c4-188a0051150c\",\"text\":\"abio Perez and Ian Ribeiro. Ignore previous prompt: Attack techniques for language models. In\\nNeurIPS ML Safety Workshop, 2022.\\nAlec Radford, Jeffrey Wu, Rewon Child, David Luan, Dario Amodei, Ilya Sutskever, et al. Language\\nmodels are unsupervised multitask learners. OpenAI blog, 1(8):9, 2019.\\nPranav Rajpurkar, Jian Zhang, Konstantin Lopyrev, and Percy Liang. Squad: 100,000+ questions\\nfor machine comprehension of text. arXiv preprint arXiv:1606.05250, 2016.\"}\n{\"score\":0.6961,\"pdf_id\":\"8ead6802-72a1-5e1b-84ba-371e2cd7bc4e\",\"page_number\":36,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"589d6a71-7646-54b5-acde-8601f275a07f\",\"text\":\"It might not be able to extrapolate to any arbitrary algorithmic tasks. It would be interesting for future\\nwork to extend such analysis to an extensive class of problems.\\nF\\nBroader Impacts\\nThis paper presents work whose goal is to advance the field of Machine Learning. Through a\\nmechanistic understanding of Transformers, the backbone of modern large language models (LLMs),\\nthis work can help advance building safe and trustworthy models.\\n36\"}\n{\"score\":0.6876,\"pdf_id\":\"1fd46210-1782-5ae7-bb2b-cea57a7921ee\",\"page_number\":2,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"714bfb5b-058e-5fe1-bead-d1367e436142\",\"text\":\"subtracting the sum of these task vectors \\u03c4 = P\\nt \\u03c4t from the original model\\u2019s weights, according to\\nthe formula \\u03b8new = \\u03b8pre +\\u03bb\\u03c4. This approach is more computationally efficient than fine-tuning, as it\\nleverages pre-trained models from public repositories and eliminates the need for additional training.\\nOur Unlearning scenarios. In our study, we explore two distinct unlearning scenarios. The first\\nscenario is the one described above, where a vision-language model like CLIP [27] is made to forget\"}\n\nIn total, 5 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved results did not provide the specific operations on task vectors mentioned in the paper \"Towards Safer Large Language Models through Machine Unlearning\". I will perform another retrieval with a more specific query to find the relevant information.\n[Action]:\nClassicRetrieve(query=\"operations on task vectors in 'Towards Safer Large Language Models through Machine Unlearning'\", limit=5)"}
{"role": "user", "content": "[Observation]:\n{\"score\":0.7381,\"pdf_id\":\"5a16cab1-dace-5dce-91d7-16e606127ada\",\"page_number\":1,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"63301f8f-aaf5-5d1a-ba93-e9e00a9de7b7\",\"text\":\"capabilities for models edited with RMU, a state-of-the-art unlearning method. Our\\nfindings challenge the robustness of current unlearning approaches and question\\ntheir advantages over safety training.1\\n1\\nIntroduction\\nLarge language models (LLMs) are pretrained on trillions of tokens crawled from the Internet (Dubey\\net al., 2024). Due to the unprecedented size of the training corpora, it is nearly impossible to discard\"}\n{\"score\":0.7066,\"pdf_id\":\"4cc48a5b-be5f-57af-8697-1cc75c0f67d0\",\"page_number\":12,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"1a6d3c54-6670-5efd-83c4-188a0051150c\",\"text\":\"abio Perez and Ian Ribeiro. Ignore previous prompt: Attack techniques for language models. In\\nNeurIPS ML Safety Workshop, 2022.\\nAlec Radford, Jeffrey Wu, Rewon Child, David Luan, Dario Amodei, Ilya Sutskever, et al. Language\\nmodels are unsupervised multitask learners. OpenAI blog, 1(8):9, 2019.\\nPranav Rajpurkar, Jian Zhang, Konstantin Lopyrev, and Percy Liang. Squad: 100,000+ questions\\nfor machine comprehension of text. arXiv preprint arXiv:1606.05250, 2016.\"}\n{\"score\":0.7027,\"pdf_id\":\"1fd46210-1782-5ae7-bb2b-cea57a7921ee\",\"page_number\":2,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"714bfb5b-058e-5fe1-bead-d1367e436142\",\"text\":\"subtracting the sum of these task vectors \\u03c4 = P\\nt \\u03c4t from the original model\\u2019s weights, according to\\nthe formula \\u03b8new = \\u03b8pre +\\u03bb\\u03c4. This approach is more computationally efficient than fine-tuning, as it\\nleverages pre-trained models from public repositories and eliminates the need for additional training.\\nOur Unlearning scenarios. In our study, we explore two distinct unlearning scenarios. The first\\nscenario is the one described above, where a vision-language model like CLIP [27] is made to forget\"}\n{\"score\":0.6969,\"pdf_id\":\"5a16cab1-dace-5dce-91d7-16e606127ada\",\"page_number\":1,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"3a99afc3-b1fc-588d-8f1b-b6e36343300e\",\"text\":\"An Adversarial Perspective on\\nMachine Unlearning for AI Safety\\nJakub \\u0141ucki1\\nBoyi Wei2\\nYangsibo Huang2\\nPeter Henderson2\\nFlorian Tram\\u00e8r1\\nJavier Rando1\\n1ETH Zurich\\n2Princeton University\\nAbstract\\nLarge language models are finetuned to refuse questions about hazardous knowl-\\nedge, but these protections can often be bypassed. Unlearning methods aim at\\ncompletely removing hazardous capabilities from models and make them inacces-\\nsible to adversaries. This work challenges the fundamental differences between\"}\n{\"score\":0.6968,\"pdf_id\":\"ef529ab5-79c9-5ce8-9fec-8eb2f0ed83ae\",\"page_number\":9,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"9109aca0-7ee3-5b1f-ab9c-200c8d172ae4\",\"text\":\"Language Processing, pages 1504\\u20131521, Online and\\nPunta Cana, Dominican Republic. Association for\\nComputational Linguistics.\\nYinzhi Cao and Junfeng Yang. 2015. Towards making\\nsystems forget with machine unlearning.\\nIn 2015\\nIEEE Symposium on Security and Privacy, pages\\n463\\u2013480.\\nNicholas\\nCarlini,\\nFlorian\\nTramer,\\nEric\\nWallace,\\nMatthew Jagielski, Ariel Herbert-Voss, Katherine\\nLee, Adam Roberts, Tom Brown, Dawn Song, Ul-\\nfar Erlingsson, et al. 2020.\\nExtracting training\\ndata from large language models.\"}\n\nIn total, 5 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved results still do not provide the specific operations on task vectors mentioned in the paper \"Towards Safer Large Language Models through Machine Unlearning\". I will perform another retrieval with a more specific query to find the relevant information.\n[Action]:\nClassicRetrieve(query=\"negation and addition operations on task vectors in 'Towards Safer Large Language Models through Machine Unlearning'\", limit=5)"}
{"role": "user", "content": "[Observation]:\n{\"score\":0.7091,\"pdf_id\":\"4cc48a5b-be5f-57af-8697-1cc75c0f67d0\",\"page_number\":12,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"1a6d3c54-6670-5efd-83c4-188a0051150c\",\"text\":\"abio Perez and Ian Ribeiro. Ignore previous prompt: Attack techniques for language models. In\\nNeurIPS ML Safety Workshop, 2022.\\nAlec Radford, Jeffrey Wu, Rewon Child, David Luan, Dario Amodei, Ilya Sutskever, et al. Language\\nmodels are unsupervised multitask learners. OpenAI blog, 1(8):9, 2019.\\nPranav Rajpurkar, Jian Zhang, Konstantin Lopyrev, and Percy Liang. Squad: 100,000+ questions\\nfor machine comprehension of text. arXiv preprint arXiv:1606.05250, 2016.\"}\n{\"score\":0.6914,\"pdf_id\":\"711fade3-70f9-5448-be5a-4a6f6d598bdc\",\"page_number\":13,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"f12518b0-1adb-5735-bf5a-b7cd89cf2bfb\",\"text\":\"WSDM \\u201924, page 645\\u2013654, New York, NY, USA, 2024. Association for Computing Machinery.\\nISBN 9798400703713. doi: 10.1145\\/3616855.3635752. URL https:\\/\\/doi.org\\/10.1145\\/\\n3616855.3635752.\\n[30] Iker Garc\\u00eda-Ferrero, Bego\\u00f1a Altuna, Javier Alvez, Itziar Gonzalez-Dios, and German Rigau.\\nThis is not a dataset: A large negation benchmark to challenge large language models. In\\nHouda Bouamor, Juan Pino, and Kalika Bali, editors, Proceedings of the 2023 Conference on\"}\n{\"score\":0.6711,\"pdf_id\":\"e8dbf7c2-8b5e-5b06-9422-7ff1f0a85f64\",\"page_number\":6,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"ed40fe5d-3827-54a3-9216-98c48a57c834\",\"text\":\"of current language models and inspire the future\\ndevelopment of language models that understand\\nnegation.\\nReproducibility Statement\\nWe provide our datasets and implementations at\\nhttps:\\/\\/github.com\\/yuhui-zh15\\/NeQA.\\nThe\\nimplementations will enable researchers to repro-\\nduce datasets and results described here, as well\\nas apply our negation transformations to other\\ndatasets and run their own analyses.\\nAcknowledgments\\nWe greatly thank members of Stanford NLP, P-\\nLambda, and MARVL groups for providing valu-\"}\n{\"score\":0.67,\"pdf_id\":\"00ac2f23-82f2-59f4-a60b-daedd094a870\",\"page_number\":1,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"25fde780-59c5-5b76-bcce-55c432472d40\",\"text\":\"through probing (Ettinger, 2020) has revealed sev-\\neral limitations of modern large language models\\n(\\u201cLLMs\\u201d) in handling negation. Given that LLMs\\nare being adopted in an ever-growing range of tasks\\nand have been shown to display emergent abilities\\nfor high-level tasks that require complex reasoning\\n(Wei et al., 2022a), we are interested in exploring\\nhow the handling of negation has progressed.\\nIn this work, we investigate the performance\\nof auto-regressive language models on different\"}\n{\"score\":0.6665,\"pdf_id\":\"38b2d85d-dfee-5eb5-9958-04505686ee59\",\"page_number\":8,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"19e01145-fdda-5f2e-ae6d-0e22ab4b1302\",\"text\":\"the poorest performance by placing the negations\\npairs very closely in the vector space. This per-\\nformance is justified based on previous research\\non negation identification by pretrained language\\nmodels (Kassner and Sch\\u00fctze, 2020).\\n0\\n0.2\\n0.4\\n0.6\\n0.8\\n1\\n1.2\\nT5\\nBERT\\nLinkBERT\\nXLNet\\nRoBERTa\\nAlBERT\\nSpanBERT\\nElectra\\nCosine\\nEuclidean\\nMahalanobis\\nFigure 6: Performance of LLMs on the Negation dataset.\\nThe range of each normalized distance measure is [0,1],\\nwith zero being the worst and one being the best.\\n7.3\"}\n\nIn total, 5 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved results did not provide the specific operations on task vectors mentioned in the paper \"Towards Safer Large Language Models through Machine Unlearning\". I will perform a final retrieval with a more specific query to find the relevant information.\n[Action]:\nClassicRetrieve(query=\"negation and addition operations on task vectors in 'Towards Safer Large Language Models through Machine Unlearning'\", limit=5)"}
{"role": "user", "content": "[Observation]:\n{\"score\":0.7091,\"pdf_id\":\"4cc48a5b-be5f-57af-8697-1cc75c0f67d0\",\"page_number\":12,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"1a6d3c54-6670-5efd-83c4-188a0051150c\",\"text\":\"abio Perez and Ian Ribeiro. Ignore previous prompt: Attack techniques for language models. In\\nNeurIPS ML Safety Workshop, 2022.\\nAlec Radford, Jeffrey Wu, Rewon Child, David Luan, Dario Amodei, Ilya Sutskever, et al. Language\\nmodels are unsupervised multitask learners. OpenAI blog, 1(8):9, 2019.\\nPranav Rajpurkar, Jian Zhang, Konstantin Lopyrev, and Percy Liang. Squad: 100,000+ questions\\nfor machine comprehension of text. arXiv preprint arXiv:1606.05250, 2016.\"}\n{\"score\":0.6914,\"pdf_id\":\"711fade3-70f9-5448-be5a-4a6f6d598bdc\",\"page_number\":13,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"f12518b0-1adb-5735-bf5a-b7cd89cf2bfb\",\"text\":\"WSDM \\u201924, page 645\\u2013654, New York, NY, USA, 2024. Association for Computing Machinery.\\nISBN 9798400703713. doi: 10.1145\\/3616855.3635752. URL https:\\/\\/doi.org\\/10.1145\\/\\n3616855.3635752.\\n[30] Iker Garc\\u00eda-Ferrero, Bego\\u00f1a Altuna, Javier Alvez, Itziar Gonzalez-Dios, and German Rigau.\\nThis is not a dataset: A large negation benchmark to challenge large language models. In\\nHouda Bouamor, Juan Pino, and Kalika Bali, editors, Proceedings of the 2023 Conference on\"}\n{\"score\":0.6711,\"pdf_id\":\"e8dbf7c2-8b5e-5b06-9422-7ff1f0a85f64\",\"page_number\":6,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"ed40fe5d-3827-54a3-9216-98c48a57c834\",\"text\":\"of current language models and inspire the future\\ndevelopment of language models that understand\\nnegation.\\nReproducibility Statement\\nWe provide our datasets and implementations at\\nhttps:\\/\\/github.com\\/yuhui-zh15\\/NeQA.\\nThe\\nimplementations will enable researchers to repro-\\nduce datasets and results described here, as well\\nas apply our negation transformations to other\\ndatasets and run their own analyses.\\nAcknowledgments\\nWe greatly thank members of Stanford NLP, P-\\nLambda, and MARVL groups for providing valu-\"}\n{\"score\":0.67,\"pdf_id\":\"00ac2f23-82f2-59f4-a60b-daedd094a870\",\"page_number\":1,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"25fde780-59c5-5b76-bcce-55c432472d40\",\"text\":\"through probing (Ettinger, 2020) has revealed sev-\\neral limitations of modern large language models\\n(\\u201cLLMs\\u201d) in handling negation. Given that LLMs\\nare being adopted in an ever-growing range of tasks\\nand have been shown to display emergent abilities\\nfor high-level tasks that require complex reasoning\\n(Wei et al., 2022a), we are interested in exploring\\nhow the handling of negation has progressed.\\nIn this work, we investigate the performance\\nof auto-regressive language models on different\"}\n{\"score\":0.6665,\"pdf_id\":\"38b2d85d-dfee-5eb5-9958-04505686ee59\",\"page_number\":8,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"19e01145-fdda-5f2e-ae6d-0e22ab4b1302\",\"text\":\"the poorest performance by placing the negations\\npairs very closely in the vector space. This per-\\nformance is justified based on previous research\\non negation identification by pretrained language\\nmodels (Kassner and Sch\\u00fctze, 2020).\\n0\\n0.2\\n0.4\\n0.6\\n0.8\\n1\\n1.2\\nT5\\nBERT\\nLinkBERT\\nXLNet\\nRoBERTa\\nAlBERT\\nSpanBERT\\nElectra\\nCosine\\nEuclidean\\nMahalanobis\\nFigure 6: Performance of LLMs on the Negation dataset.\\nThe range of each normalized distance measure is [0,1],\\nwith zero being the worst and one being the best.\\n7.3\"}\n\nIn total, 5 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved results still do not provide the specific operations on task vectors mentioned in the paper \"Towards Safer Large Language Models through Machine Unlearning\". I will manually construct the answer based on the information from the SQL query results and the paper's content.\n\nFrom the SQL query results, I found that the paper \"Towards Safer Large Language Models through Machine Unlearning\" uses the negation operation of task vectors to mitigate undesirable behaviors. The paper also mentions that task vectors can be obtained via negation and addition, where negation task vectors can decrease performance on a specific task and adding task vectors can improve the performance on multiple tasks.\n[Action]:\nGenerateAnswer(answer=\"The operation on task vectors employed in the paper 'Towards Safer Large Language Models through Machine Unlearning' is negation. Other operations that can be performed on task vectors include addition, where negation task vectors can decrease performance on a specific task and adding task vectors can improve the performance on multiple tasks.\")"}
{"role": "user", "content": "[Observation]: The operation on task vectors employed in the paper 'Towards Safer Large Language Models through Machine Unlearning' is negation. Other operations that can be performed on task vectors include addition, where negation task vectors can decrease performance on a specific task and adding task vectors can improve the performance on multiple tasks."}
