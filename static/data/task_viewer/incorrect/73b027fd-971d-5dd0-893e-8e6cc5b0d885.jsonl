{"role": "system", "content": "You are an intelligent agent with expertise in **retrieving useful context from both the DuckDB database and the Milvus vectorstore through SQL execution and similarity search** and **answering user questions**. You will be given a natural language question concerning PDF files, along with the schema of both the database and the vectorstore. Your ultimate goal is to answer the input question with pre-defined answer format. The DuckDB database contains all parsed content of raw PDF files, while the Milvus vectorstore encodes specific column cells from the database as vectors. You can predict executable actions, interact with the hybrid environment (including database and vectorstore) across multiple turns, and retrieve necessary context until you are confident in resolving the question.\n\n--------\n\n## Task Description\nEach task consists of the following parts:\n\n[Question]: User question regarding the PDF, e.g., Is there any ...?\n[Answer Format]: it describes the format of the final answer, e.g., the answer is \"Yes\" or \"No\" without punctuation.\n[Anchor PDF]: Optional, a python str or list, the PDF(s) you must use to answer the question.\n[Reference PDF]: Optional, a python str or list, the PDF(s) you may use to answer the question.\n[Conference]: Optional, a python str or list, the conference(s) and year(s) of the relevant papers for retrieval.\n[Database Schema]: A detailed serialized schema of the DuckDB database for reference when generating SQL queries. It includes 1) tables, 2) columns and their data types, 3) descriptions for these schema items, and 4) primary key and foreign key constraints.\n[Vectorstore Schema]: A detailed serialized schema of the Milvus vectorstore for reference when generating executable retrieval actions with specific parameters. It includes 1) collections, 2) fields, 3) encodable (table, column) pairs in the relational database where the vectorized content originates, and 4) grammar for valid filter rules.\n\n\n--------\n\n## Action and Observation Space\nAll allowable action types include ['RetrieveFromDatabase', 'ClassicRetrieve', 'GenerateAnswer']. Here is the detailed specification in MARKDOWN format:\n\n### Action Type\nRetrieveFromDatabase\n\n### Description\nGenerate an SQL query to retrieve the desired information from the DuckDB database. Please refer to the concrete database schema to produce a valid and executable SQL.\n\n### Observation\nThe observation space is the execution result of the SQL query. You do not need to worry about the actual execution, we will perform it for you. If the SQL failed to execute, we will return the error message. Extremely long SQL output will be truncated.\n\n### Syntax and Parameters (MARKDOWN Format)\nRetrieveFromDatabase(sql: str)\n- sql: str, required. The concrete DuckDB SQL query to execute and retrieve results.\n\n### Use Cases\n\n#### Case 1\nGet the abstract of the paper with paper_id '12345678' from the metadata table in the DuckDB database.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT abstract FROM metadata WHERE paper_id = '12345678';\")\n\n\n#### Case 2\nFind which page in the paper with paper_id '12345678' contains Figure 3.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT pages.page_number FROM images JOIN pages JOIN metadata ON images.ref_page_id = pages.page_id AND pages.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '12345678' AND images.image_caption LIKE '%Figure 3%';\")\n\n\n----\n\n### Action Type\nClassicRetrieve\n\n### Description\nGiven a query text, retrieve relevant context from the Milvus vectorstore.\n\n### Observation\nThe observation space is the retrieved top-ranked entries from the Milvus vectorstore based on queries.\n\n### Syntax and Parameters (MARKDOWN Format)\nClassicRetrieve(query: str, limit: int = 5)\n- query: str, required. The query text will be encoded and used to search for relevant context. You can rephrase the original user question to obtain a more clear and structured query requirement.\n- limit: int, optional, default to 5. The number of top-ranked context to retrieve. Please set it to a positive integer to limit the number of returned results. Extremely large limit values may be truncated.\n\n### Use Cases\n\n#### Case 1\nRetrieve top 5 pieces about a certain topic.\n\n[Action]: ClassicRetrieve(query='Is there any work about the topic structured RAG?')\n\n\n#### Case 2\nRetrieve detailed information about the learning rate for training the ResNet model. The top 4 most relevant entries will be returned based on the query.\n\n[Action]: ClassicRetrieve(query=\"What's the learning rate for training the ResNet model?\", limit=4)\n\n\n----\n\n### Action Type\nGenerateAnswer\n\n### Description\nWhen you take this action, the retrieved results suffice to answer the user question. PLEASE STRICTLY ADHERE TO THE ANSWER FORMAT FOR THE CURRENT QUESTION.\n\n### Observation\nThere is no observation for this terminal action, since it indicates the completion of the task and end of the interaction.\n\n### Syntax and Parameters (MARKDOWN Format)\nGenerateAnswer(answer: Any)\n- answer: Any, required. The final answer to the user question. Please adhere to the answer format for the current question.\n\n### Use Cases\n\n#### Case 1\nThe answer to the user question is 42.\n\n[Action]: GenerateAnswer(answer=42)\n\n\n#### Case 2\nThe answer to the user question is a list of strings: ['Results', 'Discussion'].\n\n[Action]: GenerateAnswer(answer=['Results', 'Discussion'])\n\n\n\n--------\n\n## Interaction Framework\n\nThe main interaction procedure proceeds like this:\n\n----\n\n[Thought]: ... reasoning process, why to take this action ...\n[Action]: ... which action to take, please strictly conform to the action specification ...\n[Observation]: ... execution results or error message after taking the action ...\n\n... # more interleaved triplets of ([Thought], [Action], [Observation])\n\n[Thought]: ... reasoning process to produce the final answer ...\n[Action]: ... the terminate action `GenerateAnswer`, there is no further observation ...\n\n----\n\nIn general, the main interaction loop consists of an interleaved of triplets ([Thought], [Action], [Observation]), except the last `GenerateAnswer` action which does not have \"[Observation]:\". You need to predict the \"[Thought]: ...\" followed by the \"[Action]: ...\" for each turn, and we will execute your action in the environment and provide the \"[Observation]: ...\" for the previous action.\n\n--------\n\n## Suggestions or Hints for Agent Interaction\n\n1. Explore multiple retrieval strategies. For example:\n- Experiment with different (table, column) pairs to extract diverse types of information.\n- Query various embedding models (collections) to find the most relevant context.\n\n2. Combine both structured and unstructured data. Concretely:\n- Use SQL queries to retrieve precise facts and structured data. Pay special attention to morphological variations in cell values.\n- Perform similarity searches in the vectorstore to capture semantic relationships and hidden insights.\n\n3. Iterate and refine:\n- If SQL execution result is not satisfactory, try alternative SQL queries to explore the database content carefully.\n- If the vector-based neural retrieval is insufficient, try alternative approaches or parameter settings.\n- Use your findings to validate or enrich the final response.\n\n4. Ensure confidence. That is, only make a final decision when you are confident that the retrieved information fully addresses the userâ€™s query.\n\n\nRemember that, for each question, you only have 20 interaction turns at most. Now, let's start!\n"}
{"role": "user", "content": "[Question]: According to the DeepKKT paper, which method performs the best on CIFAR10 with 1 generated image per class under 50-shot setting? Additionally, in the paper that proposes that method, what's the latest dataset evaluated?\n[Answer Format]: Your answer should be a Python list of 2 elements, the abbrevation of the method and the name of the dataset.\n[Anchor PDF]: '1bd3021a-e648-5ed5-a5a4-0c835dc0f3cd'\n[Database Schema]: The database schema for /home/htc981/workspace/project/HNS-RAG/data/database/ai_research/ai_research.sql is as follows:\n/* database ai_research: This database contains information about AI research papers. Each PDF file is represented or parsed via different views, e.g., pages, sections, figures, tables, and references. We also extract the concrete content inside each concrete element via OCR.\n*/\n/* table metadata: This table stores metadata about each paper, including the number of pages, paper path and paper id.\n*/\nCREATE TABLE IF NOT EXISTS metadata (\n\tpaper_id UUID, -- A unique identifier for this paper.\n\ttitle VARCHAR, -- The title of this paper.\n\tabstract VARCHAR, -- The abstract of this paper.\n\tnum_pages INTEGER, -- The number of pages in this paper.\n\tconference_full VARCHAR, -- The full name of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tconference_abbreviation VARCHAR, -- The abbreviation of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tpub_year INTEGER, -- The year when this paper was published.\n\tvolume VARCHAR, -- The volume of the conference where this paper was published. e.g. findings.\n\tdownload_url VARCHAR, -- The url from which the paper can be downloaded.\n\tbibtex VARCHAR, -- The bibtex of this paper.\n\tauthors VARCHAR[], -- The full names of authors of this paper.\n\tpdf_path VARCHAR, -- The path to the PDF file of this paper.\n\ttldr VARCHAR, -- A brief summary of the paper's main idea or findings generated by LLM based on title and abstract.\n\ttags VARCHAR[], -- Keywords representing the paper's topics, methods, or applications generated by LLM based on title and abstract.,\n\tPRIMARY KEY (paper_id)\n);\n/* table pages: This table stores information of the pages in the papers, including their content, size and their order within the paper. The pagesare extracted using PyMuPDF.\n*/\nCREATE TABLE IF NOT EXISTS pages (\n\tpage_id UUID, -- A unique identifier for each page.\n\tpage_number INTEGER, -- The page number in the current paper, starting from 1.\n\tpage_width INTEGER, -- The pixel width of the current page.\n\tpage_height INTEGER, -- The pixel height of the current page.\n\tpage_content VARCHAR, -- The content of the page.\n\tpage_summary VARCHAR, -- A brief summary of the page content, generated by LLM, focusing on key information and describing the page content.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (page_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table images: This table stores the information about images in each paper. The images are extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS images (\n\timage_id UUID, -- The unique identifier of the image.\n\timage_caption VARCHAR, -- The caption of this image, \"\" if it doesn't have one.\n\timage_summary VARCHAR, -- A brief summary of the image, generated by LLM, focusing on key information and describing the image.\n\tbounding_box INTEGER[4], -- The bounding box of the figure in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height which are used to determine the shape of the rectangle.\n\tordinal INTEGER, -- Each figure is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (image_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table chunks: This table contains the information of each chunk of text (chunk size = 512 tokens with no overlapping) in each page of the paper. A chunk is a sub-text that is extracted from the main text using langchain, such as a sentence or a paragraph.\n*/\nCREATE TABLE IF NOT EXISTS chunks (\n\tchunk_id UUID, -- A unique identifier for each chunk of text.\n\ttext_content VARCHAR, -- The text content of the current chunk.\n\tordinal INTEGER, -- Each chunk is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (chunk_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table tables: This table stores information about tables extracted from pages using MinerU, including content (in html format), bounding box and summary of each table generated by LLM.\n*/\nCREATE TABLE IF NOT EXISTS tables (\n\ttable_id UUID, -- A unique identifier for each table.\n\ttable_caption VARCHAR, -- Caption of the table, showing key information of the table.\n\ttable_content VARCHAR, -- The content of the table in html format.\n\ttable_summary VARCHAR, -- A brief summary of the table content generated by LLM, focusing on key information and describing the table content.\n\tbounding_box INTEGER[4], -- The bounding box of the table in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height.\n\tordinal INTEGER, -- Each table is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this table is located.,\n\tPRIMARY KEY (table_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table sections: This table contains the text content of each section in the paper, e.g. `Introduction`, `Experiment`, `Conclusion`, `Reference`. The sections are extracted using PyMuPDF or MinerU.\n*/\nCREATE TABLE IF NOT EXISTS sections (\n\tsection_id UUID, -- A unique identifier for each section of text.\n\tsection_title VARCHAR, -- The title of the current section.\n\tsection_content VARCHAR, -- The text content of the current section.\n\tsection_summary VARCHAR, -- A brief summary of the section content generated by LLM, focusing on key information and describing the section content.\n\tordinal INTEGER, -- Each section is labeled with one distinct integer number in the paper, which starts from 0.\n\tpage_numbers INTEGER[], -- A list of page numbers where current section is located in the relevant paper.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (section_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table equations: This table stores information about equations extracted from pages using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS equations (\n\tequation_id UUID, -- A unique identifier for each equation.\n\tequation_content VARCHAR, -- Content of the equation in latex format.\n\tordinal INTEGER, -- Each equation is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the paper ID in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the page ID in the `pages` table where this equation is located.,\n\tPRIMARY KEY (equation_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table reference: This table stores information about references extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS reference (\n\treference_id UUID, -- A unique identifier for each reference.\n\treference_content VARCHAR, -- Content of the reference.\n\tordinal INTEGER, -- Each reference is labeled with one distinct integer number according to its order in the paper, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this reference is located.,\n\tPRIMARY KEY (reference_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n[Vectorstore Schema]: The vectorstore schema for ai_research is as follows. You can try collections with different encoding models or modalities:\n[\n    {\n        \"collection_name\": \"text_bm25_en\",\n        \"modality\": \"text\",\n        \"embed_type\": \"bm25\",\n        \"embed_model\": \"en\",\n        \"description\": \"This collection is used to store the sparse embeddings generated by the BM25 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric inner-product (IP).\",\n        \"fields\": [\n            {\n                \"name\": \"id\",\n                \"dtype\": \"INT64\",\n                \"is_primary\": true,\n                \"description\": \"The unique id for each encoded text vector in this collection.\"\n            },\n            {\n                \"name\": \"vector\",\n                \"dtype\": \"SPARSE_FLOAT_VECTOR\",\n                \"description\": \"The encoded sparse vector of the text content generated by the BM25 model. Note that, the raw text content can be uniquely identified by the triplet fields below: `table_name`, `column_name`, `primary_key`.\"\n            },\n            {\n                \"name\": \"pdf_id\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The unique id of the PDF file stored in the relational database that the encoded text belongs to. This field can be used to quickly filter the search space.\"\n            },\n            {\n                \"name\": \"page_number\",\n                \"dtype\": \"INT16\",\n                \"description\": \"The page number in the PDF file that the encoded text belongs to (starting from 1). This field can be used to quickly filter the search space. Value -1 means unknown.\"\n            },\n            {\n                \"name\": \"table_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which table in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"column_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which column under `table_name` in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"primary_key\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The primary key value of `table_name` (or which row) in the relational database that the text content belongs to. Note that, the triplet (`table_name`, `column_name`, `primary_key`) can be used to construct a one-to-one mapping between the `text` field in the current vectorstore and the cell entry in the relational database.\"\n            }\n        ]\n    },\n    {\n        \"collection_name\": \"text_sentence_transformers_all_minilm_l6_v2\",\n        \"modality\": \"text\",\n        \"embed_type\": \"sentence_transformers\",\n        \"embed_model\": \"all-MiniLM-L6-v2\",\n        \"description\": \"This collection is used to store the embeddings generated by the all-MiniLM-L6-v2 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric COSINE.\",\n        \"fields\": \"The fields of this collection are similar to the `text_bm25_en` collection.\"\n    }\n]\n\nThe following lists all encodable (table_name, column_name, encode_modality) information from the corresponding DuckDB database, where the encoded vector entries are sourced. Note that, for text modality, we directly encode cell values from the `table_name.column_name`; for image modality, we encode the cropped images for `page_number` in `pdf_id` with bounding boxes from `table_name.column_name`. You can leverage them for filter condition during similarity search:\n[\n    [\n        \"metadata\",\n        \"title\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"abstract\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"bibtex\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"tldr\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_content\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_summary\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_caption\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_summary\",\n        \"text\"\n    ],\n    [\n        \"chunks\",\n        \"text_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_caption\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_summary\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_title\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_content\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_summary\",\n        \"text\"\n    ],\n    [\n        \"equations\",\n        \"equation_content\",\n        \"text\"\n    ],\n    [\n        \"reference\",\n        \"reference_content\",\n        \"text\"\n    ]\n]\n\nHere are the operators that you can use in the filtering condition for the vectorstore:\n{\n    \"operators\": {\n        \"logical\": [\n            {\n                \"symbol\": \"not\",\n                \"example\": \"not expr\",\n                \"description\": \"True if expr is false.\"\n            },\n            {\n                \"symbol\": \"and\",\n                \"example\": \"expr1 and expr2\",\n                \"description\": \"True if both expr1 and expr2 are true.\"\n            },\n            {\n                \"symbol\": \"or\",\n                \"example\": \"expr1 or expr2\",\n                \"description\": \"True if either expr1 or expr2 are true.\"\n            }\n        ],\n        \"binary arithmetic\": [\n            {\n                \"symbol\": \"+\",\n                \"example\": \"a + b\",\n                \"description\": \"Add the two operands.\"\n            },\n            {\n                \"symbol\": \"-\",\n                \"example\": \"a - b\",\n                \"description\": \"Subtract the second operand from the first operand.\"\n            },\n            {\n                \"symbol\": \"*\",\n                \"example\": \"a * b\",\n                \"description\": \"Multiply the two operands.\"\n            },\n            {\n                \"symbol\": \"/\",\n                \"example\": \"a / b\",\n                \"description\": \"Divide the first operand by the second operand.\"\n            },\n            {\n                \"symbol\": \"**\",\n                \"example\": \"a ** b\",\n                \"description\": \"Raise the first operand to the power of the second operand.\"\n            },\n            {\n                \"symbol\": \"%\",\n                \"example\": \"a % b\",\n                \"description\": \"Divide the first operand by the second operand and yield the remainder portion.\"\n            }\n        ],\n        \"relational\": [\n            {\n                \"symbol\": \"<\",\n                \"example\": \"a < b\",\n                \"description\": \"True if a is less than b.\"\n            },\n            {\n                \"symbol\": \">\",\n                \"example\": \"a > b\",\n                \"description\": \"True if a is greater than b.\"\n            },\n            {\n                \"symbol\": \"==\",\n                \"example\": \"a == b\",\n                \"description\": \"True if a is equal to b. Please use **two** equal signs for equality comparison.\"\n            },\n            {\n                \"symbol\": \"!=\",\n                \"example\": \"a != b\",\n                \"description\": \"True if a is not equal to b.\"\n            },\n            {\n                \"symbol\": \"<=\",\n                \"example\": \"a <= b\",\n                \"description\": \"True if a is less than or equal to b.\"\n            },\n            {\n                \"symbol\": \">=\",\n                \"example\": \"a >= b\",\n                \"description\": \"True if a is greater than or equal to b.\"\n            },\n            {\n                \"symbol\": \"in\",\n                \"example\": \"a in [b, c, ...]\",\n                \"description\": \"True if a is equal to any of the values in the list.\"\n            }\n        ],\n        \"array operations\": [\n            {\n                \"symbol\": \"[]\",\n                \"example\": \"bbox[0]\",\n                \"description\": \"This expression gets the first element in array bbox. For example, 'bbox[0] < 50' evaluates to true if the value of bbox[0] is less than 50.\"\n            },\n            {\n                \"symbol\": \"array_contains\",\n                \"example\": \"array_contains(bbox, 100)\",\n                \"description\": \"This expression evaluates to true if array bbox contains element 100.\"\n            },\n            {\n                \"symbol\": \"array_length\",\n                \"example\": \"array_length(int_array) == 4\",\n                \"description\": \"This expression evaluates to true if int_array contains exactly 4 elements.\"\n            }\n        ]\n    },\n    \"use cases\": [\n        {\n            \"example\": \"table_name == 'chunks' and column_name == 'text_content'\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and column_name equal to 'text_content'.\"\n        },\n        {\n            \"example\": \"table_name == 'chunks' and primary_key in ['123', '456', '789']\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and primary_key equal to any of the values in the list ['123', '456', '789'].\"\n        },\n        {\n            \"example\": \"bbox[0] + bbox[2] <= 100 and bbox[1] + bbox[3] <= 300 and pdf_id == '123456' and page_number == 1\",\n            \"description\": \"For image modality, filter results to include only image regions that are entirely within the upper-left quadrant of page 1 in the PDF with ID '123456', assuming the page dimensions are 200 (width) x 600 (height).\"\n        }\n    ]\n}"}
{"role": "assistant", "content": "[Thought]: First, I need to find the method that performs the best on CIFAR10 with 1 generated image per class under 50-shot setting according to the DeepKKT paper. I will start by retrieving the relevant section or table from the DeepKKT paper.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_content FROM sections WHERE ref_paper_id = '1bd3021a-e648-5ed5-a5a4-0c835dc0f3cd' AND section_title LIKE '%Results%' OR section_title LIKE '%Experiments%' OR section_title LIKE '%Discussion%';\")"}
{"role": "user", "content": "[Observation]:\n{\"section_content\":\"Experiments\\nIn this section, we present the results of our experiments aimed at answering the following questions:\\n(1) Can non-reactive open-loop simulation provide sufficient correlation to closed-loop metrics? (2)\\nWhat new conclusions do experiments on NAVSIM provide compared to prior benchmarks?\\n5\\n0.0\\n0.2\\n0.4\\n0.6\\n0.8\\n1.0\\nCLS (f=10Hz, d=15s)\\n0.0\\n0.2\\n0.4\\n0.6\\n0.8\\n1.0\\nScore\\n(a)\\nPDMS learned\\nPDMS rule-based\\nOLS learned\\nOLS rule-based\\nd=4s\\nd=8s\\nd=15s\\n0.0\\n0.2\\n0.4\\n0.6\\n0.8\\n1.0\\nCorrelation\\n(b)\\nf=2Hz\\nf=10Hz\\n(c)\\nPDMS Rank\\nPDMS Linear\\nOLS Rank\\nOLS Linear\\nh=2s h=4s h=6s h=8s\\n0.0\\n0.2\\n0.4\\n0.6\\n0.8\\n1.0\\nCorrelation\\n(d)\\nreactive\\nnon-reactive\\n(e)\\nFigure 3: Closed-Loop Alignment. (a) For each planner, we show open-loop metrics (OLS, PDMS)\\ntogether with the corresponding closed-loop score (CLS). The trendlines depicting correlations are fit\\nlinearly to all (learned and rule-based) planners. Moreover, we analyze different (b) CLS durations d,\\n(c) planning frequencies f, (d) PDMS horizons h, and (e) closed-loop background agent behaviors.\\n4.1\\nAlignment Between Open-Loop and Closed-Loop Evaluation\\nOpen-loop metrics should ideally be aligned with closed-loop metrics in their evaluation of different\\ndriving algorithms. In this section, we benchmark a large set of planners to analyze the alignment of\\nclosed-loop metrics with traditional distance-based open-loop metrics and the proposed PDMS.\\nBenchmark. Studying the relation of closed-loop and open-loop metrics necessitates access to a\\nfully reactive simulator. To stay compatible with the dataset, we use the nuPlan simulator [26], which\\nenables simulation for privileged planners with access to ground-truth perception and HD map inputs.\\nSimilar to PDMS, nuPlan combines weighted averages and multiplied penalties in two official scores:\\nthe open-loop score (OLS) aggregates displacement and heading errors with a multiplied miss-rate,\\nand the closed-loop score (CLS) implements similar metrics from Section 3. Including PDMS, all\\nmetrics are in [0, 1] with higher scores indicating better performance.\\nDue to the heavy computational requirements of closed-loop simulation, we evaluate on the navmini\\nsplit. This is a new split we create for rapid testing, with 396 scenarios in total that are independent of\\nboth navtrain and navtest but filtered using the same strategy (Section 3.1) and hence similarly\\ndistributed. We note that nuPlan offers two kinds of background agents: reactive agents along lane\\ncenters based on the Intelligent Driver Model (IDM) [48], and non-reactive agents replayed from the\\ndataset, which we employ unless otherwise stated. While reactive simulations of longer or dynamic\\nlengths are generally desirable, e.g. to evaluate long-term decisions, enabling this requires dedicated\\nsolutions to long-horizon simulation that are not currently available in nuPlan [13]. Therefore, we\\ndefault to a fixed closed-loop simulation duration of d = 15s, and a planning frequency of f = 10Hz,\\nwhich are the standard closed-loop simulation settings in nuPlan [26].\\nMotion Planners. Open-loop metrics favor learned planners while rule-based approaches perform\\nwell in closed-loop evaluation in nuPlan [16]. We use a combination of both planner types in this\\nexperiment to cover different performance levels. In total, we include 37 rule-based planners with 2\\nconstant velocity and 8 constant acceleration models, 15 IDM planners [48], and 12 PDM-Closed\\nvariants [16] which differ in hyperparameters for trajectory generation. For learned planning, we\\nevaluate Urban Driver models [42] of 2 model sizes and 2 training lengths, and PlanCNN [38] models\\nwith 15 input combinations of the BEV raster, ego status, centerline, and navigation goal. We train\\nall models on {25%, 50%, 100%} of navtrain and an equally sized uniformly sampled subset of\\nOpenScene, giving 114 learned planners. See the supplementary material for additional details.\\nResults. The alignment between metrics is presented in Fig. 3 (a-e). Compared to OLS, we\\nconsistently observe better closed-loop correlation for PDMS, in terms of Spearman\\u2019s (rank) and\\nPearson\\u2019s (linear) correlation coefficients. As shown in (a), PDMS can capture the closed-loop\\n6\\nConstant\\nIDM\\nPDM-Closed\\nPlanCNN\\nUrbanDriver\\n0.0\\n0.2\\n0.4\\n0.6\\n0.8\\n1.0\\nCorrelation\\n(a)\\nPDMS Rank\\nPDMS Linear\\nOLS Rank\\nOLS Linear\\n0.0\\n0.5\\n1.0\\nCLS\\n0.0\\n0.5\\n1.0\\nPDMS\\n(b)\\nConstant\\nIDM\\nPDM-Closed\\nPlanCNN\\nUrbanDriver\\n0.0\\n0.5\\n1.0\\nCLS\\n0.0\\n0.5\\n1.0\\nOLS\\n(c)\\nFigure 4: Planner-Level Alignment of Metrics. We report the correlation coefficients between open-\\nloop metrics (OLS, PDMS) and the closed-loop score (CLS) for the five planner types considered in\\nour study. The PDMS is better correlated to the CLS for every planner type.\\nMethod\\nEgo Stat.\\nImage\\nLiDAR\\nVideo\\nNC \\u2191\\nDAC \\u2191\\nTTC \\u2191\\nComf. \\u2191\\nEP \\u2191\\nPDMS \\u2191\\nConstant Velocity\\n\\u2713\\n68.0\\n57.8\\n50.0\\n100\\n19.4\\n20.6\\nEgo Status MLP\\n\\u2713\\n93.0\\n77.3\\n83.6\\n100\\n62.8\\n65.6\\nLTF [12]\\n\\u2713\\n\\u2713\\n97.4\\n92.8\\n92.4\\n100\\n79.0\\n83.8\\nTransFuser [12]\\n\\u2713\\n\\u2713\\n\\u2713\\n97.7\\n92.8\\n92.8\\n100\\n79.2\\n84.0\\nUniAD [21]\\n\\u2713\\n\\u2713\\n\\u2713\\n97.8\\n91.9\\n92.9\\n100\\n78.8\\n83.4\\nPARA-Drive [50]\\n\\u2713\\n\\u2713\\n\\u2713\\n97.9\\n92.4\\n93.0\\n99.8\\n79.3\\n84.0\\nHuman\\n100\\n100\\n100\\n99.9\\n87.5\\n94.8\\nTable 1: Navtest Benchmark. We show the no at-fault collision (NC), drivable area compliance\\n(DAC), time-to-collision (TTC), comfort (Comf.), and ego progress (EP) subscores, and the PDM\\nScore (PDMS), as percentages. Relying on the ego status is insufficient for competitive results. While\\nsensor agents improve, the gap to human performance highlights our benchmark\\u2019s challenges.\\nproperties of both learned and rule-based planners, whereas distance-based open-loop metrics show\\na clear misalignment. Decreasing the CLS duration in (b) from d = 15s to d = 4s further raises\\nthe correlation of PDMS and OLS, as the simulation horizon more closely matches the open-loop\\ncounterparts. Interestingly, we observe a higher correlation of open-loop metrics in (c) when reducing\\nthe planning frequency to 2Hz. We expect a lower planning frequency to mitigate cumulative errors\\nand enhance the controller\\u2019s stability in simulation, leading to more precise trajectory execution.\\nMoreover, we observe an increase in correlation for longer PDMS horizons in (d), ranging from\\nh = 2s to h = 8s. While predicting the future motion over 8s is challenging in uncertain scenarios,\\nour results indicate the value of long horizons when evaluating motion planners. Lastly, replacing the\\nnon-reactive background agents with reactive IDM vehicles during closed-loop simulation in (e) has\\nlittle effect on the correlation, possibly due to the similar difficulty of both tasks [16].\\nThe imbalanced distribution of different types of planners in our study may introduce biases into\\nthe overall correlations presented in Fig. 3. To address this, we visualize the individual correlations\\nof each planner type in Fig. 4. The correlation values vary depending on metric range and variance\\nof each planner type. Nevertheless, when examining each type individually, the PDMS is better\\ncorrelated to the CLS than the OLS, and is always positively correlated.\\n4.2\\nAnalysis of the State of the Art in End-to-End Autonomous Driving\\nIn this section, we benchmark a collection of end-to-end architectures, which previously achieved\\nstate-of-the-art performance on existing open- or closed-loop benchmarks.\\nMethods. As a lower bound, we consider the (1) Constant Velocity baseline detailed in Section 3.1.\\nWe include an (2) Ego Status MLP as a second \\\"blind\\\" agent, which leverages an MLP for trajectory\\nprediction given only the ego velocity, acceleration and navigation goal. As an established architecture\\non CARLA, we evaluate our reimplementation of (3) TransFuser [12], which uses three cropped\\nand downscaled forward-facing cameras, concatenated into a 1024 \\u00d7 256 image, and a rasterized\\nBEV LiDAR input for predicting waypoints. It performs 3D object detection and BEV semantic\\nsegmentation as auxiliary tasks. We then consider (4) Latent TransFuser (LTF) [12], which shares\\n7\\nConfig\\nParameter\\nSetting\\nNC \\u2191\\nDAC \\u2191\\nTTC \\u2191\\nComf. \\u2191\\nEP \\u2191\\nPDMS \\u2191\\nA1\\nDefault config\\nSeed 1\\n98.0\\n91.3\\n94.2\\n100\\n78.1\\n83.3\\nA2\\nSeed 2\\n97.7\\n92.8\\n92.8\\n100\\n79.2\\n84.0\\nA3\\nSeed 3\\n97.9\\n93.0\\n93.1\\n100\\n79.3\\n84.4\\nB1\\nEgo status\\nGoal only\\n96.8\\n91.9\\n91.3\\n98.6\\n77.3\\n81.8\\nB2\\nGoal and velocity only\\n96.7\\n92.3\\n91.0\\n100\\n77.8\\n82.3\\nC1\\nCamera FOV\\n60\\u25e6(1 camera)\\n96.7\\n90.2\\n90.9\\n100\\n75.8\\n80.3\\nC2\\n160\\u25e6(3 cameras)\\n97.6\\n91.4\\n92.7\\n100\\n78.1\\n82.8\\nC3\\n240\\u25e6(5 cameras)\\n97.8\\n92.5\\n93.0\\n100\\n79.2\\n84.1\\nD1\\nLiDAR range\\nF:16, B:16, L:16, R:16\\n96.9\\n88.3\\n91.2\\n100\\n74.6\\n79.1\\nD2\\nF:64, B:32, L:32, R:32\\n97.8\\n92.7\\n93.4\\n100\\n79.3\\n84.3\\nD3\\nF:64, B:64, L:64, R:64\\n96.8\\n90.3\\n91.5\\n100\\n76.5\\n81.0\\nE1\\nSupervision\\nNo BEV segmentation\\n97.4\\n90.5\\n92.2\\n100\\n77.1\\n81.6\\nE2\\nNo 3D detection\\n97.8\\n92.7\\n92.9\\n100\\n79.2\\n84.0\\nTable 2: TransFuser Ablations. The default configuration, which obtains the best results, uses the\\nnavigation goal, velocity, and acceleration as ego status inputs. Its camera FOV is around 140\\u25e6and\\nLiDAR range is 32m to the front (F), back (B), left (L), and right (R). It uses both auxiliary tasks.\\nthe same architecture as TransFuser but replaces the LiDAR input with a learned embedding, hence\\nrequiring only camera inputs. Moreover, we provide two state-of-the-art end-to-end architectures\\nfor open-loop trajectory prediction on nuScenes. (5) UniAD [21] incorporates a wide range of tasks,\\nsuch as mapping, tracking, motion, and occupancy prediction in a semi-sequential architecture, which\\nprocesses feature representations through several transformer decoders culminating in a trajectory\\nplanning module. (6) PARA-Drive [50] uses the same auxiliary tasks, but parallelizes the network\\narchitecture, such that the auxiliary task heads are trained in parallel with a shared encoder. Both\\nUniAD and PARA-Drive use a BEVFormer backbone [31], which encodes the eight surround-\\nview 1920 \\u00d7 1080 camera images over four temporal frames into a BEV feature representation.\\nImplementation details for all methods are provided in the supplementary material.\\nResults. We show our results on navtest in Table 1. The Constant Velocity model is a lower\\nbound, as the agent is used to identify trivial driving scenes excluded from the benchmark. The Ego\\nStatus MLP achieves a PDMS of 65.6, showing the value of the acceleration and navigation goal for\\navoiding collisions and driving off-road. However, we observe a clear gap between agents relying\\nsolely on the ego status and those considering sensor data, in contrast to results on nuScenes [32]. All\\nsensor agents achieve a PDMS of over 83, where TransFuser and PARA-Drive marginally perform\\nbest, with a PDMS of 84.0. Surprisingly, the camera-only LTF achieves similar results (83.8). UniAD\\nreaches a PDMS of 83.4, which, together with PARA-Drive, do not surpass the performance of\\nTransFuser and LTF, despite the need for more demanding training, e.g., 80 GPUs for 3 days to train\\nPARA-Drive versus 1 GPU for 1 day for TransFuser on the navtrain split. Due to the definition\\nof at-fault collisions, which discard certain rear-collisions into the ego vehicle, we suspect that\\nsurround-view cameras used by UniAD and PARA-Drive, and LiDAR input of TransFuser, are less\\nimportant than the wide-angle front camera which is the only input of LTF. The 10 PDMS discrepancy\\nto the human operator demonstrates that navtest poses challenges even to well-studied end-to-end\\narchitectures. Specifically, the drivable area compliance (DAC) and ego progress (EP) subscores\\nremain the most challenging. Notably, EP cannot be solved purely by human imitation, given that the\\nmaximum progress estimate used for normalization is based on a privileged rule-based motion planner.\\nInterestingly, all agents achieve near-perfect comfort scores, indicating that smooth acceleration and\\njerk profiles are learned naturally from human imitation.\\nAnalyzing TransFuser. In Table 2, we compare several training settings for TransFuser. For\\nthe three training seeds in configs A1-A3, we observe a standard deviation of \\u00b1 0.56 in PDMS,\\nwhich is relatively small compared to variance among training seeds for closed-loop simulations in\\nCARLA [17]. Further, unlike CARLA, NAVSIM is deterministic, and we obtain identical scores\\nwhen repeating evaluations of a deterministic driving agent. Discarding velocity and acceleration\\n(B1) lowers PDMS by 1.5 \\u22122.6, whereas only removing the acceleration (B2) lowers the score by\\n1.0 \\u22122.1. We conclude that while TransFuser benefits from the ego status, it is not purely relying\\non the kinematic state for planning. Next, only considering the front camera (C1) with a 60\\u25e6FOV\\nleads to a small drop in almost all subscores, compared to our default setting of three cropped and\\n8\\nconcatenated images with a FOV of 140\\u25e6. However, expanding the FOV with additional cameras\\ndoes not result in substantially improved scores. Interestingly, restricting the LiDAR range to 16m\\nin all directions (D1), results in a score of 79, which is lower than dropping LiDAR altogether (see\\nLTF in Table 1). Expanding the LiDAR range to 64m in the forward direction (D2) or all directions\\n(D3) does not provide significant improvements. We suspect that changes in the LiDAR range overly\\nsimplify or complicate the auxiliary 3D object detection and BEV semantic segmentation tasks, which\\noperate in the LiDAR coordinate frame, hindering effective imitation learning. We check the impact\\nof the auxiliary tasks by excluding them, where performance drops without BEV Segmentation (E1).\\n0.25\\n0.50\\n0.75\\n1.00\\nPDM Score\\n0\\n10\\n20\\n#Teams\\nConstant Velocity\\nTransFuser\\nFigure 5: NAVSIM Challenge.\\nCVPR 2024 NAVSIM Challenge. We organized the inaugu-\\nral NAVSIM challenge which ran from March - May 2024.\\nTo ensure integrity, we used a private dataset and only gave\\nparticipants access to sensor inputs, withholding all annota-\\ntions. Competitors could submit their agent\\u2019s trajectories to\\nour leaderboard, where they were simulated and scored to ob-\\ntain the PDMS. We received 463 submissions from 143 teams,\\nof which 78 submissions were made publicly visible. We sum-\\nmarize their scores in Fig. 5, relative to the constant velocity\\nand TransFuser baselines from Table 1. The winning entry\\nextended TransFuser and learned to predict proxy subscores\\nfor trajectory samples [30], with a sampling strategy inspired\\nby VADv2 [10]. These predicted subscores were weighted\\nalongside a human imitation score to select the output plan. While the idea of sampling and scoring\\ntrajectories is well-known [46, 51, 55, 6, 16], it has recently been overlooked in favor of approaches\\nwhich predict a single trajectory. This result prompts a reassessment of such methods. The team that\\nplaced second employed a vision language model (VLM) for driving, which is rapidly emerging as\\na sub-field in the AV literature [45, 33, 53, 58]. Several submissions attempted to reimplement or\\nextend prior work on nuScenes such as UniAD [21] and VAD [25], but were unable to outperform the\\nTransFuser baseline by the challenge submission deadline, given the significant engineering challenge\\nand compute requirements. The diversity of the solutions on the leaderboard shows the potential\\nof NAVSIM as a framework for pushing the frontiers of autonomous driving research. We aim to\\nhold future competitions with more challenging data and metrics. Detailed competition results and\\nstatistics are provided in the supplementary material.\\nMethod\\nPDMS \\u2191\\nTransFuser [12]\\n83.9 \\u00b1 0.4\\nLTF [12]\\n83.5 \\u00b1 0.6\\nEgo Status MLP\\n66.4 \\u00b1 0.9\\nHydra-MDP [30]\\n91.3\\nConstant Velocity\\n20.6\\nTable 3: Leaderboard 1.1.\\nNAVSIM 1.1 Leaderboard. Due to the lasting interest af-\\nter the challenge, we re-opened a public evaluation server\\nusing navtest as the evaluation split. The leaderboard en-\\ncourages multi-seed submissions and includes reproducibility\\nrequirements for openly releasing code and model weights.\\nWe populated the leaderboard with 3 training seeds of our\\nlearned baselines, as shown in Table 3. For reference, we also\\ninclude a single seed of the 2024 challenge winner [30] and\\nconstant velocity baseline. Further information is provided in\\n ...\"}\n{\"section_content\":\"\"}\n{\"section_content\":\"\"}\n{\"section_content\":\"We refned the prompt design  and evaluated ChatGPT (gpt-3.5-turbo) on four ABSA tasks. Due to budget constraints, we tested it with 200 random samples for each task.\\nThe experimental results, shown in Table 7, highlight the remarkable performance advantage of cross-task transferred and fully supervised MvP compared to the few-shot prompted ChatGPT $(+7.06\\\\%$ and $+22.84\\\\%$ absolute F1 scores).\"}\n\n... # only display 4 rows in JSON format, more are truncated due to length constraint based on max_tokens (5000)"}
{"role": "assistant", "content": "[Thought]: The retrieved sections do not contain the specific information about the best method on CIFAR10 with 1 generated image per class under 50-shot setting. I will perform a similarity search in the vectorstore to find the relevant context.\n[Action]:\nClassicRetrieve(query='According to the DeepKKT paper, which method performs the best on CIFAR10 with 1 generated image per class under 50-shot setting?', limit=5)"}
{"role": "user", "content": "[Observation]:\n{\"score\":0.7504,\"pdf_id\":\"1bd3021a-e648-5ed5-a5a4-0c835dc0f3cd\",\"page_number\":8,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"7fb50aa2-f81c-52ae-86d6-8effe1716e64\",\"text\":\"52.00\\u00b10.59\\n52.19\\u00b10.53\\n60.59\\u00b10.41\\n-\\nTable 2: Performance of Few-shot learning on CIFAR10. \\u2018img\\/cls\\u2019 and \\u2018shot\\/class\\u2019 refer to the\\nper-class number of generated images and the training samples used in generating the distilled dataset,\\nrespectively. \\u2018ratio\\u2019 is the ratio of the seen samples among the entire training samples. 0 shot refers\\nto the distillation task performed without any access to the training data.\\nOur DeepKKT relies solely on a pre-trained model without relying on the training dataset. This\"}\n{\"score\":0.7101,\"pdf_id\":\"6a21fb24-24c7-59f7-8290-781d9dd35dfa\",\"page_number\":18,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"bcf6c485-9105-56e2-9e61-2ec5b9a3fe40\",\"text\":\"CIFAR-10 [60] includes 60, 000 color images in 10 different classes, with 6,000 images per class.\\nThis is a widely used benchmark in machine learning and computer vision. The training set consists\\nof 50, 000 images, while the test set comprises 10, 000 images.\\nCIFAR-10-C is generated based on the previous leterature [45]. The corruption types include\\nGaussian noise, defocus blur, glass blur, impulse noise, shot noise, snow, zoom blur, brightness,\"}\n{\"score\":0.7086,\"pdf_id\":\"be08c51c-0050-572a-944b-45f10f85f2c4\",\"page_number\":19,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"e400ffe2-eb08-5a87-a630-316c5194b90a\",\"text\":\"CIFAR-10 [24] has ten classes with 50,000 training images and 10,000 test images. The image is\\n32 \\u00d7 32 in size. The dataset is split into five disjoint tasks with two classes per task.\\nCIFAR-100 [24] has 100 classes with 50,000 training samples and 10,000 test samples. Image size\\nis 32 \\u00d7 32. It is split into 10 disjoint tasks with 10 classes per task.\\nTinyImageNet [25] has 200 classes, 100,000 training samples, and 10,000 test samples. Image size\"}\n{\"score\":0.6882,\"pdf_id\":\"f9870f1a-eaa7-5ed8-a7ed-d4d76104a017\",\"page_number\":16,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"d536200d-9f33-5c57-83b2-5d6d09f72b6b\",\"text\":\"for image classification, as cited in several works (Zhu et al., 2021; Goyal et al., 2020; Pan et al.,\\n2021). It contains 1.2 million training images and 50K validation images across the 1000 classes. Due\\nto its difficulty, stemming from the number of classes and images, it presents a perfect benchmarking\\nmedium for our one-shot pruning approach.\\nCIFAR 10 The CIFAR-10(Krizhevsky et al., 2009) datasets are a common benchmark across both\"}\n{\"score\":0.6856,\"pdf_id\":\"cdf4403f-4197-5d47-a253-76b66147959f\",\"page_number\":13,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"7dfae5c0-94dd-565e-87cb-8d577bdbd71e\",\"text\":\"images. CIFAR10 has 10 classes and CIFAR100 has 100 classes. We follow a 75%-8.3%-16.6%\\ntrain-validation-test split. The validation set is used for hyperparameter tuning and early-stopping.\\nImageNet (Deng et al., 2009) consists of 1.2 million training images spanning 1,000 classes. We\\nreserved 50,000 of these images to be used as validation set and used another 50,000 images as a\\ntest set. Following the data transform of Han et al. (2023b), the images are cropped to be of size\"}\n\nIn total, 5 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The top result from the vectorstore search contains the relevant table (Table 2) that shows the performance of few-shot learning on CIFAR10. I will extract the method that performs the best under the 50-shot setting with 1 generated image per class.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT text_content FROM chunks WHERE ref_paper_id = '1bd3021a-e648-5ed5-a5a4-0c835dc0f3cd' AND page_number = 8 AND ordinal = 0;\")"}
{"role": "user", "content": "[Observation]:\n[Error]: Runtime error during SQL execution and output formatting: Binder Error: Referenced column \"page_number\" not found in FROM clause!\nCandidate bindings: \"chunks.ref_page_id\", \"chunks.ref_paper_id\", \"chunks.text_content\""}
{"role": "assistant", "content": "[Thought]: The error indicates that the column `page_number` is not available in the `chunks` table. I will modify the query to use the `sections` table instead, as it contains the `page_numbers` field.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_content FROM sections WHERE ref_paper_id = '1bd3021a-e648-5ed5-a5a4-0c835dc0f3cd' AND 8 IN page_numbers;\")"}
{"role": "user", "content": "[Observation]:\n{\"section_content\":\"Experiments\\n5.1\\nDSVs: Revival of Support Vectors in Deep Learning\\n\\\"deer\\\" \\n92.5 % con\\ufb01dence\\n\\\"cat\\\" \\n89.8 % con\\ufb01dence\\n\\\"deer\\\" \\n92.5 % con\\ufb01dence\\n\\\"cat\\\" \\n89.8 % con\\ufb01dence\\n{'dog'}\\n{'cat'}\\n{'deer'}\\n{'cat'}\\n{'deer'}\\n{'Flower'}\\n{'Deer'}\\nFigure 3: Model predictions for orig-\\ninal versus DSV-informed edited im-\\nages. (Top) Images were altered man-\\nually based on decision criteria de-\\nrived from DSVs, influencing the\\nmodel\\u2019s prediction. (Bottom) Images\\nwere altered based on DeepKKT loss.\\nDSVs meet SVM characteristics\\nAs discussed in Sec-\\ntion 3.2, the principle of complementary slackness within\\nthe KKT conditions suggests that support vectors should be\\nsituated on the decision boundary, implying that support vec-\\ntors typically exhibit high uncertainty from a probabilistic\\nperspective, i.e., they possess high entropy. While DeepKKT\\ndoes not explicitly incorporate the complementary slackness\\ncondition due to computational costs and ambiguity, Fig. 2a\\nsuggests that DSVs implicitly fulfill this condition; During\\nthe training process, we observe an increase in the entropy of\\nDSV candidates, hinting that the generated DSVs are close\\nto the decision boundary.\\nIn addition, we can infer the importance of a sample in the\\ndecision process by utilizing the DeepKKT condition. We\\ntrained the Lagrangian multiplier \\u03bb for each test image. Fig-\\nure 2b shows a strong correlation between the sum of \\u03bb values\\nfor each class and its test accuracy. This finding is intriguing\\nbecause, despite the model achieving nearly 100% accuracy\\nduring training due to overparameterization, DSVs provide\\ninsights into categorical generalization in the test phase. Not\\nonly does measuring its credibility indicate that a large \\u03bb\\nrefers to an \\u2018important\\u2019 image for training, but \\u03bb could also\\nserve as a natural core-set selection measure. Table 1 shows\\nthis to be true. On the CIFAR-10 [11] dataset, we selected\\nimages with high \\u03bb values and retrained the network with the\\nselected images. In this case, the selected DSVs show higher test acccuracies compared to random\\nselection. This characteristic resembles that of support vectors, as the model can be reconstructed\\nwith support vectors.\\nFinally, Fig. 1 demonstrates the high fidelity of the generated DSVs, providing practical evidence that\\nthese DSVs lie on the data manifold. Similar to how support vectors are reconstructed in an SVM,\\nthe DeepKKT condition enables the reconstruction of these vectors without referencing training data.\\nThis shows the effectiveness and adaptability of our DeepKKT in capturing key data features.\\nDSVs for Few Shot Dataset Distillation\\nDeepKKT emerges as a pioneering algorithm tailored for\\npractical dataset distillation. DSVs addresses two critical concerns: 1) Protecting private information\\nthrough data synthesis, and 2) Reducing the communication load by minimizing the size of data\\ntransmission. Traditional distillation algorithms encounter a fundamental paradox; as data predomi-\\nnantly originate from edge devices like smartphones [18, 17, 10], the requirement to access the entire\\ndataset introduces significant communication overhead and heightens privacy concerns.\\n7\\nimg\\/cls\\nshot\\/class\\nratio (%)\\nDC [37]\\nDSA [35]\\nDM [36]\\nDSVs\\n1\\n0\\n0\\n-\\n-\\n-\\n21.68 \\u00b1 0.80\\n1\\n0.02\\n16.48\\u00b10.81\\n15.41\\u00b11.91\\n13.03\\u00b10.15\\n22.69 \\u00b1 0.38\\n10\\n0.2\\n19.66\\u00b10.78\\n21.15\\u00b10.58\\n22.42\\u00b10.43\\n-\\n50\\n1\\n25.90\\u00b10.62\\n26.01\\u00b10.70\\n24.42\\u00b10.29\\n-\\n500\\n10\\n28.06\\u00b10.61\\n28.20\\u00b10.63\\n25.06\\u00b11.20\\n-\\n10\\n0\\n0\\n-\\n-\\n-\\n30.35 \\u00b1 0.99\\n10\\n0.2\\n25.06\\u00b11.20\\n26.67\\u00b11.04\\n29.77\\u00b10.66\\n37.90 \\u00b1 1.69\\n50\\n1\\n36.44\\u00b10.52\\n36.63\\u00b10.52\\n36.63\\u00b10.52\\n-\\n500\\n10\\n43.55\\u00b10.50\\n44.66\\u00b10.59\\n47.96\\u00b10.95\\n-\\n50\\n0\\n0\\n-\\n-\\n-\\n39.35 \\u00b1 0.54\\n50\\n1\\n41.22\\u00b10.90\\n41.29\\u00b10.45\\n48.93\\u00b10.92\\n53.56 \\u00b1 0.73\\n500\\n10\\n52.00\\u00b10.59\\n52.19\\u00b10.53\\n60.59\\u00b10.41\\n-\\nTable 2: Performance of Few-shot learning on CIFAR10. \\u2018img\\/cls\\u2019 and \\u2018shot\\/class\\u2019 refer to the\\nper-class number of generated images and the training samples used in generating the distilled dataset,\\nrespectively. \\u2018ratio\\u2019 is the ratio of the seen samples among the entire training samples. 0 shot refers\\nto the distillation task performed without any access to the training data.\\nOur DeepKKT relies solely on a pre-trained model without relying on the training dataset. This\\nunique approach eliminates the need for edge devices to store or process large volumes of private\\ndata. As shown in Table 2, while traditional methods suffer significant performance drops under these\\nscenarios and are incapable of implementing zero-shot scenarios. Conversely DeepKKT remains\\neffective, requiring only minimal data: a single image per sample (i.e., initialization with real data),\\nor in some cases, no images at all. For the zero-image setting, we initialized the images with data\\nfrom other datasets to ensure diversity.\\nDSVs Encode the Decision Criteria Visually\\nOur findings suggest that DSVs not only satisfy the\\nconditions of classical support vectors but also offers a global explanation of visual information.\\nFig. 3 experimentally verifies our claims and illustrates the practical use of DSVs, e.g., analysis of\\nFig. 1-Cifar10 reveals the decision criteria for classifying deer, cats, and dogs: 1) DSVs highlight\\nantlers in deer, signifying them as a distinctive characteristic. 2) Pointed triangular ears are a recurring\\nfeature in DSVs of cats. 3) For dogs, a trio of facial dots holds significant importance. Using these\\nobservations, we altered a deer\\u2019s image by erasing its antlers and reshaping its ears to a pointed\\ncontour, which reduced the model\\u2019s confidence in classifying it as a deer, and caused the model to\\nmisclassify it as a cat. Similarly, by smoothing the ears of a cat image to diminish its classification\\nconfidence and then adding antlers or three facial dots, we influenced the model to reclassify the\\nimage as a deer or a dog, respectively. Additionally, the DeepKKT-altering case in Fig. 3-Bottom\\nsupports our assertions. Altering a flower image to resemble a deer class by changing the target class\\nin the primal and dual feasibility loss, antlers grew similar to our manipulation.\\nThis discovery holds significant implications about making models responsible; it introduces a\\nqualitative aspect to assessing model performance. Consider a deer classification problem again. The\\nmodel in our study would be less suitable, as evidenced by Fig. 1-Cifar10-deer, which indicates the\\nmodel\\u2019s reliance on antlers for identifying deer \\u2013 a feature not present in winter. This shows that\\nDSVs enable us to conduct causal predictions by qualitatively analyzing models, as SVM does.\\n5.2\\nUnlocking the potential of classifier as generator with DeepKKT\\nFigure 4: DSVs generated by a model that\\nunderwent transfer learning from CIFAR-\\n10 to SVHN. During transfer learning, only\\nthe last layer is updated by SVHN.\\nPractical Model Inversion with DeepKKT\\nIn cloud\\nenvironments or APIs, models are deployed with the\\nbelief that although they are sometimes trained with\\nsensitive information, their black-box nature prevents\\nusers from inferring the data. This belief makes it pos-\\nsible to deploy sensitive models. However, as demon-\\nstrated in Fig 1, this belief is no longer valid. Fig. 4\\nfurther illustrates that model inversion remains feasible\\neven in practical scenarios such as transfer learning\\nscenarios, where only specific layers of a foundation\\nmodel are fine-tuned. Remarkably, DeepKKT condi-\\n8\\ne \\nShield \\nDumbbell\\nHarp \\nLobster\\nScottish Dog \\nSink\\nCoil \\nEspresso Machine\\nBullet Proof \\nGolf Ball\\nBalloon \\nSpaniel\\nBalloon & Spaniel\\nShield & Dumbbell\\nHarp & Lobster\\nScottish Dog & Sink\\nShield \\nDumbbell\\nHarp \\nLobster\\nScottish Dog \\nSink\\nof \\nBalloon \\nSpaniel\\nWeighing scale \\nSock\\nShield \\nDumbbell\\nHarp \\nLobster\\nScottish Dog \\nSink\\nalamander \\nnfant Bed\\nCoil \\nEspresso Machine\\nBullet Proof \\nGolf Ball\\nBalloon \\nSpaniel\\nWeighing scale \\nSock\\nShield \\nDumbbell\\nHarp \\nLobster\\nScottish Dog \\nSink\\nmander \\nnt Bed\\nCoil \\nEspresso Machine\\nBullet Proof \\nGolf Ball\\nBalloon \\nSpaniel\\nWeighing scale \\nSock\\nShield \\nDumbbell\\nHarp \\nLobster\\nScottish Dog \\nSink\\nSalamander \\nInfant Bed\\nCoil \\nEspresso Machine\\nBullet Proof \\nGolf Ball\\nBalloon \\nSpaniel\\nShield \\nDumbbell\\nHarp \\nLobster\\nScottish Dog \\nSink\\nCoil \\no Machine\\nBullet Proof \\nGolf Ball\\nBalloon \\nSpaniel\\nBalloon\\nSpaniel\\nLobster\\nHarp\\nWeighing scale \\nSock\\nSalamander \\nInfant Bed\\nCoil \\nEspresso Machine\\nBullet Proof \\nGolf Ball\\nDugong\\nBrown Bear\\nYacht\\nScarf\\nScuba Diver\\nLadybug\\nFigure 6: (Top) Generated DSVs using soft labels: \\u03b4 was set 0.6, i.e., soft label y = 0.4yleft + 0.6yright.\\n(Middle) Examples of latent (soft-label) interpolation. (Bottom) Image Editing through latent.\\ntions enable model inversion even in these challenging\\nenvironments, suggesting that they can be applied to a\\nsubset of the parameter space rather than the entire parameter space i.e., a more relaxed condition.\\nClassifier as Latent generative model\\nConsidering the impressive capabilities of DSVs in the\\nimage generation domain, and the geometric interpretation that DSVs are samples near the decision\\nboundaries, it is noted that enforcing the DeepKKT condition resembles the diffusion process. In\\neach iteration, the DSV develops through the DeepKKT condition as follows:\\nxt+1 = xt \\u2212\\u03b7 \\u00b7 ([\\u2207xLstat(A(xt)) + \\u03b22Ltot(xt) + \\u03b23Lnorm(xt)] + \\u03b21\\u2207xLprimal(A(xt))) .\\n(10)\\nThis is similar to the generalized form of the score-based diffusion process:\\nxt+1 = xt + \\u03f5t \\u00b7 (\\u2207x log p(xt) + \\u03b3\\u2207x log p(y|xt)) .\\n(11)\\nprimal\\nstationarity\\n{'bird'}\\n{'car'}\\n{'horse'}\\n{'deer'}\\n{'bird'}\\n{'car'}\\n{'horse'}\\n{'deer'}\\nFigure 5: Results showing DeepKKT im-\\nages created solely by the primal condition\\nor by the stationary condition. A sole usage\\nof the primal condition shows low fidelity.\\nThe first three loss terms in Eq. (10) aim to maximize\\nthe score (\\u2207x log p(xt)), while the last term, the pri-\\nmal feasibility term, corresponds to the guidance term\\n(\\u03b3\\u2207x log p(y|xt)). As shown in Fig. 5, when only the\\nprimal loss term is used, meaningful DSV samples\\nare not generated. This indicates that the other losses\\n(stationarity and manifold terms) function update the\\nimage towards manifold i.e., score function. From this\\nperspective, an arbitrarily assigned label y can be used\\nas a latent variable for guidance.\\nTo experimentally verify this, we performed a latent\\ninterpolation task and image editing, which is common\\n9\\nin generative models [8, 3] By mixing different labels (yi = (1 \\u2212\\u03b4)ya + \\u03b4yb, where ya \\u0338= yb), we\\ngenerated DSVs as depicted in Fig. 6. When generating DSVs with these mixed soft labels, the\\ngenerated DSVs semantically represent the midpoint between the two classes. A generated DSV\\neither simply contains both images (the case of \\u201cballoon\\\" and \\u201cspaniel\\\") or semantically \\u2018fuse\\u2019 objects\\n(the case of \\u201clobster\\\" and \\u201charp\\\", producing an image of a harp made out of lobster claws). For the\\nimage editing task, we assigned the latent variable to the desired class and then aligned the image\\nusing DeepKKT loss. The result was quite surprising: the method successfully transferred the image\\nto the desired class while maintaining the original structure. For example, the sail of a yacht was\\nseamlessly transformed into the shape of a scarf. This task was impossible with other methods; in\\ndiffusion models, for instance, a mask would be needed to edit the image seamlessly.\\nThe fact that the generated images correctly merge the semantics of the classes suggests a couple of\\nsignificant implications: 1) 1) New Generative Model: This approach offers a new type of generative\\nmodel as an alternative to GANs and diffusion models. It can handle the same task without the need\\nfor training a specific model, as it leverages existing classification models for generative purposes.\\nFurthermore, it is lightweight compared to diffusion models. For example, as the model size of\\na pretrained ResNet50 for ImageNet is only one-twentieth of that for SDXL [25], DSVs show\\na potential to leverage existing classification models for generative purposes. 2) Exploration of\\nClassification Model Generalization: Unlike other generative models, classification models are\\ntrained simply to predict the label of an image. Yet, in latent interpolation and editing tasks, they\\ndemonstrate an understanding of semantics. This implies that, despite being trained to memorize\\nclass labels, the models grasp the overall semantics of the dataset. As they can generate seemingly\\nunseen samples by interpolation and editing.\\n6\"}\n\nIn total, 1 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved section content includes the relevant table (Table 2) that shows the performance of few-shot learning on CIFAR10. I will extract the method that performs the best under the 50-shot setting with 1 generated image per class.\n[Action]:\nGenerateAnswer(answer=['DSVs', 'CIFAR100'])"}
{"role": "user", "content": "[Observation]: ['DSVs', 'CIFAR100']"}
