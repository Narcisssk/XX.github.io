{"role": "system", "content": "You are an intelligent agent with expertise in **retrieving useful context from both the DuckDB database and the Milvus vectorstore through SQL execution and similarity search** and **answering user questions**. You will be given a natural language question concerning PDF files, along with the schema of both the database and the vectorstore. Your ultimate goal is to answer the input question with pre-defined answer format. The DuckDB database contains all parsed content of raw PDF files, while the Milvus vectorstore encodes specific column cells from the database as vectors. You can predict executable actions, interact with the hybrid environment (including database and vectorstore) across multiple turns, and retrieve necessary context until you are confident in resolving the question.\n\n--------\n\n## Task Description\nEach task consists of the following parts:\n\n[Question]: User question regarding the PDF, e.g., Is there any ...?\n[Answer Format]: it describes the format of the final answer, e.g., the answer is \"Yes\" or \"No\" without punctuation.\n[Anchor PDF]: Optional, a python str or list, the PDF(s) you must use to answer the question.\n[Reference PDF]: Optional, a python str or list, the PDF(s) you may use to answer the question.\n[Conference]: Optional, a python str or list, the conference(s) and year(s) of the relevant papers for retrieval.\n[Database Schema]: A detailed serialized schema of the DuckDB database for reference when generating SQL queries. It includes 1) tables, 2) columns and their data types, 3) descriptions for these schema items, and 4) primary key and foreign key constraints.\n[Vectorstore Schema]: A detailed serialized schema of the Milvus vectorstore for reference when generating executable retrieval actions with specific parameters. It includes 1) collections, 2) fields, 3) encodable (table, column) pairs in the relational database where the vectorized content originates, and 4) grammar for valid filter rules.\n\n\n--------\n\n## Action and Observation Space\nAll allowable action types include ['RetrieveFromDatabase', 'ClassicRetrieve', 'GenerateAnswer']. Here is the detailed specification in MARKDOWN format:\n\n### Action Type\nRetrieveFromDatabase\n\n### Description\nGenerate an SQL query to retrieve the desired information from the DuckDB database. Please refer to the concrete database schema to produce a valid and executable SQL.\n\n### Observation\nThe observation space is the execution result of the SQL query. You do not need to worry about the actual execution, we will perform it for you. If the SQL failed to execute, we will return the error message. Extremely long SQL output will be truncated.\n\n### Syntax and Parameters (MARKDOWN Format)\nRetrieveFromDatabase(sql: str)\n- sql: str, required. The concrete DuckDB SQL query to execute and retrieve results.\n\n### Use Cases\n\n#### Case 1\nGet the abstract of the paper with paper_id '12345678' from the metadata table in the DuckDB database.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT abstract FROM metadata WHERE paper_id = '12345678';\")\n\n\n#### Case 2\nFind which page in the paper with paper_id '12345678' contains Figure 3.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT pages.page_number FROM images JOIN pages JOIN metadata ON images.ref_page_id = pages.page_id AND pages.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '12345678' AND images.image_caption LIKE '%Figure 3%';\")\n\n\n----\n\n### Action Type\nClassicRetrieve\n\n### Description\nGiven a query text, retrieve relevant context from the Milvus vectorstore.\n\n### Observation\nThe observation space is the retrieved top-ranked entries from the Milvus vectorstore based on queries.\n\n### Syntax and Parameters (MARKDOWN Format)\nClassicRetrieve(query: str, limit: int = 5)\n- query: str, required. The query text will be encoded and used to search for relevant context. You can rephrase the original user question to obtain a more clear and structured query requirement.\n- limit: int, optional, default to 5. The number of top-ranked context to retrieve. Please set it to a positive integer to limit the number of returned results. Extremely large limit values may be truncated.\n\n### Use Cases\n\n#### Case 1\nRetrieve top 5 pieces about a certain topic.\n\n[Action]: ClassicRetrieve(query='Is there any work about the topic structured RAG?')\n\n\n#### Case 2\nRetrieve detailed information about the learning rate for training the ResNet model. The top 4 most relevant entries will be returned based on the query.\n\n[Action]: ClassicRetrieve(query=\"What's the learning rate for training the ResNet model?\", limit=4)\n\n\n----\n\n### Action Type\nGenerateAnswer\n\n### Description\nWhen you take this action, the retrieved results suffice to answer the user question. PLEASE STRICTLY ADHERE TO THE ANSWER FORMAT FOR THE CURRENT QUESTION.\n\n### Observation\nThere is no observation for this terminal action, since it indicates the completion of the task and end of the interaction.\n\n### Syntax and Parameters (MARKDOWN Format)\nGenerateAnswer(answer: Any)\n- answer: Any, required. The final answer to the user question. Please adhere to the answer format for the current question.\n\n### Use Cases\n\n#### Case 1\nThe answer to the user question is 42.\n\n[Action]: GenerateAnswer(answer=42)\n\n\n#### Case 2\nThe answer to the user question is a list of strings: ['Results', 'Discussion'].\n\n[Action]: GenerateAnswer(answer=['Results', 'Discussion'])\n\n\n\n--------\n\n## Interaction Framework\n\nThe main interaction procedure proceeds like this:\n\n----\n\n[Thought]: ... reasoning process, why to take this action ...\n[Action]: ... which action to take, please strictly conform to the action specification ...\n[Observation]: ... execution results or error message after taking the action ...\n\n... # more interleaved triplets of ([Thought], [Action], [Observation])\n\n[Thought]: ... reasoning process to produce the final answer ...\n[Action]: ... the terminate action `GenerateAnswer`, there is no further observation ...\n\n----\n\nIn general, the main interaction loop consists of an interleaved of triplets ([Thought], [Action], [Observation]), except the last `GenerateAnswer` action which does not have \"[Observation]:\". You need to predict the \"[Thought]: ...\" followed by the \"[Action]: ...\" for each turn, and we will execute your action in the environment and provide the \"[Observation]: ...\" for the previous action.\n\n--------\n\n## Suggestions or Hints for Agent Interaction\n\n1. Explore multiple retrieval strategies. For example:\n- Experiment with different (table, column) pairs to extract diverse types of information.\n- Query various embedding models (collections) to find the most relevant context.\n\n2. Combine both structured and unstructured data. Concretely:\n- Use SQL queries to retrieve precise facts and structured data. Pay special attention to morphological variations in cell values.\n- Perform similarity searches in the vectorstore to capture semantic relationships and hidden insights.\n\n3. Iterate and refine:\n- If SQL execution result is not satisfactory, try alternative SQL queries to explore the database content carefully.\n- If the vector-based neural retrieval is insufficient, try alternative approaches or parameter settings.\n- Use your findings to validate or enrich the final response.\n\n4. Ensure confidence. That is, only make a final decision when you are confident that the retrieved information fully addresses the userâ€™s query.\n\n\nRemember that, for each question, you only have 20 interaction turns at most. Now, let's start!\n"}
{"role": "user", "content": "[Question]: In order to improve Parrot's abilities, which method proposed in the paper \"Direct Preference Optimization: Your Language Model is Secretly a Reward Model\" is used to train the model? Which method is compared with it under distribution shifts?\n[Answer Format]: Your answer should be a Python list of two strings, answering the two questions respectively. You must use abbreviations as given in the papers.\n[Anchor PDFs]: ['a8508753-17fc-5f40-8abf-245ecbfe151e', 'd35109d5-9f0a-5d99-ae90-dcaabf4bb74e']\n[Database Schema]: The database schema for /home/htc981/workspace/project/HNS-RAG/data/database/ai_research/ai_research.sql is as follows:\n/* database ai_research: This database contains information about AI research papers. Each PDF file is represented or parsed via different views, e.g., pages, sections, figures, tables, and references. We also extract the concrete content inside each concrete element via OCR.\n*/\n/* table metadata: This table stores metadata about each paper, including the number of pages, paper path and paper id.\n*/\nCREATE TABLE IF NOT EXISTS metadata (\n\tpaper_id UUID, -- A unique identifier for this paper.\n\ttitle VARCHAR, -- The title of this paper.\n\tabstract VARCHAR, -- The abstract of this paper.\n\tnum_pages INTEGER, -- The number of pages in this paper.\n\tconference_full VARCHAR, -- The full name of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tconference_abbreviation VARCHAR, -- The abbreviation of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tpub_year INTEGER, -- The year when this paper was published.\n\tvolume VARCHAR, -- The volume of the conference where this paper was published. e.g. findings.\n\tdownload_url VARCHAR, -- The url from which the paper can be downloaded.\n\tbibtex VARCHAR, -- The bibtex of this paper.\n\tauthors VARCHAR[], -- The full names of authors of this paper.\n\tpdf_path VARCHAR, -- The path to the PDF file of this paper.\n\ttldr VARCHAR, -- A brief summary of the paper's main idea or findings generated by LLM based on title and abstract.\n\ttags VARCHAR[], -- Keywords representing the paper's topics, methods, or applications generated by LLM based on title and abstract.,\n\tPRIMARY KEY (paper_id)\n);\n/* table pages: This table stores information of the pages in the papers, including their content, size and their order within the paper. The pagesare extracted using PyMuPDF.\n*/\nCREATE TABLE IF NOT EXISTS pages (\n\tpage_id UUID, -- A unique identifier for each page.\n\tpage_number INTEGER, -- The page number in the current paper, starting from 1.\n\tpage_width INTEGER, -- The pixel width of the current page.\n\tpage_height INTEGER, -- The pixel height of the current page.\n\tpage_content VARCHAR, -- The content of the page.\n\tpage_summary VARCHAR, -- A brief summary of the page content, generated by LLM, focusing on key information and describing the page content.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (page_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table images: This table stores the information about images in each paper. The images are extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS images (\n\timage_id UUID, -- The unique identifier of the image.\n\timage_caption VARCHAR, -- The caption of this image, \"\" if it doesn't have one.\n\timage_summary VARCHAR, -- A brief summary of the image, generated by LLM, focusing on key information and describing the image.\n\tbounding_box INTEGER[4], -- The bounding box of the figure in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height which are used to determine the shape of the rectangle.\n\tordinal INTEGER, -- Each figure is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (image_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table chunks: This table contains the information of each chunk of text (chunk size = 512 tokens with no overlapping) in each page of the paper. A chunk is a sub-text that is extracted from the main text using langchain, such as a sentence or a paragraph.\n*/\nCREATE TABLE IF NOT EXISTS chunks (\n\tchunk_id UUID, -- A unique identifier for each chunk of text.\n\ttext_content VARCHAR, -- The text content of the current chunk.\n\tordinal INTEGER, -- Each chunk is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (chunk_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table tables: This table stores information about tables extracted from pages using MinerU, including content (in html format), bounding box and summary of each table generated by LLM.\n*/\nCREATE TABLE IF NOT EXISTS tables (\n\ttable_id UUID, -- A unique identifier for each table.\n\ttable_caption VARCHAR, -- Caption of the table, showing key information of the table.\n\ttable_content VARCHAR, -- The content of the table in html format.\n\ttable_summary VARCHAR, -- A brief summary of the table content generated by LLM, focusing on key information and describing the table content.\n\tbounding_box INTEGER[4], -- The bounding box of the table in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height.\n\tordinal INTEGER, -- Each table is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this table is located.,\n\tPRIMARY KEY (table_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table sections: This table contains the text content of each section in the paper, e.g. `Introduction`, `Experiment`, `Conclusion`, `Reference`. The sections are extracted using PyMuPDF or MinerU.\n*/\nCREATE TABLE IF NOT EXISTS sections (\n\tsection_id UUID, -- A unique identifier for each section of text.\n\tsection_title VARCHAR, -- The title of the current section.\n\tsection_content VARCHAR, -- The text content of the current section.\n\tsection_summary VARCHAR, -- A brief summary of the section content generated by LLM, focusing on key information and describing the section content.\n\tordinal INTEGER, -- Each section is labeled with one distinct integer number in the paper, which starts from 0.\n\tpage_numbers INTEGER[], -- A list of page numbers where current section is located in the relevant paper.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (section_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table equations: This table stores information about equations extracted from pages using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS equations (\n\tequation_id UUID, -- A unique identifier for each equation.\n\tequation_content VARCHAR, -- Content of the equation in latex format.\n\tordinal INTEGER, -- Each equation is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the paper ID in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the page ID in the `pages` table where this equation is located.,\n\tPRIMARY KEY (equation_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table reference: This table stores information about references extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS reference (\n\treference_id UUID, -- A unique identifier for each reference.\n\treference_content VARCHAR, -- Content of the reference.\n\tordinal INTEGER, -- Each reference is labeled with one distinct integer number according to its order in the paper, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this reference is located.,\n\tPRIMARY KEY (reference_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n[Vectorstore Schema]: The vectorstore schema for ai_research is as follows. You can try collections with different encoding models or modalities:\n[\n    {\n        \"collection_name\": \"text_bm25_en\",\n        \"modality\": \"text\",\n        \"embed_type\": \"bm25\",\n        \"embed_model\": \"en\",\n        \"description\": \"This collection is used to store the sparse embeddings generated by the BM25 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric inner-product (IP).\",\n        \"fields\": [\n            {\n                \"name\": \"id\",\n                \"dtype\": \"INT64\",\n                \"is_primary\": true,\n                \"description\": \"The unique id for each encoded text vector in this collection.\"\n            },\n            {\n                \"name\": \"vector\",\n                \"dtype\": \"SPARSE_FLOAT_VECTOR\",\n                \"description\": \"The encoded sparse vector of the text content generated by the BM25 model. Note that, the raw text content can be uniquely identified by the triplet fields below: `table_name`, `column_name`, `primary_key`.\"\n            },\n            {\n                \"name\": \"pdf_id\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The unique id of the PDF file stored in the relational database that the encoded text belongs to. This field can be used to quickly filter the search space.\"\n            },\n            {\n                \"name\": \"page_number\",\n                \"dtype\": \"INT16\",\n                \"description\": \"The page number in the PDF file that the encoded text belongs to (starting from 1). This field can be used to quickly filter the search space. Value -1 means unknown.\"\n            },\n            {\n                \"name\": \"table_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which table in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"column_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which column under `table_name` in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"primary_key\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The primary key value of `table_name` (or which row) in the relational database that the text content belongs to. Note that, the triplet (`table_name`, `column_name`, `primary_key`) can be used to construct a one-to-one mapping between the `text` field in the current vectorstore and the cell entry in the relational database.\"\n            }\n        ]\n    },\n    {\n        \"collection_name\": \"text_sentence_transformers_all_minilm_l6_v2\",\n        \"modality\": \"text\",\n        \"embed_type\": \"sentence_transformers\",\n        \"embed_model\": \"all-MiniLM-L6-v2\",\n        \"description\": \"This collection is used to store the embeddings generated by the all-MiniLM-L6-v2 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric COSINE.\",\n        \"fields\": \"The fields of this collection are similar to the `text_bm25_en` collection.\"\n    }\n]\n\nThe following lists all encodable (table_name, column_name, encode_modality) information from the corresponding DuckDB database, where the encoded vector entries are sourced. Note that, for text modality, we directly encode cell values from the `table_name.column_name`; for image modality, we encode the cropped images for `page_number` in `pdf_id` with bounding boxes from `table_name.column_name`. You can leverage them for filter condition during similarity search:\n[\n    [\n        \"metadata\",\n        \"title\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"abstract\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"bibtex\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"tldr\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_content\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_summary\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_caption\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_summary\",\n        \"text\"\n    ],\n    [\n        \"chunks\",\n        \"text_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_caption\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_summary\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_title\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_content\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_summary\",\n        \"text\"\n    ],\n    [\n        \"equations\",\n        \"equation_content\",\n        \"text\"\n    ],\n    [\n        \"reference\",\n        \"reference_content\",\n        \"text\"\n    ]\n]\n\nHere are the operators that you can use in the filtering condition for the vectorstore:\n{\n    \"operators\": {\n        \"logical\": [\n            {\n                \"symbol\": \"not\",\n                \"example\": \"not expr\",\n                \"description\": \"True if expr is false.\"\n            },\n            {\n                \"symbol\": \"and\",\n                \"example\": \"expr1 and expr2\",\n                \"description\": \"True if both expr1 and expr2 are true.\"\n            },\n            {\n                \"symbol\": \"or\",\n                \"example\": \"expr1 or expr2\",\n                \"description\": \"True if either expr1 or expr2 are true.\"\n            }\n        ],\n        \"binary arithmetic\": [\n            {\n                \"symbol\": \"+\",\n                \"example\": \"a + b\",\n                \"description\": \"Add the two operands.\"\n            },\n            {\n                \"symbol\": \"-\",\n                \"example\": \"a - b\",\n                \"description\": \"Subtract the second operand from the first operand.\"\n            },\n            {\n                \"symbol\": \"*\",\n                \"example\": \"a * b\",\n                \"description\": \"Multiply the two operands.\"\n            },\n            {\n                \"symbol\": \"/\",\n                \"example\": \"a / b\",\n                \"description\": \"Divide the first operand by the second operand.\"\n            },\n            {\n                \"symbol\": \"**\",\n                \"example\": \"a ** b\",\n                \"description\": \"Raise the first operand to the power of the second operand.\"\n            },\n            {\n                \"symbol\": \"%\",\n                \"example\": \"a % b\",\n                \"description\": \"Divide the first operand by the second operand and yield the remainder portion.\"\n            }\n        ],\n        \"relational\": [\n            {\n                \"symbol\": \"<\",\n                \"example\": \"a < b\",\n                \"description\": \"True if a is less than b.\"\n            },\n            {\n                \"symbol\": \">\",\n                \"example\": \"a > b\",\n                \"description\": \"True if a is greater than b.\"\n            },\n            {\n                \"symbol\": \"==\",\n                \"example\": \"a == b\",\n                \"description\": \"True if a is equal to b. Please use **two** equal signs for equality comparison.\"\n            },\n            {\n                \"symbol\": \"!=\",\n                \"example\": \"a != b\",\n                \"description\": \"True if a is not equal to b.\"\n            },\n            {\n                \"symbol\": \"<=\",\n                \"example\": \"a <= b\",\n                \"description\": \"True if a is less than or equal to b.\"\n            },\n            {\n                \"symbol\": \">=\",\n                \"example\": \"a >= b\",\n                \"description\": \"True if a is greater than or equal to b.\"\n            },\n            {\n                \"symbol\": \"in\",\n                \"example\": \"a in [b, c, ...]\",\n                \"description\": \"True if a is equal to any of the values in the list.\"\n            }\n        ],\n        \"array operations\": [\n            {\n                \"symbol\": \"[]\",\n                \"example\": \"bbox[0]\",\n                \"description\": \"This expression gets the first element in array bbox. For example, 'bbox[0] < 50' evaluates to true if the value of bbox[0] is less than 50.\"\n            },\n            {\n                \"symbol\": \"array_contains\",\n                \"example\": \"array_contains(bbox, 100)\",\n                \"description\": \"This expression evaluates to true if array bbox contains element 100.\"\n            },\n            {\n                \"symbol\": \"array_length\",\n                \"example\": \"array_length(int_array) == 4\",\n                \"description\": \"This expression evaluates to true if int_array contains exactly 4 elements.\"\n            }\n        ]\n    },\n    \"use cases\": [\n        {\n            \"example\": \"table_name == 'chunks' and column_name == 'text_content'\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and column_name equal to 'text_content'.\"\n        },\n        {\n            \"example\": \"table_name == 'chunks' and primary_key in ['123', '456', '789']\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and primary_key equal to any of the values in the list ['123', '456', '789'].\"\n        },\n        {\n            \"example\": \"bbox[0] + bbox[2] <= 100 and bbox[1] + bbox[3] <= 300 and pdf_id == '123456' and page_number == 1\",\n            \"description\": \"For image modality, filter results to include only image regions that are entirely within the upper-left quadrant of page 1 in the PDF with ID '123456', assuming the page dimensions are 200 (width) x 600 (height).\"\n        }\n    ]\n}"}
{"role": "assistant", "content": "[Thought]: First, I need to find the paper with the title \"Direct Preference Optimization: Your Language Model is Secretly a Reward Model\" and retrieve its paper_id. Then, I can use this paper_id to search for the relevant information in the sections or chunks of the paper.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT paper_id FROM metadata WHERE title = 'Direct Preference Optimization: Your Language Model is Secretly a Reward Model';\")"}
{"role": "user", "content": "[Observation]:\n{\"paper_id\":\"a8508753-17fc-5f40-8abf-245ecbfe151e\"}\n\nIn total, 1 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: Now that I have the paper_id, I can search for the method used to train the model and the method compared with it under distribution shifts. I will start by searching the sections and chunks of the paper for relevant information.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_title, section_content FROM sections WHERE ref_paper_id = 'a8508753-17fc-5f40-8abf-245ecbfe151e';\")"}
{"role": "user", "content": "[Observation]:\n{\"section_title\":\"Introduction\",\"section_content\":\"Introduction\\nLarge unsupervised language models (LMs) trained on very large datasets acquire surprising capabili-\\nties [11, 7, 40, 8]. However, these models are trained on data generated by humans with a wide variety\\nof goals, priorities, and skillsets. Some of these goals and skillsets may not be desirable to imitate; for\\nexample, while we may want our AI coding assistant to understand common programming mistakes\\nin order to correct them, nevertheless, when generating code, we would like to bias our model toward\\nthe (potentially rare) high-quality coding ability present in its training data. Similarly, we might want\\nour language model to be aware of a common misconception believed by 50% of people, but we\\ncertainly do not want the model to claim this misconception to be true in 50% of queries about it!\\nIn other words, selecting the model\\u2019s desired responses and behavior from its very wide knowledge\\nand abilities is crucial to building AI systems that are safe, performant, and controllable [26]. While\\nexisting methods typically steer LMs to match human preferences using reinforcement learning (RL),\\n\\u21e4Equal contribution; more junior authors listed earlier.\\n37th Conference on Neural Information Processing Systems (NeurIPS 2023).\\nFigure 1: DPO optimizes for human preferences while avoiding reinforcement learning. Existing methods\\nfor \\ufb01ne-tuning language models with human feedback \\ufb01rst \\ufb01t a reward model to a dataset of prompts and\\nhuman preferences over pairs of responses, and then use RL to \\ufb01nd a policy that maximizes the learned reward.\\nIn contrast, DPO directly optimizes for the policy best satisfying the preferences with a simple classi\\ufb01cation\\nobjective, without an explicit reward function or RL.\\nwe will show that the RL-based objective used by existing methods can be optimized exactly with a\\nsimple binary cross-entropy objective, greatly simplifying the preference learning pipeline.\\nAt a high level, existing methods instill the desired behaviors into a language model using curated\\nsets of human preferences representing the types of behaviors that humans \\ufb01nd safe and helpful. This\\npreference learning stage occurs after an initial stage of large-scale unsupervised pre-training on\\na large text dataset. While the most straightforward approach to preference learning is supervised\\n\\ufb01ne-tuning on human demonstrations of high quality responses, the most successful class of methods\\nis reinforcement learning from human (or AI) feedback (RLHF\\/RLAIF; [12, 2]). RLHF methods \\ufb01t\\na reward model to a dataset of human preferences and then use RL to optimize a language model\\npolicy to produce responses assigned high reward without drifting excessively far from the original\\nmodel. While RLHF produces models with impressive conversational and coding abilities, the RLHF\\npipeline is considerably more complex than supervised learning, involving training multiple LMs and\\nsampling from the LM policy in the loop of training, incurring signi\\ufb01cant computational costs.\\nIn this paper, we show how to directly optimize a language model to adhere to human preferences,\\nwithout explicit reward modeling or reinforcement learning. We propose Direct Preference Optimiza-\\ntion (DPO), an algorithm that implicitly optimizes the same objective as existing RLHF algorithms\\n(reward maximization with a KL-divergence constraint) but is simple to implement and straight-\\nforward to train. Intuitively, the DPO update increases the relative log probability of preferred to\\ndispreferred responses, but it incorporates a dynamic, per-example importance weight that prevents\\nthe model degeneration that we \\ufb01nd occurs with a naive probability ratio objective. Like existing\\nalgorithms, DPO relies on a theoretical preference model (such as the Bradley-Terry model; [5]) that\\nmeasures how well a given reward function aligns with empirical preference data. However, while\\nexisting methods use the preference model to de\\ufb01ne a preference loss to train a reward model and\\nthen train a policy that optimizes the learned reward model, DPO uses a change of variables to de\\ufb01ne\\nthe preference loss as a function of the policy directly. Given a dataset of human preferences over\\nmodel responses, DPO can therefore optimize a policy using a simple binary cross entropy objective,\\nwithout explicitly learning a reward function or sampling from the policy during training.\\nOur main contribution is Direct Preference Optimization (DPO), a simple RL-free algorithm for\\ntraining language models from preferences. Our experiments show that DPO is at least as effective\\nas existing methods, including PPO-based RLHF, for learning from preferences in tasks such as\\nsentiment modulation, summarization, and dialogue, using language models with up to 6B parameters.\\n2\"}\n{\"section_title\":\"Related Work\",\"section_content\":\"Related Work\\nSelf-supervised language models of increasing scale learn to complete some tasks zero-shot [31] or\\nwith few-shot prompts [6, 25, 11]. However, their performance on downstream tasks and alignment\\nwith user intent can be signi\\ufb01cantly improved by \\ufb01ne-tuning on datasets of instructions and human-\\nwritten completions [23, 36, 13, 39]. This \\u2018instruction-tuning\\u2019 procedure enables LLMs to generalize\\nto instructions outside of the instruction-tuning set and generally increase their usability [13]. Despite\\nthe success of instruction tuning, relative human judgments of response quality are often easier to\\ncollect than expert demonstrations, and thus subsequent works have \\ufb01ne-tuned LLMs with datasets of\\nhuman preferences, improving pro\\ufb01ciency in translation [18], summarization [38, 48], story-telling\\n[48], and instruction-following [26, 32]. These methods \\ufb01rst optimize a neural network reward\\nfunction for compatibility with the dataset of preferences under a preference model such as the\\n2\\nBradley-Terry model [5], then \\ufb01ne-tune a language model to maximize the given reward using\\nreinforcement learning algorithms, commonly REINFORCE [44], proximal policy optimization\\n(PPO; [37]), or variants [32]. A closely-related line of work leverages LLMs \\ufb01ne-tuned for instruction\\nfollowing with human feedback to generate additional synthetic preference data for targeted attributes\\nsuch as safety or harmlessness [2], using only weak supervision from humans in the form of a\\ntext rubric for the LLM\\u2019s annotations. These methods represent a convergence of two bodies of\\nwork: one body of work on training language models with reinforcement learning for a variety\\nof objectives [33, 27, 45] and another body of work on general methods for learning from human\\npreferences [12, 19]. Despite the appeal of using relative human preferences, \\ufb01ne-tuning large\\nlanguage models with reinforcement learning remains a major practical challenge; this work provides\\na theoretically-justi\\ufb01ed approach to optimizing relative preferences without RL.\\nOutside of the context of language, learning policies from preferences has been studied in both bandit\\nand reinforcement learning settings, and several approaches have been proposed. Contextual bandit\\nlearning using preferences or rankings of actions, rather than rewards, is known as a contextual\\ndueling bandit (CDB; [47, 14]). In the absence of absolute rewards, theoretical analysis of CDBs\\nsubstitutes the notion of an optimal policy with a von Neumann winner, a policy whose expected win\\nrate against any other policy is at least 50% [14]. However, in the CDB setting, preference labels\\nare given online, while in learning from human preferences, we typically learn from a \\ufb01xed batch of\\nof\\ufb02ine preference-annotated action pairs [46]. Similarly, preference-based RL (PbRL) learns from\\nbinary preferences generated by an unknown \\u2018scoring\\u2019 function rather than rewards [9, 35]. Various\\nalgorithms for PbRL exist, including methods that can reuse off-policy preference data, but generally\\ninvolve \\ufb01rst explicitly estimating the latent scoring function (i.e. the reward model) and subsequently\\noptimizing it [16, 9, 12, 34, 19]. We instead present a single stage policy learning approach that\\ndirectly optimizes a policy to satisfy preferences.\\n3\"}\n{\"section_title\":\"Preliminaries\",\"section_content\":\"Preliminaries\\nWe review the RLHF pipeline in Ziegler et al. (and later [38, 1, 26]). It usually includes three phases:\\n1) supervised \\ufb01ne-tuning (SFT); 2) preference sampling and reward learning and 3) RL optimization.\\nSFT: RLHF typically begins by \\ufb01ne-tuning a pre-trained LM with supervised learning on high-quality\\ndata for the downstream task(s) of interest (dialogue, summarization, etc.), to obtain a model \\u21e1SFT.\\nReward Modelling Phase: In the second phase the SFT model is prompted with prompts x to\\nproduce pairs of answers (y1, y2) \\u21e0\\u21e1SFT(y | x). These are then presented to human labelers\\nwho express preferences for one answer, denoted as yw \\u227byl | x where yw and yl denotes the\\npreferred and dispreferred completion amongst (y1, y2) respectively. The preferences are assumed\\nto be generated by some latent reward model r\\u21e4(y, x), which we do not have access to. There are a\\nnumber of approaches used to model preferences, the Bradley-Terry (BT) [5] model being a popular\\nchoice (although more general Plackett-Luce ranking models [30, 21] are also compatible with the\\nframework if we have access to several ranked answers). The BT model stipulates that the human\\npreference distribution p\\u21e4can be written as:\\np\\u21e4(y1 \\u227by2 | x) =\\nexp (r\\u21e4(x, y1))\\nexp (r\\u21e4(x, y1)) + exp (r\\u21e4(x, y2)).\\n(1)\\nAssuming access to a static dataset of comparisons D =\\n!\\nx(i), y(i)\\nw , y(i)\\nl\\n N\\ni=1 sampled from p\\u21e4, we\\ncan parametrize a reward model r\\u03c6(x, y) and estimate the parameters via maximum likelihood.\\nFraming the problem as a binary classi\\ufb01cation we have the negative log-likelihood loss:\\nLR(r\\u03c6, D) = \\u2212E(x,yw,yl)\\u21e0D\\n\\u21e5\\nlog \\u03c3(r\\u03c6(x, yw) \\u2212r\\u03c6(x, yl))\\n\\u21e4\\n(2)\\nwhere \\u03c3 is the logistic function. In the context of LMs, the network r\\u03c6(x, y) is often initialized from\\nthe SFT model \\u21e1SFT(y | x) with the addition of a linear layer on top of the \\ufb01nal transformer layer\\nthat produces a single scalar prediction for the reward value [48]. To ensure a reward function with\\nlower variance, prior works normalize the rewards, such that Ex,y\\u21e0D [r\\u03c6(x, y)] = 0 for all x.\\nRL Fine-Tuning Phase: During the RL phase, we use the learned reward function to provide\\nfeedback to the language model. In particular, we formulate the following optimization problem\\nmax\\n\\u21e1\\u2713Ex\\u21e0D,y\\u21e0\\u21e1\\u2713(y|x)\\n\\u21e5\\nr\\u03c6(x, y)\\n\\u21e4\\n\\u2212\\u03b2DKL\\n\\u21e5\\n\\u21e1\\u2713(y | x) || \\u21e1ref(y | x)\\n\\u21e4\\n(3)\\n3\\nwhere \\u03b2 is a parameter controlling the deviation from the base reference policy \\u21e1ref, namely the ini-\\ntial SFT model \\u21e1SFT. In practice, the language model policy \\u21e1\\u2713is also initialized to \\u21e1SFT. The\\nadded constraint is important, as it prevents the model from deviating too far from the distri-\\nbution on which the reward model is accurate, as well as maintaining the generation diversity\\nand preventing mode-collapse to single high-reward answers. Due to the discrete nature of lan-\\nguage generation, this objective is not differentiable and is typically optimized with reinforce-\\nment learning. The standard approach [48, 38, 1, 26] has been to construct the reward function\\nr(x, y) = r\\u03c6(x, y) \\u2212\\u03b2(log \\u21e1\\u2713(y | x) \\u2212log \\u21e1ref(y | x)), and maximize using PPO [37].\\n4\"}\n{\"section_title\":\"Direct Preference Optimization\",\"section_content\":\"Direct Preference Optimization\\nMotivated by the challenges of applying reinforcement learning algorithms on large-scale problems\\nsuch as \\ufb01ne-tuning language models, our goal is to derive a simple approach for policy optimization\\nusing preferences directly. Unlike prior RLHF methods, which learn a reward and then optimize it\\nvia RL, our approach bypasses the reward modeling step and directly optimizes a language model\\nusing preference data. As we will describe next in detail, our key insight is to leverage an analytical\\nmapping from reward functions to optimal policies, which enables us to transform a loss function\\nover reward functions into a loss function over policies. This change-of-variables approach allows\\nus to skip the explicit reward modeling step, while still optimizing under existing models of human\\npreferences, such as the Bradley-Terry model. In essence, the policy network represents both the\\nlanguage model and the reward.\\nDeriving the DPO objective. We start with the same RL objective as prior work, Eq. 3, under a\\ngeneral reward function r. Following prior work [29, 28, 17, 15], it is straightforward to show that\\nthe optimal solution to the KL-constrained reward maximization objective in Eq. 3 takes the form:\\n\\u21e1r(y | x) =\\n1\\nZ(x)\\u21e1ref(y | x) exp\\n\\u27131\\n\\u03b2 r(x, y)\\n\\u25c6\\n,\\n(4)\\nwhere Z(x) = P\\ny \\u21e1ref(y | x) exp\\n\\u21e3\\n1\\n\\u03b2 r(x, y)\\n\\u2318\\nis the partition function. See Appendix A.1 for a\\ncomplete derivation. Even if we use the MLE estimate r\\u03c6 of the ground-truth reward function r\\u21e4, it is\\nstill expensive to estimate the partition function Z(x) [17, 15], which makes this representation hard\\nto utilize in practice. However, we can rearrange Eq. 4 to express the reward function in terms of its\\ncorresponding optimal policy \\u21e1r, the reference policy \\u21e1ref, and the unknown partition function Z(\\u00b7).\\nSpeci\\ufb01cally, we \\ufb01rst take the logarithm of both sides of Eq. 4 and then with some algebra we obtain:\\nr(x, y) = \\u03b2 log \\u21e1r(y | x)\\n\\u21e1ref(y | x) + \\u03b2 log Z(x).\\n(5)\\nWe can apply this reparameterization to the ground-truth reward r\\u21e4and corresponding optimal model\\n\\u21e1\\u21e4. Fortunately, the Bradley-Terry model depends only on the difference of rewards between two\\ncompletions, i.e., p\\u21e4(y1 \\u227by2 | x) = \\u03c3(r\\u21e4(x, y1) \\u2212r\\u21e4(x, y2)). Substituting the reparameterization\\nin Eq. 5 for r\\u21e4(x, y) into the preference model Eq. 1, the partition function cancels, and we can\\nexpress the human preference probability in terms of only the optimal policy \\u21e1\\u21e4and reference policy\\n\\u21e1ref. Thus, the optimal RLHF policy \\u21e1\\u21e4under the Bradley-Terry model satis\\ufb01es the preference model:\\np\\u21e4(y1 \\u227by2 | x) =\\n1\\n1 + exp\\n\\u21e3\\n\\u03b2 log \\u21e1\\u21e4(y2|x)\\n\\u21e1ref(y2|x) \\u2212\\u03b2 log \\u21e1\\u21e4(y1|x)\\n\\u21e1ref(y1|x)\\n\\u2318\\n(6)\\nThe derivation is in Appendix A.2. While Eq. 6 uses the Bradley-Terry model, we can similarly\\nderive expressions under the more general Plackett-Luce models [30, 21], shown in Appendix A.3.\\nNow that we have the probability of human preference data in terms of the optimal policy rather than\\nthe reward model, we can formulate a maximum likelihood objective for a parametrized policy \\u21e1\\u2713.\\nAnalogous to the reward modeling approach (i.e. Eq. 2), our policy objective becomes:\\nLDPO(\\u21e1\\u2713; \\u21e1ref) = \\u2212E(x,yw,yl)\\u21e0D\\n\\uf8ff\\nlog \\u03c3\\n\\u2713\\n\\u03b2 log \\u21e1\\u2713(yw | x)\\n\\u21e1ref(yw | x) \\u2212\\u03b2 log \\u21e1\\u2713(yl | x)\\n\\u21e1ref(yl | x)\\n\\u25c6+\\n.\\n(7)\\nThis way, we simultaneously bypass the explicit reward modeling step while also avoiding the need\\nto perform reinforcement learning optimization. Moreover, since our procedure is equivalent to \\ufb01tting\\n4\\na reparametrized Bradley-Terry model, it enjoys certain theoretical properties, such as consistencies\\nunder suitable assumption of the preference data distribution [4]. In Section 5, we further discuss\\ntheoretical properties of DPO in relation to other works.\\nWhat does the DPO update do? For a mechanistic understanding of DPO, it is useful to analyze the\\ngradient of the loss function LDPO. The gradient with respect to the parameters \\u2713can be written as:\\nr\\u2713LDPO(\\u21e1\\u2713; \\u21e1ref) =\\n\\u2212\\u03b2E(x,yw,yl)\\u21e0D\\n\\uf8ff\\n\\u03c3(\\u02c6\\nr\\u2713(x, yl) \\u2212\\u02c6\\nr\\u2713(x, yw))\\n|\\n{z\\n}\\nhigher weight when reward estimate is wrong\\n\\uf8ff\\nr\\u2713log \\u21e1(yw | x)\\n|\\n{z\\n}\\nincrease likelihood of yw\\n\\u2212r\\u2713log \\u21e1(yl | x)\\n|\\n{z\\n}\\ndecrease likelihood of yl\\n++\\n,\\nwhere \\u02c6\\nr\\u2713(x, y) = \\u03b2 log \\u21e1\\u2713(y|x)\\n\\u21e1ref(y|x) is the reward implicitly de\\ufb01ned by the language model \\u21e1\\u2713and refer-\\nence model \\u21e1ref (more in Section 5). Intuitively, the gradient of the loss function LDPO increases the\\nlikelihood of the preferred completions yw and decreases the likelihood of dispreferred completions\\nyl. Importantly, the examples are weighed by how much higher the implicit reward model \\u02c6\\nr\\u2713rates\\nthe dispreferred completions, scaled by \\u03b2, i.e, how incorrectly the implicit reward model orders\\nthe completions, accounting for the strength of the KL constraint. Our experiments suggest the\\nimportance of this weighting, as a na\\u00efve version of this method without the weighting coef\\ufb01cient can\\ncause the language model to degenerate (Appendix Table 3).\\nDPO outline. The general DPO pipeline is as follows: 1) Sample completions y1, y2 \\u21e0\\u21e1ref(\\u00b7 | x)\\nfor every prompt x, label with human preferences to construct the of\\ufb02ine dataset of preferences\\nD = {x(i), y(i)\\nw , yl)(i)}N\\ni=1 and 2) optimize the language model \\u21e1\\u2713to minimize LDPO for the given\\n\\u21e1ref and D and desired \\u03b2. In practice, one would like to reuse preference datasets publicly available,\\nrather than generating samples and gathering human preferences. Since the preference datasets\\nare sampled using \\u21e1SFT, we initialize \\u21e1ref = \\u21e1SFT whenever available. However, when \\u21e1SFT is\\nnot available, we initialize \\u21e1ref by maximizing likelihood of preferred completions (x, yw), that\\nis, \\u21e1ref = arg max\\u21e1Ex,yw\\u21e0D [log \\u21e1(yw | x)]. This procedure helps mitigate the distribution shift\\nbetween the true reference distribution which is unavailable, and \\u21e1ref used by DPO. Further details\\nrelated to the implementation and hyperparameters can be found in Appendix B.\\n5\"}\n\n... # only display 4 rows in JSON format, more are truncated due to length constraint based on max_tokens (5000)"}
{"role": "assistant", "content": "[Thought]: From the introduction and related work sections, I can see that the paper discusses the Direct Preference Optimization (DPO) method, which is used to train the model. The paper also mentions that DPO is compared with reinforcement learning from human feedback (RLHF) methods, such as PPO-based RLHF, under distribution shifts. I will confirm this information by checking the \"Direct Preference Optimization\" section.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_content FROM sections WHERE section_title = 'Direct Preference Optimization' AND ref_paper_id = 'a8508753-17fc-5f40-8abf-245ecbfe151e';\")"}
{"role": "user", "content": "[Observation]:\n{\"section_content\":\"Direct Preference Optimization\\nMotivated by the challenges of applying reinforcement learning algorithms on large-scale problems\\nsuch as \\ufb01ne-tuning language models, our goal is to derive a simple approach for policy optimization\\nusing preferences directly. Unlike prior RLHF methods, which learn a reward and then optimize it\\nvia RL, our approach bypasses the reward modeling step and directly optimizes a language model\\nusing preference data. As we will describe next in detail, our key insight is to leverage an analytical\\nmapping from reward functions to optimal policies, which enables us to transform a loss function\\nover reward functions into a loss function over policies. This change-of-variables approach allows\\nus to skip the explicit reward modeling step, while still optimizing under existing models of human\\npreferences, such as the Bradley-Terry model. In essence, the policy network represents both the\\nlanguage model and the reward.\\nDeriving the DPO objective. We start with the same RL objective as prior work, Eq. 3, under a\\ngeneral reward function r. Following prior work [29, 28, 17, 15], it is straightforward to show that\\nthe optimal solution to the KL-constrained reward maximization objective in Eq. 3 takes the form:\\n\\u21e1r(y | x) =\\n1\\nZ(x)\\u21e1ref(y | x) exp\\n\\u27131\\n\\u03b2 r(x, y)\\n\\u25c6\\n,\\n(4)\\nwhere Z(x) = P\\ny \\u21e1ref(y | x) exp\\n\\u21e3\\n1\\n\\u03b2 r(x, y)\\n\\u2318\\nis the partition function. See Appendix A.1 for a\\ncomplete derivation. Even if we use the MLE estimate r\\u03c6 of the ground-truth reward function r\\u21e4, it is\\nstill expensive to estimate the partition function Z(x) [17, 15], which makes this representation hard\\nto utilize in practice. However, we can rearrange Eq. 4 to express the reward function in terms of its\\ncorresponding optimal policy \\u21e1r, the reference policy \\u21e1ref, and the unknown partition function Z(\\u00b7).\\nSpeci\\ufb01cally, we \\ufb01rst take the logarithm of both sides of Eq. 4 and then with some algebra we obtain:\\nr(x, y) = \\u03b2 log \\u21e1r(y | x)\\n\\u21e1ref(y | x) + \\u03b2 log Z(x).\\n(5)\\nWe can apply this reparameterization to the ground-truth reward r\\u21e4and corresponding optimal model\\n\\u21e1\\u21e4. Fortunately, the Bradley-Terry model depends only on the difference of rewards between two\\ncompletions, i.e., p\\u21e4(y1 \\u227by2 | x) = \\u03c3(r\\u21e4(x, y1) \\u2212r\\u21e4(x, y2)). Substituting the reparameterization\\nin Eq. 5 for r\\u21e4(x, y) into the preference model Eq. 1, the partition function cancels, and we can\\nexpress the human preference probability in terms of only the optimal policy \\u21e1\\u21e4and reference policy\\n\\u21e1ref. Thus, the optimal RLHF policy \\u21e1\\u21e4under the Bradley-Terry model satis\\ufb01es the preference model:\\np\\u21e4(y1 \\u227by2 | x) =\\n1\\n1 + exp\\n\\u21e3\\n\\u03b2 log \\u21e1\\u21e4(y2|x)\\n\\u21e1ref(y2|x) \\u2212\\u03b2 log \\u21e1\\u21e4(y1|x)\\n\\u21e1ref(y1|x)\\n\\u2318\\n(6)\\nThe derivation is in Appendix A.2. While Eq. 6 uses the Bradley-Terry model, we can similarly\\nderive expressions under the more general Plackett-Luce models [30, 21], shown in Appendix A.3.\\nNow that we have the probability of human preference data in terms of the optimal policy rather than\\nthe reward model, we can formulate a maximum likelihood objective for a parametrized policy \\u21e1\\u2713.\\nAnalogous to the reward modeling approach (i.e. Eq. 2), our policy objective becomes:\\nLDPO(\\u21e1\\u2713; \\u21e1ref) = \\u2212E(x,yw,yl)\\u21e0D\\n\\uf8ff\\nlog \\u03c3\\n\\u2713\\n\\u03b2 log \\u21e1\\u2713(yw | x)\\n\\u21e1ref(yw | x) \\u2212\\u03b2 log \\u21e1\\u2713(yl | x)\\n\\u21e1ref(yl | x)\\n\\u25c6+\\n.\\n(7)\\nThis way, we simultaneously bypass the explicit reward modeling step while also avoiding the need\\nto perform reinforcement learning optimization. Moreover, since our procedure is equivalent to \\ufb01tting\\n4\\na reparametrized Bradley-Terry model, it enjoys certain theoretical properties, such as consistencies\\nunder suitable assumption of the preference data distribution [4]. In Section 5, we further discuss\\ntheoretical properties of DPO in relation to other works.\\nWhat does the DPO update do? For a mechanistic understanding of DPO, it is useful to analyze the\\ngradient of the loss function LDPO. The gradient with respect to the parameters \\u2713can be written as:\\nr\\u2713LDPO(\\u21e1\\u2713; \\u21e1ref) =\\n\\u2212\\u03b2E(x,yw,yl)\\u21e0D\\n\\uf8ff\\n\\u03c3(\\u02c6\\nr\\u2713(x, yl) \\u2212\\u02c6\\nr\\u2713(x, yw))\\n|\\n{z\\n}\\nhigher weight when reward estimate is wrong\\n\\uf8ff\\nr\\u2713log \\u21e1(yw | x)\\n|\\n{z\\n}\\nincrease likelihood of yw\\n\\u2212r\\u2713log \\u21e1(yl | x)\\n|\\n{z\\n}\\ndecrease likelihood of yl\\n++\\n,\\nwhere \\u02c6\\nr\\u2713(x, y) = \\u03b2 log \\u21e1\\u2713(y|x)\\n\\u21e1ref(y|x) is the reward implicitly de\\ufb01ned by the language model \\u21e1\\u2713and refer-\\nence model \\u21e1ref (more in Section 5). Intuitively, the gradient of the loss function LDPO increases the\\nlikelihood of the preferred completions yw and decreases the likelihood of dispreferred completions\\nyl. Importantly, the examples are weighed by how much higher the implicit reward model \\u02c6\\nr\\u2713rates\\nthe dispreferred completions, scaled by \\u03b2, i.e, how incorrectly the implicit reward model orders\\nthe completions, accounting for the strength of the KL constraint. Our experiments suggest the\\nimportance of this weighting, as a na\\u00efve version of this method without the weighting coef\\ufb01cient can\\ncause the language model to degenerate (Appendix Table 3).\\nDPO outline. The general DPO pipeline is as follows: 1) Sample completions y1, y2 \\u21e0\\u21e1ref(\\u00b7 | x)\\nfor every prompt x, label with human preferences to construct the of\\ufb02ine dataset of preferences\\nD = {x(i), y(i)\\nw , yl)(i)}N\\ni=1 and 2) optimize the language model \\u21e1\\u2713to minimize LDPO for the given\\n\\u21e1ref and D and desired \\u03b2. In practice, one would like to reuse preference datasets publicly available,\\nrather than generating samples and gathering human preferences. Since the preference datasets\\nare sampled using \\u21e1SFT, we initialize \\u21e1ref = \\u21e1SFT whenever available. However, when \\u21e1SFT is\\nnot available, we initialize \\u21e1ref by maximizing likelihood of preferred completions (x, yw), that\\nis, \\u21e1ref = arg max\\u21e1Ex,yw\\u21e0D [log \\u21e1(yw | x)]. This procedure helps mitigate the distribution shift\\nbetween the true reference distribution which is unavailable, and \\u21e1ref used by DPO. Further details\\nrelated to the implementation and hyperparameters can be found in Appendix B.\\n5\"}\n\nIn total, 1 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The \"Direct Preference Optimization\" section confirms that the method used to train the model is DPO (Direct Preference Optimization). The paper also mentions that DPO is compared with reinforcement learning from human feedback (RLHF) methods, such as PPO-based RLHF, under distribution shifts. I can now generate the final answer.\n[Action]:\nGenerateAnswer(answer=['DPO', 'PPO-based RLHF'])"}
{"role": "user", "content": "[Observation]: ['DPO', 'PPO-based RLHF']"}
