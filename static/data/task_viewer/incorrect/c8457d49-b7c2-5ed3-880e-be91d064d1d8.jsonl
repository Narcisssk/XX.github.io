{"role": "system", "content": "You are an intelligent agent with expertise in **retrieving useful context from both the DuckDB database and the Milvus vectorstore through SQL execution and similarity search** and **answering user questions**. You will be given a natural language question concerning PDF files, along with the schema of both the database and the vectorstore. Your ultimate goal is to answer the input question with pre-defined answer format. The DuckDB database contains all parsed content of raw PDF files, while the Milvus vectorstore encodes specific column cells from the database as vectors. You can predict executable actions, interact with the hybrid environment (including database and vectorstore) across multiple turns, and retrieve necessary context until you are confident in resolving the question.\n\n--------\n\n## Task Description\nEach task consists of the following parts:\n\n[Question]: User question regarding the PDF, e.g., Is there any ...?\n[Answer Format]: it describes the format of the final answer, e.g., the answer is \"Yes\" or \"No\" without punctuation.\n[Anchor PDF]: Optional, a python str or list, the PDF(s) you must use to answer the question.\n[Reference PDF]: Optional, a python str or list, the PDF(s) you may use to answer the question.\n[Conference]: Optional, a python str or list, the conference(s) and year(s) of the relevant papers for retrieval.\n[Database Schema]: A detailed serialized schema of the DuckDB database for reference when generating SQL queries. It includes 1) tables, 2) columns and their data types, 3) descriptions for these schema items, and 4) primary key and foreign key constraints.\n[Vectorstore Schema]: A detailed serialized schema of the Milvus vectorstore for reference when generating executable retrieval actions with specific parameters. It includes 1) collections, 2) fields, 3) encodable (table, column) pairs in the relational database where the vectorized content originates, and 4) grammar for valid filter rules.\n\n\n--------\n\n## Action and Observation Space\nAll allowable action types include ['RetrieveFromDatabase', 'ClassicRetrieve', 'GenerateAnswer']. Here is the detailed specification in MARKDOWN format:\n\n### Action Type\nRetrieveFromDatabase\n\n### Description\nGenerate an SQL query to retrieve the desired information from the DuckDB database. Please refer to the concrete database schema to produce a valid and executable SQL.\n\n### Observation\nThe observation space is the execution result of the SQL query. You do not need to worry about the actual execution, we will perform it for you. If the SQL failed to execute, we will return the error message. Extremely long SQL output will be truncated.\n\n### Syntax and Parameters (MARKDOWN Format)\nRetrieveFromDatabase(sql: str)\n- sql: str, required. The concrete DuckDB SQL query to execute and retrieve results.\n\n### Use Cases\n\n#### Case 1\nGet the abstract of the paper with paper_id '12345678' from the metadata table in the DuckDB database.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT abstract FROM metadata WHERE paper_id = '12345678';\")\n\n\n#### Case 2\nFind which page in the paper with paper_id '12345678' contains Figure 3.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT pages.page_number FROM images JOIN pages JOIN metadata ON images.ref_page_id = pages.page_id AND pages.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '12345678' AND images.image_caption LIKE '%Figure 3%';\")\n\n\n----\n\n### Action Type\nClassicRetrieve\n\n### Description\nGiven a query text, retrieve relevant context from the Milvus vectorstore.\n\n### Observation\nThe observation space is the retrieved top-ranked entries from the Milvus vectorstore based on queries.\n\n### Syntax and Parameters (MARKDOWN Format)\nClassicRetrieve(query: str, limit: int = 5)\n- query: str, required. The query text will be encoded and used to search for relevant context. You can rephrase the original user question to obtain a more clear and structured query requirement.\n- limit: int, optional, default to 5. The number of top-ranked context to retrieve. Please set it to a positive integer to limit the number of returned results. Extremely large limit values may be truncated.\n\n### Use Cases\n\n#### Case 1\nRetrieve top 5 pieces about a certain topic.\n\n[Action]: ClassicRetrieve(query='Is there any work about the topic structured RAG?')\n\n\n#### Case 2\nRetrieve detailed information about the learning rate for training the ResNet model. The top 4 most relevant entries will be returned based on the query.\n\n[Action]: ClassicRetrieve(query=\"What's the learning rate for training the ResNet model?\", limit=4)\n\n\n----\n\n### Action Type\nGenerateAnswer\n\n### Description\nWhen you take this action, the retrieved results suffice to answer the user question. PLEASE STRICTLY ADHERE TO THE ANSWER FORMAT FOR THE CURRENT QUESTION.\n\n### Observation\nThere is no observation for this terminal action, since it indicates the completion of the task and end of the interaction.\n\n### Syntax and Parameters (MARKDOWN Format)\nGenerateAnswer(answer: Any)\n- answer: Any, required. The final answer to the user question. Please adhere to the answer format for the current question.\n\n### Use Cases\n\n#### Case 1\nThe answer to the user question is 42.\n\n[Action]: GenerateAnswer(answer=42)\n\n\n#### Case 2\nThe answer to the user question is a list of strings: ['Results', 'Discussion'].\n\n[Action]: GenerateAnswer(answer=['Results', 'Discussion'])\n\n\n\n--------\n\n## Interaction Framework\n\nThe main interaction procedure proceeds like this:\n\n----\n\n[Thought]: ... reasoning process, why to take this action ...\n[Action]: ... which action to take, please strictly conform to the action specification ...\n[Observation]: ... execution results or error message after taking the action ...\n\n... # more interleaved triplets of ([Thought], [Action], [Observation])\n\n[Thought]: ... reasoning process to produce the final answer ...\n[Action]: ... the terminate action `GenerateAnswer`, there is no further observation ...\n\n----\n\nIn general, the main interaction loop consists of an interleaved of triplets ([Thought], [Action], [Observation]), except the last `GenerateAnswer` action which does not have \"[Observation]:\". You need to predict the \"[Thought]: ...\" followed by the \"[Action]: ...\" for each turn, and we will execute your action in the environment and provide the \"[Observation]: ...\" for the previous action.\n\n--------\n\n## Suggestions or Hints for Agent Interaction\n\n1. Explore multiple retrieval strategies. For example:\n- Experiment with different (table, column) pairs to extract diverse types of information.\n- Query various embedding models (collections) to find the most relevant context.\n\n2. Combine both structured and unstructured data. Concretely:\n- Use SQL queries to retrieve precise facts and structured data. Pay special attention to morphological variations in cell values.\n- Perform similarity searches in the vectorstore to capture semantic relationships and hidden insights.\n\n3. Iterate and refine:\n- If SQL execution result is not satisfactory, try alternative SQL queries to explore the database content carefully.\n- If the vector-based neural retrieval is insufficient, try alternative approaches or parameter settings.\n- Use your findings to validate or enrich the final response.\n\n4. Ensure confidence. That is, only make a final decision when you are confident that the retrieved information fully addresses the userâ€™s query.\n\n\nRemember that, for each question, you only have 20 interaction turns at most. Now, let's start!\n"}
{"role": "user", "content": "[Question]: What baselines are used in this paper? Note that a baseline is counted only once, even if different variants are provided based on it.\n[Answer Format]: Your answer should be a python list of strings, every element of the list is the name of a baseline directly mentionned in this paper.\n[Anchor PDF]: '7eb41d67-59e3-542a-8f03-93ab8f53216a'\n[Database Schema]: The database schema for /home/htc981/workspace/project/HNS-RAG/data/database/ai_research/ai_research.sql is as follows:\n/* database ai_research: This database contains information about AI research papers. Each PDF file is represented or parsed via different views, e.g., pages, sections, figures, tables, and references. We also extract the concrete content inside each concrete element via OCR.\n*/\n/* table metadata: This table stores metadata about each paper, including the number of pages, paper path and paper id.\n*/\nCREATE TABLE IF NOT EXISTS metadata (\n\tpaper_id UUID, -- A unique identifier for this paper.\n\ttitle VARCHAR, -- The title of this paper.\n\tabstract VARCHAR, -- The abstract of this paper.\n\tnum_pages INTEGER, -- The number of pages in this paper.\n\tconference_full VARCHAR, -- The full name of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tconference_abbreviation VARCHAR, -- The abbreviation of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tpub_year INTEGER, -- The year when this paper was published.\n\tvolume VARCHAR, -- The volume of the conference where this paper was published. e.g. findings.\n\tdownload_url VARCHAR, -- The url from which the paper can be downloaded.\n\tbibtex VARCHAR, -- The bibtex of this paper.\n\tauthors VARCHAR[], -- The full names of authors of this paper.\n\tpdf_path VARCHAR, -- The path to the PDF file of this paper.\n\ttldr VARCHAR, -- A brief summary of the paper's main idea or findings generated by LLM based on title and abstract.\n\ttags VARCHAR[], -- Keywords representing the paper's topics, methods, or applications generated by LLM based on title and abstract.,\n\tPRIMARY KEY (paper_id)\n);\n/* table pages: This table stores information of the pages in the papers, including their content, size and their order within the paper. The pagesare extracted using PyMuPDF.\n*/\nCREATE TABLE IF NOT EXISTS pages (\n\tpage_id UUID, -- A unique identifier for each page.\n\tpage_number INTEGER, -- The page number in the current paper, starting from 1.\n\tpage_width INTEGER, -- The pixel width of the current page.\n\tpage_height INTEGER, -- The pixel height of the current page.\n\tpage_content VARCHAR, -- The content of the page.\n\tpage_summary VARCHAR, -- A brief summary of the page content, generated by LLM, focusing on key information and describing the page content.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (page_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table images: This table stores the information about images in each paper. The images are extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS images (\n\timage_id UUID, -- The unique identifier of the image.\n\timage_caption VARCHAR, -- The caption of this image, \"\" if it doesn't have one.\n\timage_summary VARCHAR, -- A brief summary of the image, generated by LLM, focusing on key information and describing the image.\n\tbounding_box INTEGER[4], -- The bounding box of the figure in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height which are used to determine the shape of the rectangle.\n\tordinal INTEGER, -- Each figure is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (image_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table chunks: This table contains the information of each chunk of text (chunk size = 512 tokens with no overlapping) in each page of the paper. A chunk is a sub-text that is extracted from the main text using langchain, such as a sentence or a paragraph.\n*/\nCREATE TABLE IF NOT EXISTS chunks (\n\tchunk_id UUID, -- A unique identifier for each chunk of text.\n\ttext_content VARCHAR, -- The text content of the current chunk.\n\tordinal INTEGER, -- Each chunk is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (chunk_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table tables: This table stores information about tables extracted from pages using MinerU, including content (in html format), bounding box and summary of each table generated by LLM.\n*/\nCREATE TABLE IF NOT EXISTS tables (\n\ttable_id UUID, -- A unique identifier for each table.\n\ttable_caption VARCHAR, -- Caption of the table, showing key information of the table.\n\ttable_content VARCHAR, -- The content of the table in html format.\n\ttable_summary VARCHAR, -- A brief summary of the table content generated by LLM, focusing on key information and describing the table content.\n\tbounding_box INTEGER[4], -- The bounding box of the table in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height.\n\tordinal INTEGER, -- Each table is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this table is located.,\n\tPRIMARY KEY (table_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table sections: This table contains the text content of each section in the paper, e.g. `Introduction`, `Experiment`, `Conclusion`, `Reference`. The sections are extracted using PyMuPDF or MinerU.\n*/\nCREATE TABLE IF NOT EXISTS sections (\n\tsection_id UUID, -- A unique identifier for each section of text.\n\tsection_title VARCHAR, -- The title of the current section.\n\tsection_content VARCHAR, -- The text content of the current section.\n\tsection_summary VARCHAR, -- A brief summary of the section content generated by LLM, focusing on key information and describing the section content.\n\tordinal INTEGER, -- Each section is labeled with one distinct integer number in the paper, which starts from 0.\n\tpage_numbers INTEGER[], -- A list of page numbers where current section is located in the relevant paper.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (section_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table equations: This table stores information about equations extracted from pages using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS equations (\n\tequation_id UUID, -- A unique identifier for each equation.\n\tequation_content VARCHAR, -- Content of the equation in latex format.\n\tordinal INTEGER, -- Each equation is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the paper ID in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the page ID in the `pages` table where this equation is located.,\n\tPRIMARY KEY (equation_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table reference: This table stores information about references extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS reference (\n\treference_id UUID, -- A unique identifier for each reference.\n\treference_content VARCHAR, -- Content of the reference.\n\tordinal INTEGER, -- Each reference is labeled with one distinct integer number according to its order in the paper, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this reference is located.,\n\tPRIMARY KEY (reference_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n[Vectorstore Schema]: The vectorstore schema for ai_research is as follows. You can try collections with different encoding models or modalities:\n[\n    {\n        \"collection_name\": \"text_bm25_en\",\n        \"modality\": \"text\",\n        \"embed_type\": \"bm25\",\n        \"embed_model\": \"en\",\n        \"description\": \"This collection is used to store the sparse embeddings generated by the BM25 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric inner-product (IP).\",\n        \"fields\": [\n            {\n                \"name\": \"id\",\n                \"dtype\": \"INT64\",\n                \"is_primary\": true,\n                \"description\": \"The unique id for each encoded text vector in this collection.\"\n            },\n            {\n                \"name\": \"vector\",\n                \"dtype\": \"SPARSE_FLOAT_VECTOR\",\n                \"description\": \"The encoded sparse vector of the text content generated by the BM25 model. Note that, the raw text content can be uniquely identified by the triplet fields below: `table_name`, `column_name`, `primary_key`.\"\n            },\n            {\n                \"name\": \"pdf_id\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The unique id of the PDF file stored in the relational database that the encoded text belongs to. This field can be used to quickly filter the search space.\"\n            },\n            {\n                \"name\": \"page_number\",\n                \"dtype\": \"INT16\",\n                \"description\": \"The page number in the PDF file that the encoded text belongs to (starting from 1). This field can be used to quickly filter the search space. Value -1 means unknown.\"\n            },\n            {\n                \"name\": \"table_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which table in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"column_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which column under `table_name` in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"primary_key\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The primary key value of `table_name` (or which row) in the relational database that the text content belongs to. Note that, the triplet (`table_name`, `column_name`, `primary_key`) can be used to construct a one-to-one mapping between the `text` field in the current vectorstore and the cell entry in the relational database.\"\n            }\n        ]\n    },\n    {\n        \"collection_name\": \"text_sentence_transformers_all_minilm_l6_v2\",\n        \"modality\": \"text\",\n        \"embed_type\": \"sentence_transformers\",\n        \"embed_model\": \"all-MiniLM-L6-v2\",\n        \"description\": \"This collection is used to store the embeddings generated by the all-MiniLM-L6-v2 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric COSINE.\",\n        \"fields\": \"The fields of this collection are similar to the `text_bm25_en` collection.\"\n    }\n]\n\nThe following lists all encodable (table_name, column_name, encode_modality) information from the corresponding DuckDB database, where the encoded vector entries are sourced. Note that, for text modality, we directly encode cell values from the `table_name.column_name`; for image modality, we encode the cropped images for `page_number` in `pdf_id` with bounding boxes from `table_name.column_name`. You can leverage them for filter condition during similarity search:\n[\n    [\n        \"metadata\",\n        \"title\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"abstract\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"bibtex\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"tldr\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_content\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_summary\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_caption\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_summary\",\n        \"text\"\n    ],\n    [\n        \"chunks\",\n        \"text_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_caption\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_summary\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_title\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_content\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_summary\",\n        \"text\"\n    ],\n    [\n        \"equations\",\n        \"equation_content\",\n        \"text\"\n    ],\n    [\n        \"reference\",\n        \"reference_content\",\n        \"text\"\n    ]\n]\n\nHere are the operators that you can use in the filtering condition for the vectorstore:\n{\n    \"operators\": {\n        \"logical\": [\n            {\n                \"symbol\": \"not\",\n                \"example\": \"not expr\",\n                \"description\": \"True if expr is false.\"\n            },\n            {\n                \"symbol\": \"and\",\n                \"example\": \"expr1 and expr2\",\n                \"description\": \"True if both expr1 and expr2 are true.\"\n            },\n            {\n                \"symbol\": \"or\",\n                \"example\": \"expr1 or expr2\",\n                \"description\": \"True if either expr1 or expr2 are true.\"\n            }\n        ],\n        \"binary arithmetic\": [\n            {\n                \"symbol\": \"+\",\n                \"example\": \"a + b\",\n                \"description\": \"Add the two operands.\"\n            },\n            {\n                \"symbol\": \"-\",\n                \"example\": \"a - b\",\n                \"description\": \"Subtract the second operand from the first operand.\"\n            },\n            {\n                \"symbol\": \"*\",\n                \"example\": \"a * b\",\n                \"description\": \"Multiply the two operands.\"\n            },\n            {\n                \"symbol\": \"/\",\n                \"example\": \"a / b\",\n                \"description\": \"Divide the first operand by the second operand.\"\n            },\n            {\n                \"symbol\": \"**\",\n                \"example\": \"a ** b\",\n                \"description\": \"Raise the first operand to the power of the second operand.\"\n            },\n            {\n                \"symbol\": \"%\",\n                \"example\": \"a % b\",\n                \"description\": \"Divide the first operand by the second operand and yield the remainder portion.\"\n            }\n        ],\n        \"relational\": [\n            {\n                \"symbol\": \"<\",\n                \"example\": \"a < b\",\n                \"description\": \"True if a is less than b.\"\n            },\n            {\n                \"symbol\": \">\",\n                \"example\": \"a > b\",\n                \"description\": \"True if a is greater than b.\"\n            },\n            {\n                \"symbol\": \"==\",\n                \"example\": \"a == b\",\n                \"description\": \"True if a is equal to b. Please use **two** equal signs for equality comparison.\"\n            },\n            {\n                \"symbol\": \"!=\",\n                \"example\": \"a != b\",\n                \"description\": \"True if a is not equal to b.\"\n            },\n            {\n                \"symbol\": \"<=\",\n                \"example\": \"a <= b\",\n                \"description\": \"True if a is less than or equal to b.\"\n            },\n            {\n                \"symbol\": \">=\",\n                \"example\": \"a >= b\",\n                \"description\": \"True if a is greater than or equal to b.\"\n            },\n            {\n                \"symbol\": \"in\",\n                \"example\": \"a in [b, c, ...]\",\n                \"description\": \"True if a is equal to any of the values in the list.\"\n            }\n        ],\n        \"array operations\": [\n            {\n                \"symbol\": \"[]\",\n                \"example\": \"bbox[0]\",\n                \"description\": \"This expression gets the first element in array bbox. For example, 'bbox[0] < 50' evaluates to true if the value of bbox[0] is less than 50.\"\n            },\n            {\n                \"symbol\": \"array_contains\",\n                \"example\": \"array_contains(bbox, 100)\",\n                \"description\": \"This expression evaluates to true if array bbox contains element 100.\"\n            },\n            {\n                \"symbol\": \"array_length\",\n                \"example\": \"array_length(int_array) == 4\",\n                \"description\": \"This expression evaluates to true if int_array contains exactly 4 elements.\"\n            }\n        ]\n    },\n    \"use cases\": [\n        {\n            \"example\": \"table_name == 'chunks' and column_name == 'text_content'\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and column_name equal to 'text_content'.\"\n        },\n        {\n            \"example\": \"table_name == 'chunks' and primary_key in ['123', '456', '789']\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and primary_key equal to any of the values in the list ['123', '456', '789'].\"\n        },\n        {\n            \"example\": \"bbox[0] + bbox[2] <= 100 and bbox[1] + bbox[3] <= 300 and pdf_id == '123456' and page_number == 1\",\n            \"description\": \"For image modality, filter results to include only image regions that are entirely within the upper-left quadrant of page 1 in the PDF with ID '123456', assuming the page dimensions are 200 (width) x 600 (height).\"\n        }\n    ]\n}"}
{"role": "assistant", "content": "[Thought]: To find the baselines used in the paper, I will first retrieve the relevant sections or chunks of text from the paper. The most likely places to find this information are the \"Introduction,\" \"Related Work,\" or \"Experiments\" sections. I will start by querying the `sections` table to find the content of these sections.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_content FROM sections WHERE ref_paper_id = '7eb41d67-59e3-542a-8f03-93ab8f53216a' AND (section_title LIKE '%Introduction%' OR section_title LIKE '%Related Work%' OR section_title LIKE '%Experiments%');\")"}
{"role": "user", "content": "[Observation]:\n{\"section_content\":\"Identifying which entities in a text play specifc semantic roles with respect to a predicate word is a core ability of language comprehension (Fillmore, 1976). Such basic semantic information is often surfaced via simple lexical and syntactical patterns in the sentence. Readers however can perfectly interpret such semantic relations pragmatically in a wider context than a single sentence. Consider the example in Figure 1. The location that the boat left, \\u2018the house\\u2019, and the destination where it was headed to, \\u2018the port\\u2019, can be deduced by associating the trip with the leave event in the preceding sentence. Such examples showcase where our semantic interpretation departs from syntax, and allow us to systematically investigate how humans and machines reason over events in text in cases\\nFigure 1: Example of semantic arguments in the sentence and document scope. The predicate is in boldface while arguments are highlighted in color. The bottom part shows four different propositions: (1) A proposition constructed from in-sentence arguments of the predicate. (2) The same proposition with additional arguments from other sentences in the document. (3) A proposition with some arguments (the house) placed in an incorrect syntactic position that does not align with its original semantic role. (4) A proposition with an incorrect argument according to the document. Both (3) and (4) are not supported by the document.\\nwhere they cannot rely on easy-to-follow grammatical patterns.\\nIn this work,1 we address detecting crosssentence semantic arguments for verbal and deverbal noun predicates. We propose a method based on textual-entailment (Dagan et al., 2005) and supervised only with NLI and sentence-level Semantics Role Labeling (SRL) (Gildea and Jurafsky, 2000) data. It takes a document and a marked predicate and outputs a set of simple, easy-to-grasp sentences that incorporate semantic arguments from anywhere in the document (e.g. \\u2018the house\\u2019 argument from a different sentence incorporated into the leave event in Figure 1, proposition 2).\\n\\nWe assume that an argument is omitted by the speaker from the predicate\\u2019s sentence due to its redundancy in discourse while re-inserting it back into its designated position next to the predicate should not alter the meaning of the event in the passage. Our basic idea is that a simple proposition constructed from a set of true arguments should be entailed from the passage (see props 1-2 in Figure 1), while any proposition that targets the same predicate and contains a non-argument phrase or a misplaced phrase should not be entailed (see props 3-4 in Figure 1). Therefore, we design a method that starts at the local parse of the predicate, builds a proposition from the extracted in-sentence arguments, and then examines candidate phrases one by one from across the document by inserting them into different positions and testing for entailment.\\nOur method does not require a frame repository such as PropBank (Palmer et al., 2005) or FrameNet (Baker et al., 1998) to operate. Instead, it uses the explicit syntactic argument structure in the proposition as a syntactic surrogate (Michael, 2023) for the underlying semantics of the predicate in the passage (see how the meaning changes in the misplaced argument example, prop 3 in Figure 1).\\nSome recent works from the event extraction literature apply similar slot-flling (Li et al., 2021) or entailment-based methods (Sainz et al., 2022; Lyu et al., 2021). However, they rely on a limited event ontology for predefned templates for argument extraction. In contrast, our work uses English syntax for creating propositions, akin to the clause structure in Del Corro and Gemulla (2013).\\nThis illuminates another beneft of our approach, being schema-free, the propositions can be easily processed downstream by parsers trained on abundant single-sentence data, for example for relation extraction (Hendrickx et al., 2010) or event participant detection (Doddington et al., 2004). Thus, explicating to downstream tasks the set of documentlevel semantic relations that were previously unreachable, now encoded in a simple sentence form.\\nThe cross-sentence task has been notably underexplored in the literature, largely due to the extreme diffculties in constructing suitable datasets (Gerber and Chai, 2010; Moor et al., 2013; Ruppenhofer et al., 2010). Under this context, we suggest a signifcantly more feasible approach that leverages only existing resources designed for in-sentence argument detection to detect semantic arguments across sentence boundaries. Our distantly supervised method achieves higher performance than some fully supervised models on a document-level dataset (Elazar et al., 2022) for noun-phrase relations, and outperforms other zero and few-shot approaches on a re-annotated benchmark for verbal predicates (Moor et al., 2013).\"}\n{\"section_content\":\"Implicit Arguments Mainstream research efforts in semantic role labeling (SRL) (Gildea and Jurafsky, 2000; Kingsbury and Palmer, 2002) have focused on the problem of assigning semantic roles only to syntactically related phrases, e.g. the subject or object phrases of verbs, while neglecting constituents from the wider passage that are pragmatically interpreted as participants. The latter ones, referred to as implicit arguments (Gerber and Chai, 2010; Ruppenhofer et al., 2010) despite being overtly understood by readers, constitute a sizeable portion of the potentially identifed argument set (Fillmore, 1986; Gerber and Chai, 2010; Klein et al., 2020; Roit et al., 2020; Pyatkin et al., 2021). While some recent works (FitzGerald et al., 2018) have annotated large datasets with semantic arguments captured anywhere within the sentence scope, to this day, only a handful of limited resources for SRL in the document scope exist (Gerber and Chai, 2010; Moor et al., 2013; Ruppenhofer et al., 2010; Feizabadi and Pad\\u00f3, 2015). Some resources contain only a few hundred instances, others lack diversity, capturing only a tiny set of predicates (5-10 unique verbs), and all focused only on semantic core roles (i.e. the numbered arguments in PropBank), neglecting other meaningful information for the reader such as temporal or locative modifers. O\\u2019Gorman et al. (2018) annotated a dataset of cross-sentence arguments on top of AMR graphs (Banarescu et al., 2013) specifying arguments as AMR concepts, without their exact location in the sentence.\\nEarlier supervised models for implicit SRL relied on extensive feature engineering and also using gold features (Gerber and Chai, 2012). Many works additionally attempted to overcome data scarcity by creating artifcial training data using coreference (Silberer and Frank, 2012) or aligning predicates in comparable documents (Roth and Frank, 2015). Cheng and Erk (2018) proposed to transform the problem into a narrative cloze task, creating synthetic datasets. More recently, Zhang et al. (2020) improved upon the baseline model proposed for the RAMS dataset (Ebner et al., 2020), and trained a supervised model that detects argument heads before expanding to the full constituent.\\n\\nQA-SRL (He et al., 2015) represents the label of each semantic argument as a simple Wh-question that the argument answers, for example, \\u2018Who acquired something?\\u2019 encodes the agent, and \\u2018Who did someone give something to?\\u2019 encodes the recipient. These question-labels point at the syntactic position of the argument in a declarative form of the QA pair, e.g.: \\u2018The agent acquired something\\u2019 or \\u2018Someone gave something to the recipient\\u2019 (see the example in Figure 2, top-left, where the position of the answer is apparent from the question). Each question also encodes the tense of the event, the modality, and negation properties (might the event occur or has the event occurred?) which are used to instantiate our propositions. Klein et al. (2020) extended QA-SRL to deverbal nominal predicates, recently leveraged for training a joint verbal and nominal QA-SRL model (Klein et al., 2022). And Pyatkin et al. (2020) used QA pairs to represent implicit and explicit discourse relations, also across sentences (Pyatkin et al., 2023).\\nTNE is a dataset for modeling semantic relations between noun phrases (NPs) across a document and is annotated on top of Wikinews. A relation consists of an anchor and complement phrases that are labeled with a preposition, i.e. [the investigation]ANCHOR by [the police]COMPLEMENT. Each document is frst segmented into a list of non-overlapping NPs and every NP pair is annotated with either a preposition or a \\u2019no-relation\\u2019 tag. Each NP is also assigned to a cluster of co-referring within-document mentions.\\nON5V (Moor et al., 2013) is a dataset derived from news articles in the development and train partitions of OntoNotes (Pradhan and Xue, 2009). The dataset contains 390 instances selected from 260 documents, and annotates fve different verbal predicates. The original annotators have inspected only core roles (i.e. numbered: ARG0, ARG1, etc.) that were missing an explicit fller argument in OntoNotes, and flled the role with the closest phrase to the predicate that ft the role description. We have re-annotated this dataset to close the coverage gap for modifer roles and retrieve all ftting phrases (see $\\\\S6.1\\\\$ ).\"}\n\nIn total, 2 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved sections contain a lot of text, but they do not explicitly list the baselines used in the paper. I will now use the `ClassicRetrieve` action to search for relevant context in the vectorstore, focusing on the \"Experiments\" and \"Related Work\" sections.\n[Action]:\nClassicRetrieve(query=\"What baselines are used in the paper with paper_id '7eb41d67-59e3-542a-8f03-93ab8f53216a'?\", limit=5)"}
{"role": "user", "content": "[Observation]:\n{\"score\":0.616,\"pdf_id\":\"48b01c03-1bed-5e91-a485-c6d0bcef271a\",\"page_number\":13,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"6bd327f2-f23b-5470-8cba-531ccb78a6de\",\"text\":\"by a small margin (see paper body). We point out that while all baseline approaches are specifically\\n13\"}\n{\"score\":0.607,\"pdf_id\":\"f08b0ee4-2fd1-50e0-a346-0e586851195a\",\"page_number\":2,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"4bb2f3ed-1d74-57fd-ab1e-090c8468d963\",\"text\":\"baselines.\\n2\"}\n{\"score\":0.5928,\"pdf_id\":\"49b6709b-eabe-599f-930e-df878f0a25c7\",\"page_number\":19,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"664c7878-49b6-5f39-af6a-5d879c01d66f\",\"text\":\"the baselines and the second row denotes the results with HODC.\\n19\"}\n{\"score\":0.5832,\"pdf_id\":\"929eb546-18a8-5dbe-95dc-b0d89ea217ab\",\"page_number\":38,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"266aa0c2-2940-5e14-970c-89b7a56ebcf2\",\"text\":\"(See Appendix D.1.1). Columns are specific baseline models; rows are specific evaluation sources.\\n38\"}\n{\"score\":0.5825,\"pdf_id\":\"f1c088fc-57c7-56a2-a013-bdb2552f2d00\",\"page_number\":15,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"a7e0c39d-420d-5de0-8c61-c351e9f89dc3\",\"text\":\"these baselines and their implementation details.\\n15\"}\n\nIn total, 5 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved results do not contain the specific baselines used in the paper with the given `paper_id`. I will try a more focused query to retrieve the exact baselines used in the experiments.\n[Action]:\nClassicRetrieve(query=\"What are the specific baselines used in the experiments of the paper with paper_id '7eb41d67-59e3-542a-8f03-93ab8f53216a'?\", limit=5)"}
{"role": "user", "content": "[Observation]:\n{\"score\":0.6843,\"pdf_id\":\"d411e5d8-67c3-5eff-9e4d-101e913322dc\",\"page_number\":6,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"54d0c3e5-c4a9-5492-bc7a-b94201364818\",\"text\":\"which we use as baselines in our experiments (See Ap-\\npendix C for more details):\\n6\"}\n{\"score\":0.6752,\"pdf_id\":\"61ce60c9-f261-543c-b580-e70f31aebad3\",\"page_number\":23,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"3978c783-8ee3-54d4-8f6f-cfc52be7d818\",\"text\":\"Justi\\ufb01cation: We include details of the datasets in both the main paper and supplementary.\\n583\\nThe implementation of baselines rely on open source codes that are well documented.\\n584\\nFurther, we will release our own code for better reproducibility.\\n585\\nGuidelines:\\n586\\n\\u2022 The answer NA means that the paper does not include experiments.\\n587\\n\\u2022 If the paper includes experiments, a No answer to this question will not be perceived\\n588\"}\n{\"score\":0.6649,\"pdf_id\":\"8c5c1f8e-ad29-5b82-ba0e-88323b8d9af7\",\"page_number\":34,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"bda25c5e-d050-5257-b5c4-f4990b9abe3f\",\"text\":\"how we adapted baselines to the experiments and how we tune our parameters are discussed\\nin Section 6.\\nGuidelines:\\n\\u2022 The answer NA means that the paper does not include experiments.\\n\\u2022 The experimental setting should be presented in the core of the paper to a level of detail\\nthat is necessary to appreciate the results and make sense of them.\\n\\u2022 The full details can be provided either with the code, in appendix, or as supplemental\\nmaterial.\\n7. Experiment Statistical Significance\"}\n{\"score\":0.6568,\"pdf_id\":\"d6082aed-b8fc-5d72-a269-763965f5ff53\",\"page_number\":33,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"b1d2339e-a71b-5c9d-9524-e8ffef27e032\",\"text\":\"baselines (Table 7).\\nGuidelines:\\n\\u2022 The answer NA means that the paper does not include experiments.\\n\\u2022 The experimental setting should be presented in the core of the paper to a level of detail\\nthat is necessary to appreciate the results and make sense of them.\\n\\u2022 The full details can be provided either with the code, in appendix, or as supplemental\\nmaterial.\\n7. Experiment Statistical Significance\\nQuestion: Does the paper report error bars suitably and correctly defined or other appropriate\"}\n{\"score\":0.6555,\"pdf_id\":\"a1ca4429-7581-59e3-aa4e-f8d34cdbe67e\",\"page_number\":17,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"09b313ab-fa56-5ff1-ab4d-64f9cd7ded07\",\"text\":\"method and baselines, are provided. Any deviations or omitted experiments are clearly\\nstated with justifications.\\n6. Experimental Setting\\/Details\\nQuestion: Does the paper specify all the training and test details (e.g., data splits, hyper-\\nparameters, how they were chosen, type of optimizer, etc.) necessary to understand the\\nresults?\\nAnswer: [TODO]\\n17\"}\n\nIn total, 5 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved results still do not provide the specific baselines used in the experiments of the paper with the given `paper_id`. I will now try to retrieve the relevant information from the `chunks` table in the database, focusing on the sections that are likely to contain the baselines.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT text_content FROM chunks WHERE ref_paper_id = '7eb41d67-59e3-542a-8f03-93ab8f53216a' AND (text_content LIKE '%baselines%' OR text_content LIKE '%baseline%');\")"}
{"role": "user", "content": "[Observation]:\n{\"text_content\":\"et al. (2020) improved upon the baseline model pro-\\n16395\"}\n{\"text_content\":\"for 5 epochs until convergence, using the Adam\\noptimizer with a learning rate of 5e \\u221205 and a\\nbatch size of 16.\\nFor the baseline, we simply apply the parser over\\ncomplete passages during inference.\\nTNE-Parser Re-using the joint QA-SRL setup\\n(Klein et al., 2022), we train a parser directly over\\npassage-level TNE data over the deverbal subset\\nof anchors. The parser takes a passage with the\\nmarked anchor (the head word) as the predicate\\nand outputs questions and answers. Questions are\"}\n\nIn total, 2 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved chunks of text from the `chunks` table do not explicitly list the baselines used in the paper. However, they provide some context that the baselines are discussed in the appendix. I will now retrieve the appendix content to find the specific baselines.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_content FROM sections WHERE ref_paper_id = '7eb41d67-59e3-542a-8f03-93ab8f53216a' AND section_title LIKE '%Appendix%';\")"}
{"role": "user", "content": "[Observation]: [Warning]: The SQL execution result is empty, please check the SQL first."}
{"role": "assistant", "content": "[Thought]: The SQL query to retrieve the appendix content did not return any results. I will try a more general query to retrieve all sections and then filter out the relevant information.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_title, section_content FROM sections WHERE ref_paper_id = '7eb41d67-59e3-542a-8f03-93ab8f53216a';\")"}
{"role": "user", "content": "[Observation]:\n{\"section_title\":\"Explicating the Implicit: Argument Detection Beyond Sentence Boundaries\",\"section_content\":\"Paul Roit1 Aviv Slobodkin1 Eran Hirsch1 Arie Cattan1 Ayal Klein1 Valentina Pyatkin2,3 Ido Dagan1   \\n1Bar-Ilan University 2Allen Institute for Artifcial Intelligence 3University of Washington plroit@gmail.com\"}\n{\"section_title\":\"Abstract\",\"section_content\":\"Detecting semantic arguments of a predicate word has been conventionally modeled as a sentence-level task. The typical reader, however, perfectly interprets predicate-argument relations in a much wider context than just the sentence where the predicate was evoked. In this work, we reformulate the problem of argument detection through textual entailment to capture semantic relations across sentence boundaries. We propose a method that tests whether some semantic relation can be inferred from a full passage by frst encoding it into a simple and standalone proposition and then testing for entailment against the passage. Our method does not require direct supervision, which is generally absent due to dataset scarcity, but instead builds on existing NLI and sentence-level SRL resources. Such a method can potentially explicate pragmatically understood relations into a set of explicit sentences. We demonstrate it on a recent document-level benchmark, outperforming some supervised methods and contemporary language models.\"}\n{\"section_title\":\"1 Introduction\",\"section_content\":\"Identifying which entities in a text play specifc semantic roles with respect to a predicate word is a core ability of language comprehension (Fillmore, 1976). Such basic semantic information is often surfaced via simple lexical and syntactical patterns in the sentence. Readers however can perfectly interpret such semantic relations pragmatically in a wider context than a single sentence. Consider the example in Figure 1. The location that the boat left, \\u2018the house\\u2019, and the destination where it was headed to, \\u2018the port\\u2019, can be deduced by associating the trip with the leave event in the preceding sentence. Such examples showcase where our semantic interpretation departs from syntax, and allow us to systematically investigate how humans and machines reason over events in text in cases\\nFigure 1: Example of semantic arguments in the sentence and document scope. The predicate is in boldface while arguments are highlighted in color. The bottom part shows four different propositions: (1) A proposition constructed from in-sentence arguments of the predicate. (2) The same proposition with additional arguments from other sentences in the document. (3) A proposition with some arguments (the house) placed in an incorrect syntactic position that does not align with its original semantic role. (4) A proposition with an incorrect argument according to the document. Both (3) and (4) are not supported by the document.\\nwhere they cannot rely on easy-to-follow grammatical patterns.\\nIn this work,1 we address detecting crosssentence semantic arguments for verbal and deverbal noun predicates. We propose a method based on textual-entailment (Dagan et al., 2005) and supervised only with NLI and sentence-level Semantics Role Labeling (SRL) (Gildea and Jurafsky, 2000) data. It takes a document and a marked predicate and outputs a set of simple, easy-to-grasp sentences that incorporate semantic arguments from anywhere in the document (e.g. \\u2018the house\\u2019 argument from a different sentence incorporated into the leave event in Figure 1, proposition 2).\\n\\nWe assume that an argument is omitted by the speaker from the predicate\\u2019s sentence due to its redundancy in discourse while re-inserting it back into its designated position next to the predicate should not alter the meaning of the event in the passage. Our basic idea is that a simple proposition constructed from a set of true arguments should be entailed from the passage (see props 1-2 in Figure 1), while any proposition that targets the same predicate and contains a non-argument phrase or a misplaced phrase should not be entailed (see props 3-4 in Figure 1). Therefore, we design a method that starts at the local parse of the predicate, builds a proposition from the extracted in-sentence arguments, and then examines candidate phrases one by one from across the document by inserting them into different positions and testing for entailment.\\nOur method does not require a frame repository such as PropBank (Palmer et al., 2005) or FrameNet (Baker et al., 1998) to operate. Instead, it uses the explicit syntactic argument structure in the proposition as a syntactic surrogate (Michael, 2023) for the underlying semantics of the predicate in the passage (see how the meaning changes in the misplaced argument example, prop 3 in Figure 1).\\nSome recent works from the event extraction literature apply similar slot-flling (Li et al., 2021) or entailment-based methods (Sainz et al., 2022; Lyu et al., 2021). However, they rely on a limited event ontology for predefned templates for argument extraction. In contrast, our work uses English syntax for creating propositions, akin to the clause structure in Del Corro and Gemulla (2013).\\nThis illuminates another beneft of our approach, being schema-free, the propositions can be easily processed downstream by parsers trained on abundant single-sentence data, for example for relation extraction (Hendrickx et al., 2010) or event participant detection (Doddington et al., 2004). Thus, explicating to downstream tasks the set of documentlevel semantic relations that were previously unreachable, now encoded in a simple sentence form.\\nThe cross-sentence task has been notably underexplored in the literature, largely due to the extreme diffculties in constructing suitable datasets (Gerber and Chai, 2010; Moor et al., 2013; Ruppenhofer et al., 2010). Under this context, we suggest a signifcantly more feasible approach that leverages only existing resources designed for in-sentence argument detection to detect semantic arguments across sentence boundaries. Our distantly supervised method achieves higher performance than some fully supervised models on a document-level dataset (Elazar et al., 2022) for noun-phrase relations, and outperforms other zero and few-shot approaches on a re-annotated benchmark for verbal predicates (Moor et al., 2013).\"}\n{\"section_title\":\"2 Background and Related Works\",\"section_content\":\"Implicit Arguments Mainstream research efforts in semantic role labeling (SRL) (Gildea and Jurafsky, 2000; Kingsbury and Palmer, 2002) have focused on the problem of assigning semantic roles only to syntactically related phrases, e.g. the subject or object phrases of verbs, while neglecting constituents from the wider passage that are pragmatically interpreted as participants. The latter ones, referred to as implicit arguments (Gerber and Chai, 2010; Ruppenhofer et al., 2010) despite being overtly understood by readers, constitute a sizeable portion of the potentially identifed argument set (Fillmore, 1986; Gerber and Chai, 2010; Klein et al., 2020; Roit et al., 2020; Pyatkin et al., 2021). While some recent works (FitzGerald et al., 2018) have annotated large datasets with semantic arguments captured anywhere within the sentence scope, to this day, only a handful of limited resources for SRL in the document scope exist (Gerber and Chai, 2010; Moor et al., 2013; Ruppenhofer et al., 2010; Feizabadi and Pad\\u00f3, 2015). Some resources contain only a few hundred instances, others lack diversity, capturing only a tiny set of predicates (5-10 unique verbs), and all focused only on semantic core roles (i.e. the numbered arguments in PropBank), neglecting other meaningful information for the reader such as temporal or locative modifers. O\\u2019Gorman et al. (2018) annotated a dataset of cross-sentence arguments on top of AMR graphs (Banarescu et al., 2013) specifying arguments as AMR concepts, without their exact location in the sentence.\\nEarlier supervised models for implicit SRL relied on extensive feature engineering and also using gold features (Gerber and Chai, 2012). Many works additionally attempted to overcome data scarcity by creating artifcial training data using coreference (Silberer and Frank, 2012) or aligning predicates in comparable documents (Roth and Frank, 2015). Cheng and Erk (2018) proposed to transform the problem into a narrative cloze task, creating synthetic datasets. More recently, Zhang et al. (2020) improved upon the baseline model proposed for the RAMS dataset (Ebner et al., 2020), and trained a supervised model that detects argument heads before expanding to the full constituent.\\n\\nQA-SRL (He et al., 2015) represents the label of each semantic argument as a simple Wh-question that the argument answers, for example, \\u2018Who acquired something?\\u2019 encodes the agent, and \\u2018Who did someone give something to?\\u2019 encodes the recipient. These question-labels point at the syntactic position of the argument in a declarative form of the QA pair, e.g.: \\u2018The agent acquired something\\u2019 or \\u2018Someone gave something to the recipient\\u2019 (see the example in Figure 2, top-left, where the position of the answer is apparent from the question). Each question also encodes the tense of the event, the modality, and negation properties (might the event occur or has the event occurred?) which are used to instantiate our propositions. Klein et al. (2020) extended QA-SRL to deverbal nominal predicates, recently leveraged for training a joint verbal and nominal QA-SRL model (Klein et al., 2022). And Pyatkin et al. (2020) used QA pairs to represent implicit and explicit discourse relations, also across sentences (Pyatkin et al., 2023).\\nTNE is a dataset for modeling semantic relations between noun phrases (NPs) across a document and is annotated on top of Wikinews. A relation consists of an anchor and complement phrases that are labeled with a preposition, i.e. [the investigation]ANCHOR by [the police]COMPLEMENT. Each document is frst segmented into a list of non-overlapping NPs and every NP pair is annotated with either a preposition or a \\u2019no-relation\\u2019 tag. Each NP is also assigned to a cluster of co-referring within-document mentions.\\nON5V (Moor et al., 2013) is a dataset derived from news articles in the development and train partitions of OntoNotes (Pradhan and Xue, 2009). The dataset contains 390 instances selected from 260 documents, and annotates fve different verbal predicates. The original annotators have inspected only core roles (i.e. numbered: ARG0, ARG1, etc.) that were missing an explicit fller argument in OntoNotes, and flled the role with the closest phrase to the predicate that ft the role description. We have re-annotated this dataset to close the coverage gap for modifer roles and retrieve all ftting phrases (see $\\\\S6.1\\\\$ ).\"}\n{\"section_title\":\"3 Task Defnition\",\"section_content\":\"Given a text document $\\\\mathbf{D}=[\\\\mathbf{s}_{1},\\\\ldots,\\\\mathbf{s}_{n}]$ , consisting of $n$ sentences, and a target predicate word p from the document (a verb or deverbal noun), our task is to detect the set of semantic arguments $\\\\boldsymbol{A}_{\\\\mathrm{p}}=\\\\{a_{i}\\\\}$ of the predicate. In this work, we adopt the QA-SRL defnition of a semantic argument and apply it to the document-level task. An argument of p is any phrase $a$ in the document that pertains to the event referred by p and correctly answers a simple Wh-question revolving around the predicate word. For example, What did something leave? asks about the house argument in Figure 1.\\nWe will mark the sentence where the predicate resides as $\\\\mathbf{s}_{p}$ and defne the set of local, in-sentence arguments as ${\\\\mathcal{L}}_{\\\\mathrm{p}}=\\\\{a_{i}|a_{i}\\\\in{\\\\mathcal{A}}_{\\\\mathrm{p}}\\\\land a_{i}\\\\subset\\\\mathbf{s}_{p}\\\\}$ , where the subset notation is overloaded here to represent a sub-sequence. While past works have focused on detecting $\\\\mathcal{L}_{\\\\mathrm{p}}$ , we will show a method that leverages $\\\\mathcal{L}_{\\\\mathrm{p}}$ to detect the rest of cross-sentence arguments.\"}\n{\"section_title\":\"4 Method\",\"section_content\":\"Our approach is based on synthesizing a simple sentence that encodes candidate phrases as arguments for the predicate p, and testing if the sentence is entailed from the document. The synthesized sentence $\\\\mathcal{H}$ , named the semantic hypothesis, is created from templates by placing different phrases in subject or object positions around the predicate verb. For example, in proposition no. 2 in Figure 1 \\u2018The boat\\u2019 is assigned to the subject position and represents the LEAVER role, and \\u2018on the day of the bombing\\u2019 is assigned to an adjunct and represents a TEMPORAL role. If the semantic hypothesis is entailed from the passage, we conclude that the predicate-argument relations encoded within $\\\\mathcal{H}$ are manifested in the document. On the other hand, if the hypothesis is not entailed, we can conclude that the document does not express one or more of the encoded argument relations. For example, proposition no. 4 incorrectly assigns \\u2018the investigators\\u2019 to the LEAVER role, which should not be entailed from the passage.\\nOur method iterates over candidate phrases extracted from across the document (Figure 2, left). To determine if a candidate phrase c is a semantic argument of the predicate, we construct several hypotheses that incorporate the candidate and check for entailment against the document (Figure 2, right). The hypotheses combine local, insentence, arguments of the predicate with the candidate phrase, and differ in the syntactic position that the candidate assumes. Conceptually, each position encodes the candidate into a different semantic role. Moreover, the hypothesis sentence associates the candidate with the specifc target event by incorporating local arguments of the event, the remote candidate, and the target predicate into a single sentence. If $\\\\mathcal{H}$ is entailed, it suggests that the candidate participates in the event in the document, and that the candidate\\u2019s semantic role in the document is the same as its role in $\\\\mathcal{H}$ .\\n\\nOur synthetic hypothesis sentence is generated from syntactic templates. They accommodate the main verb (VERB) with up to 4 argument phrases in the following unique syntactic positions: subject (SUBJ), direct object (DOBJ), indirect object (IOBJ), and adjunct (ADJ). It can be modifed using the following grammatical attributes: tense (TEN), negation (NEG), and modality (MOD). These felds are inspired by the QA-SRL question syntax that was similarly used to generate simple propositions in Pyatkin et al. (2021). They present high versatility and can capture any semantic role of a verbal predicate in English, yet maintain a compact representation requiring only a few assignments.\\nIn this work, unless specifed otherwise, we consider as candidates noun phrases and named entities from the document that do not overlap with local arguments, including those from $\\\\mathbf{s}_{p}$ . Each candidate is placed into different hypotheses in the subject, direct and indirect object positions. We use the probability of entailment as predicted by an NLI model as the score of the hypothesis $\\\\operatorname{NLI}(\\\\mathbf{D},{\\\\mathcal{H}})$ and defne the score of each candidate to be\\n\\nthe maximal score of any of its hypotheses. Our fnal predicted set of arguments includes all candidate phrases that scored above a confgurable threshold and all local arguments predicted by the parser. In the next subsections, we will describe how we populate the hypothesis syntactic positions and attributes given the predicate and its sentence (\\u00a74.1), and how we then generate the actual hypothesis sentence $(\\\\S4.2)$ .\"}\n{\"section_title\":\"4.1 Populating Hypothesis Fields\",\"section_content\":\"We initialize the hypothesis felds with the predicate as the main verb and assign its local arguments to syntactic positions. The local arguments are extracted from the predicate\\u2019s sentence along with their question labels using a high-performing QA-SRL parser (Klein et al., 2022) (see Figure 2, center-top). The syntactic position of each argument is determined by applying a heuristic from Klein et al. (2020) that inspects the question and maps it to one of the argument positions (Figure 2, top-left). Generally, each local argument is assigned to a feld according to its syntactic position (Figure 2, center-bottom). However, to mitigate QA-SRL parsing errors and resolve collisions, we score each local argument, and select the top argument per position. To score a local argument, we generate a singleton hypothesis containing only the argument, and compute its entailment probability against the predicate\\u2019s sentence using an NLI model. Refer to $\\\\S\\\\mathrm{G}$ for more details.\\n\\nTense, modality, and negation attributes are determined by inspecting the question of the frst local argument in the hypothesis. For example, \\u2018Who might have left?\\u2019 indicates that the event should be described in the past tense with the modal verb \\u2018might\\u2019 (see $\\\\S\\\\mathrm{G})$ .\\nFinally, given a candidate phrase, we generate different hypotheses, assigning the candidate to a different syntactic position in each, possibly overriding a local argument.\"}\n{\"section_title\":\"4.2 Generating the Semantic Hypothesis\",\"section_content\":\"Given an assignment to the hypothesis felds, we construct the hypothesis sentence by flling a syntactic template and using English grammar rules for infection. If a subject phrase is specifed, we use the active voice template. Otherwise, we resort to the passive voice, placing the direct object in the subject position as follows:\\nActive $\\\\Longrightarrow$ SUBJ-AUX-VERB-DOBJ-IOBJ-ADJ Passive $\\\\Longrightarrow$ DOBJ-AUX-VERBpassive-IOBJ-ADJ\\nThe corresponding auxiliary (AUX) and main verbs are automatically assigned or infected3 based on the grammatical attributes of the hypothesis, the active or passive voice, and after considering the subject-verb agreement.\\nNotably, a valid declarative sentence in English must contain a subject phrase, while for some instances there is no apparent local subject or object argument. E.g. \\u2018the 2 PM presentation\\u2019 implies that someone is presenting something at 2 PM. To write a valid hypothesis, we insert abstract placeholder arguments instead of concrete ones, placing \\u2018someone\\u2019 in an empty subject position or \\u2018something\\u2019 in empty object positions when necessary (see $\\\\S\\\\mathrm{G}$ for details).\\nThe prepositions for indirect objects or adjuncts are assigned by either syntactic analysis or predicted with a masked language model. For local arguments, we look for a connecting preposition between the predicate and the argument by inspecting the original sentence or the declarative form of the QA pair. Otherwise, we use a masked language model (Devlin et al., 2019) to rank prepositions given the full passage and the hypothesis. For more details see Appendix G.\"}\n{\"section_title\":\"5 Predicate-Argument aware NLI Dataset\",\"section_content\":\"Throughout our experiments, we noticed that the readily available NLI models usually make poor decisions when considering different semantic hypotheses, assigning high probability to propositions with unrelated candidates \\u2014 which resonates the fndings of Min et al. (2020); Basmov et al. (2023). We believe that this is caused by the inherent lexical overlap between the hypothesis and the premise texts since our proposition is built entirely from phrases found in the original document. To circumvent this, we train a semantics-aware entailment model from QA-SRL data. We use the singlesentence training data and generate entailed and not-entailed propositions. Each training instance includes a sentence and a proposition centered on a predicate in the sentence. Positive instances include propositions built using the predicate\\u2019s argument set. Each true argument is placed in the hypothesis according to their syntactic position as determined by their QA-SRL question. The positive propositions are then used to build the negative instances in the following two ways: The frst inserts a noun phrase from the sentence that is not an argument into any position. The second switches between syntactic positions of true arguments in the positive proposition, replacing objects as subjects and viceversa. This training setup encourages the model to be more sensitive to the semantics of the hypothesis, as encoded in its argument structure.\\nOur training set contains 465K sentencehypothesis pairs extracted from the training partitions of QANom (Klein et al., 2020) and QASRLv2 (FitzGerald et al., 2018), with $30\\\\%$ positive (entailed) instances. Negative instances are split between subject-object swaps $(14\\\\%)$ , and insertions of non-argument phrases from the sentence $(56\\\\%)$ . We created multiple positive hypotheses for each predicate by omitting subsets of true arguments, anticipating low coverage conditions of the QA-SRL parser at inference time. For negative examples, we sampled one positive hypothesis for each predicate and applied our augmentations.\"}\n{\"section_title\":\"6 Experiment Setup\",\"section_content\":\"\"}\n\n... # only display 10 rows in JSON format, more are truncated due to length constraint based on max_rows (10)"}
{"role": "assistant", "content": "[Thought]: The retrieved sections do not explicitly list the baselines used in the paper. However, the \"Related Works\" section mentions some baselines and related methods. I will now use the `ClassicRetrieve` action to search for the specific baselines used in the experiments, focusing on the \"Experiments\" and \"Related Work\" sections.\n[Action]:\nClassicRetrieve(query=\"What are the specific baselines used in the experiments of the paper with paper_id '7eb41d67-59e3-542a-8f03-93ab8f53216a'?\", limit=5)"}
{"role": "user", "content": "[Observation]:\n{\"score\":0.6843,\"pdf_id\":\"d411e5d8-67c3-5eff-9e4d-101e913322dc\",\"page_number\":6,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"54d0c3e5-c4a9-5492-bc7a-b94201364818\",\"text\":\"which we use as baselines in our experiments (See Ap-\\npendix C for more details):\\n6\"}\n{\"score\":0.6752,\"pdf_id\":\"61ce60c9-f261-543c-b580-e70f31aebad3\",\"page_number\":23,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"3978c783-8ee3-54d4-8f6f-cfc52be7d818\",\"text\":\"Justi\\ufb01cation: We include details of the datasets in both the main paper and supplementary.\\n583\\nThe implementation of baselines rely on open source codes that are well documented.\\n584\\nFurther, we will release our own code for better reproducibility.\\n585\\nGuidelines:\\n586\\n\\u2022 The answer NA means that the paper does not include experiments.\\n587\\n\\u2022 If the paper includes experiments, a No answer to this question will not be perceived\\n588\"}\n{\"score\":0.6649,\"pdf_id\":\"8c5c1f8e-ad29-5b82-ba0e-88323b8d9af7\",\"page_number\":34,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"bda25c5e-d050-5257-b5c4-f4990b9abe3f\",\"text\":\"how we adapted baselines to the experiments and how we tune our parameters are discussed\\nin Section 6.\\nGuidelines:\\n\\u2022 The answer NA means that the paper does not include experiments.\\n\\u2022 The experimental setting should be presented in the core of the paper to a level of detail\\nthat is necessary to appreciate the results and make sense of them.\\n\\u2022 The full details can be provided either with the code, in appendix, or as supplemental\\nmaterial.\\n7. Experiment Statistical Significance\"}\n{\"score\":0.6568,\"pdf_id\":\"d6082aed-b8fc-5d72-a269-763965f5ff53\",\"page_number\":33,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"b1d2339e-a71b-5c9d-9524-e8ffef27e032\",\"text\":\"baselines (Table 7).\\nGuidelines:\\n\\u2022 The answer NA means that the paper does not include experiments.\\n\\u2022 The experimental setting should be presented in the core of the paper to a level of detail\\nthat is necessary to appreciate the results and make sense of them.\\n\\u2022 The full details can be provided either with the code, in appendix, or as supplemental\\nmaterial.\\n7. Experiment Statistical Significance\\nQuestion: Does the paper report error bars suitably and correctly defined or other appropriate\"}\n{\"score\":0.6555,\"pdf_id\":\"a1ca4429-7581-59e3-aa4e-f8d34cdbe67e\",\"page_number\":17,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"09b313ab-fa56-5ff1-ab4d-64f9cd7ded07\",\"text\":\"method and baselines, are provided. Any deviations or omitted experiments are clearly\\nstated with justifications.\\n6. Experimental Setting\\/Details\\nQuestion: Does the paper specify all the training and test details (e.g., data splits, hyper-\\nparameters, how they were chosen, type of optimizer, etc.) necessary to understand the\\nresults?\\nAnswer: [TODO]\\n17\"}\n\nIn total, 5 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved results still do not provide the specific baselines used in the experiments of the paper with the given `paper_id`. However, one of the chunks mentions that the baselines are discussed in Appendix C. I will now retrieve the content of Appendix C to find the specific baselines.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_content FROM sections WHERE ref_paper_id = '7eb41d67-59e3-542a-8f03-93ab8f53216a' AND section_title LIKE '%Appendix C%';\")"}
{"role": "user", "content": "[Observation]: [Warning]: The SQL execution result is empty, please check the SQL first."}
{"role": "assistant", "content": "[Thought]: The SQL query to retrieve the content of Appendix C did not return any results. I will now try a more general query to retrieve all sections and then filter out the relevant information manually.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_title, section_content FROM sections WHERE ref_paper_id = '7eb41d67-59e3-542a-8f03-93ab8f53216a';\")"}
{"role": "user", "content": "[Observation]:\n{\"section_title\":\"Explicating the Implicit: Argument Detection Beyond Sentence Boundaries\",\"section_content\":\"Paul Roit1 Aviv Slobodkin1 Eran Hirsch1 Arie Cattan1 Ayal Klein1 Valentina Pyatkin2,3 Ido Dagan1   \\n1Bar-Ilan University 2Allen Institute for Artifcial Intelligence 3University of Washington plroit@gmail.com\"}\n{\"section_title\":\"Abstract\",\"section_content\":\"Detecting semantic arguments of a predicate word has been conventionally modeled as a sentence-level task. The typical reader, however, perfectly interprets predicate-argument relations in a much wider context than just the sentence where the predicate was evoked. In this work, we reformulate the problem of argument detection through textual entailment to capture semantic relations across sentence boundaries. We propose a method that tests whether some semantic relation can be inferred from a full passage by frst encoding it into a simple and standalone proposition and then testing for entailment against the passage. Our method does not require direct supervision, which is generally absent due to dataset scarcity, but instead builds on existing NLI and sentence-level SRL resources. Such a method can potentially explicate pragmatically understood relations into a set of explicit sentences. We demonstrate it on a recent document-level benchmark, outperforming some supervised methods and contemporary language models.\"}\n{\"section_title\":\"1 Introduction\",\"section_content\":\"Identifying which entities in a text play specifc semantic roles with respect to a predicate word is a core ability of language comprehension (Fillmore, 1976). Such basic semantic information is often surfaced via simple lexical and syntactical patterns in the sentence. Readers however can perfectly interpret such semantic relations pragmatically in a wider context than a single sentence. Consider the example in Figure 1. The location that the boat left, \\u2018the house\\u2019, and the destination where it was headed to, \\u2018the port\\u2019, can be deduced by associating the trip with the leave event in the preceding sentence. Such examples showcase where our semantic interpretation departs from syntax, and allow us to systematically investigate how humans and machines reason over events in text in cases\\nFigure 1: Example of semantic arguments in the sentence and document scope. The predicate is in boldface while arguments are highlighted in color. The bottom part shows four different propositions: (1) A proposition constructed from in-sentence arguments of the predicate. (2) The same proposition with additional arguments from other sentences in the document. (3) A proposition with some arguments (the house) placed in an incorrect syntactic position that does not align with its original semantic role. (4) A proposition with an incorrect argument according to the document. Both (3) and (4) are not supported by the document.\\nwhere they cannot rely on easy-to-follow grammatical patterns.\\nIn this work,1 we address detecting crosssentence semantic arguments for verbal and deverbal noun predicates. We propose a method based on textual-entailment (Dagan et al., 2005) and supervised only with NLI and sentence-level Semantics Role Labeling (SRL) (Gildea and Jurafsky, 2000) data. It takes a document and a marked predicate and outputs a set of simple, easy-to-grasp sentences that incorporate semantic arguments from anywhere in the document (e.g. \\u2018the house\\u2019 argument from a different sentence incorporated into the leave event in Figure 1, proposition 2).\\n\\nWe assume that an argument is omitted by the speaker from the predicate\\u2019s sentence due to its redundancy in discourse while re-inserting it back into its designated position next to the predicate should not alter the meaning of the event in the passage. Our basic idea is that a simple proposition constructed from a set of true arguments should be entailed from the passage (see props 1-2 in Figure 1), while any proposition that targets the same predicate and contains a non-argument phrase or a misplaced phrase should not be entailed (see props 3-4 in Figure 1). Therefore, we design a method that starts at the local parse of the predicate, builds a proposition from the extracted in-sentence arguments, and then examines candidate phrases one by one from across the document by inserting them into different positions and testing for entailment.\\nOur method does not require a frame repository such as PropBank (Palmer et al., 2005) or FrameNet (Baker et al., 1998) to operate. Instead, it uses the explicit syntactic argument structure in the proposition as a syntactic surrogate (Michael, 2023) for the underlying semantics of the predicate in the passage (see how the meaning changes in the misplaced argument example, prop 3 in Figure 1).\\nSome recent works from the event extraction literature apply similar slot-flling (Li et al., 2021) or entailment-based methods (Sainz et al., 2022; Lyu et al., 2021). However, they rely on a limited event ontology for predefned templates for argument extraction. In contrast, our work uses English syntax for creating propositions, akin to the clause structure in Del Corro and Gemulla (2013).\\nThis illuminates another beneft of our approach, being schema-free, the propositions can be easily processed downstream by parsers trained on abundant single-sentence data, for example for relation extraction (Hendrickx et al., 2010) or event participant detection (Doddington et al., 2004). Thus, explicating to downstream tasks the set of documentlevel semantic relations that were previously unreachable, now encoded in a simple sentence form.\\nThe cross-sentence task has been notably underexplored in the literature, largely due to the extreme diffculties in constructing suitable datasets (Gerber and Chai, 2010; Moor et al., 2013; Ruppenhofer et al., 2010). Under this context, we suggest a signifcantly more feasible approach that leverages only existing resources designed for in-sentence argument detection to detect semantic arguments across sentence boundaries. Our distantly supervised method achieves higher performance than some fully supervised models on a document-level dataset (Elazar et al., 2022) for noun-phrase relations, and outperforms other zero and few-shot approaches on a re-annotated benchmark for verbal predicates (Moor et al., 2013).\"}\n{\"section_title\":\"2 Background and Related Works\",\"section_content\":\"Implicit Arguments Mainstream research efforts in semantic role labeling (SRL) (Gildea and Jurafsky, 2000; Kingsbury and Palmer, 2002) have focused on the problem of assigning semantic roles only to syntactically related phrases, e.g. the subject or object phrases of verbs, while neglecting constituents from the wider passage that are pragmatically interpreted as participants. The latter ones, referred to as implicit arguments (Gerber and Chai, 2010; Ruppenhofer et al., 2010) despite being overtly understood by readers, constitute a sizeable portion of the potentially identifed argument set (Fillmore, 1986; Gerber and Chai, 2010; Klein et al., 2020; Roit et al., 2020; Pyatkin et al., 2021). While some recent works (FitzGerald et al., 2018) have annotated large datasets with semantic arguments captured anywhere within the sentence scope, to this day, only a handful of limited resources for SRL in the document scope exist (Gerber and Chai, 2010; Moor et al., 2013; Ruppenhofer et al., 2010; Feizabadi and Pad\\u00f3, 2015). Some resources contain only a few hundred instances, others lack diversity, capturing only a tiny set of predicates (5-10 unique verbs), and all focused only on semantic core roles (i.e. the numbered arguments in PropBank), neglecting other meaningful information for the reader such as temporal or locative modifers. O\\u2019Gorman et al. (2018) annotated a dataset of cross-sentence arguments on top of AMR graphs (Banarescu et al., 2013) specifying arguments as AMR concepts, without their exact location in the sentence.\\nEarlier supervised models for implicit SRL relied on extensive feature engineering and also using gold features (Gerber and Chai, 2012). Many works additionally attempted to overcome data scarcity by creating artifcial training data using coreference (Silberer and Frank, 2012) or aligning predicates in comparable documents (Roth and Frank, 2015). Cheng and Erk (2018) proposed to transform the problem into a narrative cloze task, creating synthetic datasets. More recently, Zhang et al. (2020) improved upon the baseline model proposed for the RAMS dataset (Ebner et al., 2020), and trained a supervised model that detects argument heads before expanding to the full constituent.\\n\\nQA-SRL (He et al., 2015) represents the label of each semantic argument as a simple Wh-question that the argument answers, for example, \\u2018Who acquired something?\\u2019 encodes the agent, and \\u2018Who did someone give something to?\\u2019 encodes the recipient. These question-labels point at the syntactic position of the argument in a declarative form of the QA pair, e.g.: \\u2018The agent acquired something\\u2019 or \\u2018Someone gave something to the recipient\\u2019 (see the example in Figure 2, top-left, where the position of the answer is apparent from the question). Each question also encodes the tense of the event, the modality, and negation properties (might the event occur or has the event occurred?) which are used to instantiate our propositions. Klein et al. (2020) extended QA-SRL to deverbal nominal predicates, recently leveraged for training a joint verbal and nominal QA-SRL model (Klein et al., 2022). And Pyatkin et al. (2020) used QA pairs to represent implicit and explicit discourse relations, also across sentences (Pyatkin et al., 2023).\\nTNE is a dataset for modeling semantic relations between noun phrases (NPs) across a document and is annotated on top of Wikinews. A relation consists of an anchor and complement phrases that are labeled with a preposition, i.e. [the investigation]ANCHOR by [the police]COMPLEMENT. Each document is frst segmented into a list of non-overlapping NPs and every NP pair is annotated with either a preposition or a \\u2019no-relation\\u2019 tag. Each NP is also assigned to a cluster of co-referring within-document mentions.\\nON5V (Moor et al., 2013) is a dataset derived from news articles in the development and train partitions of OntoNotes (Pradhan and Xue, 2009). The dataset contains 390 instances selected from 260 documents, and annotates fve different verbal predicates. The original annotators have inspected only core roles (i.e. numbered: ARG0, ARG1, etc.) that were missing an explicit fller argument in OntoNotes, and flled the role with the closest phrase to the predicate that ft the role description. We have re-annotated this dataset to close the coverage gap for modifer roles and retrieve all ftting phrases (see $\\\\S6.1\\\\$ ).\"}\n{\"section_title\":\"3 Task Defnition\",\"section_content\":\"Given a text document $\\\\mathbf{D}=[\\\\mathbf{s}_{1},\\\\ldots,\\\\mathbf{s}_{n}]$ , consisting of $n$ sentences, and a target predicate word p from the document (a verb or deverbal noun), our task is to detect the set of semantic arguments $\\\\boldsymbol{A}_{\\\\mathrm{p}}=\\\\{a_{i}\\\\}$ of the predicate. In this work, we adopt the QA-SRL defnition of a semantic argument and apply it to the document-level task. An argument of p is any phrase $a$ in the document that pertains to the event referred by p and correctly answers a simple Wh-question revolving around the predicate word. For example, What did something leave? asks about the house argument in Figure 1.\\nWe will mark the sentence where the predicate resides as $\\\\mathbf{s}_{p}$ and defne the set of local, in-sentence arguments as ${\\\\mathcal{L}}_{\\\\mathrm{p}}=\\\\{a_{i}|a_{i}\\\\in{\\\\mathcal{A}}_{\\\\mathrm{p}}\\\\land a_{i}\\\\subset\\\\mathbf{s}_{p}\\\\}$ , where the subset notation is overloaded here to represent a sub-sequence. While past works have focused on detecting $\\\\mathcal{L}_{\\\\mathrm{p}}$ , we will show a method that leverages $\\\\mathcal{L}_{\\\\mathrm{p}}$ to detect the rest of cross-sentence arguments.\"}\n{\"section_title\":\"4 Method\",\"section_content\":\"Our approach is based on synthesizing a simple sentence that encodes candidate phrases as arguments for the predicate p, and testing if the sentence is entailed from the document. The synthesized sentence $\\\\mathcal{H}$ , named the semantic hypothesis, is created from templates by placing different phrases in subject or object positions around the predicate verb. For example, in proposition no. 2 in Figure 1 \\u2018The boat\\u2019 is assigned to the subject position and represents the LEAVER role, and \\u2018on the day of the bombing\\u2019 is assigned to an adjunct and represents a TEMPORAL role. If the semantic hypothesis is entailed from the passage, we conclude that the predicate-argument relations encoded within $\\\\mathcal{H}$ are manifested in the document. On the other hand, if the hypothesis is not entailed, we can conclude that the document does not express one or more of the encoded argument relations. For example, proposition no. 4 incorrectly assigns \\u2018the investigators\\u2019 to the LEAVER role, which should not be entailed from the passage.\\nOur method iterates over candidate phrases extracted from across the document (Figure 2, left). To determine if a candidate phrase c is a semantic argument of the predicate, we construct several hypotheses that incorporate the candidate and check for entailment against the document (Figure 2, right). The hypotheses combine local, insentence, arguments of the predicate with the candidate phrase, and differ in the syntactic position that the candidate assumes. Conceptually, each position encodes the candidate into a different semantic role. Moreover, the hypothesis sentence associates the candidate with the specifc target event by incorporating local arguments of the event, the remote candidate, and the target predicate into a single sentence. If $\\\\mathcal{H}$ is entailed, it suggests that the candidate participates in the event in the document, and that the candidate\\u2019s semantic role in the document is the same as its role in $\\\\mathcal{H}$ .\\n\\nOur synthetic hypothesis sentence is generated from syntactic templates. They accommodate the main verb (VERB) with up to 4 argument phrases in the following unique syntactic positions: subject (SUBJ), direct object (DOBJ), indirect object (IOBJ), and adjunct (ADJ). It can be modifed using the following grammatical attributes: tense (TEN), negation (NEG), and modality (MOD). These felds are inspired by the QA-SRL question syntax that was similarly used to generate simple propositions in Pyatkin et al. (2021). They present high versatility and can capture any semantic role of a verbal predicate in English, yet maintain a compact representation requiring only a few assignments.\\nIn this work, unless specifed otherwise, we consider as candidates noun phrases and named entities from the document that do not overlap with local arguments, including those from $\\\\mathbf{s}_{p}$ . Each candidate is placed into different hypotheses in the subject, direct and indirect object positions. We use the probability of entailment as predicted by an NLI model as the score of the hypothesis $\\\\operatorname{NLI}(\\\\mathbf{D},{\\\\mathcal{H}})$ and defne the score of each candidate to be\\n\\nthe maximal score of any of its hypotheses. Our fnal predicted set of arguments includes all candidate phrases that scored above a confgurable threshold and all local arguments predicted by the parser. In the next subsections, we will describe how we populate the hypothesis syntactic positions and attributes given the predicate and its sentence (\\u00a74.1), and how we then generate the actual hypothesis sentence $(\\\\S4.2)$ .\"}\n{\"section_title\":\"4.1 Populating Hypothesis Fields\",\"section_content\":\"We initialize the hypothesis felds with the predicate as the main verb and assign its local arguments to syntactic positions. The local arguments are extracted from the predicate\\u2019s sentence along with their question labels using a high-performing QA-SRL parser (Klein et al., 2022) (see Figure 2, center-top). The syntactic position of each argument is determined by applying a heuristic from Klein et al. (2020) that inspects the question and maps it to one of the argument positions (Figure 2, top-left). Generally, each local argument is assigned to a feld according to its syntactic position (Figure 2, center-bottom). However, to mitigate QA-SRL parsing errors and resolve collisions, we score each local argument, and select the top argument per position. To score a local argument, we generate a singleton hypothesis containing only the argument, and compute its entailment probability against the predicate\\u2019s sentence using an NLI model. Refer to $\\\\S\\\\mathrm{G}$ for more details.\\n\\nTense, modality, and negation attributes are determined by inspecting the question of the frst local argument in the hypothesis. For example, \\u2018Who might have left?\\u2019 indicates that the event should be described in the past tense with the modal verb \\u2018might\\u2019 (see $\\\\S\\\\mathrm{G})$ .\\nFinally, given a candidate phrase, we generate different hypotheses, assigning the candidate to a different syntactic position in each, possibly overriding a local argument.\"}\n{\"section_title\":\"4.2 Generating the Semantic Hypothesis\",\"section_content\":\"Given an assignment to the hypothesis felds, we construct the hypothesis sentence by flling a syntactic template and using English grammar rules for infection. If a subject phrase is specifed, we use the active voice template. Otherwise, we resort to the passive voice, placing the direct object in the subject position as follows:\\nActive $\\\\Longrightarrow$ SUBJ-AUX-VERB-DOBJ-IOBJ-ADJ Passive $\\\\Longrightarrow$ DOBJ-AUX-VERBpassive-IOBJ-ADJ\\nThe corresponding auxiliary (AUX) and main verbs are automatically assigned or infected3 based on the grammatical attributes of the hypothesis, the active or passive voice, and after considering the subject-verb agreement.\\nNotably, a valid declarative sentence in English must contain a subject phrase, while for some instances there is no apparent local subject or object argument. E.g. \\u2018the 2 PM presentation\\u2019 implies that someone is presenting something at 2 PM. To write a valid hypothesis, we insert abstract placeholder arguments instead of concrete ones, placing \\u2018someone\\u2019 in an empty subject position or \\u2018something\\u2019 in empty object positions when necessary (see $\\\\S\\\\mathrm{G}$ for details).\\nThe prepositions for indirect objects or adjuncts are assigned by either syntactic analysis or predicted with a masked language model. For local arguments, we look for a connecting preposition between the predicate and the argument by inspecting the original sentence or the declarative form of the QA pair. Otherwise, we use a masked language model (Devlin et al., 2019) to rank prepositions given the full passage and the hypothesis. For more details see Appendix G.\"}\n{\"section_title\":\"5 Predicate-Argument aware NLI Dataset\",\"section_content\":\"Throughout our experiments, we noticed that the readily available NLI models usually make poor decisions when considering different semantic hypotheses, assigning high probability to propositions with unrelated candidates \\u2014 which resonates the fndings of Min et al. (2020); Basmov et al. (2023). We believe that this is caused by the inherent lexical overlap between the hypothesis and the premise texts since our proposition is built entirely from phrases found in the original document. To circumvent this, we train a semantics-aware entailment model from QA-SRL data. We use the singlesentence training data and generate entailed and not-entailed propositions. Each training instance includes a sentence and a proposition centered on a predicate in the sentence. Positive instances include propositions built using the predicate\\u2019s argument set. Each true argument is placed in the hypothesis according to their syntactic position as determined by their QA-SRL question. The positive propositions are then used to build the negative instances in the following two ways: The frst inserts a noun phrase from the sentence that is not an argument into any position. The second switches between syntactic positions of true arguments in the positive proposition, replacing objects as subjects and viceversa. This training setup encourages the model to be more sensitive to the semantics of the hypothesis, as encoded in its argument structure.\\nOur training set contains 465K sentencehypothesis pairs extracted from the training partitions of QANom (Klein et al., 2020) and QASRLv2 (FitzGerald et al., 2018), with $30\\\\%$ positive (entailed) instances. Negative instances are split between subject-object swaps $(14\\\\%)$ , and insertions of non-argument phrases from the sentence $(56\\\\%)$ . We created multiple positive hypotheses for each predicate by omitting subsets of true arguments, anticipating low coverage conditions of the QA-SRL parser at inference time. For negative examples, we sampled one positive hypothesis for each predicate and applied our augmentations.\"}\n{\"section_title\":\"6 Experiment Setup\",\"section_content\":\"\"}\n\n... # only display 10 rows in JSON format, more are truncated due to length constraint based on max_rows (10)"}
{"role": "assistant", "content": "[Thought]: The retrieved sections do not explicitly list the baselines used in the paper. However, the \"Related Works\" section mentions some baselines and related methods. I will now use the `ClassicRetrieve` action to search for the specific baselines used in the experiments, focusing on the \"Experiments\" and \"Related Work\" sections.\n[Action]:\nClassicRetrieve(query=\"What are the specific baselines used in the experiments of the paper with paper_id '7eb41d67-59e3-542a-8f03-93ab8f53216a'?\", limit=5)"}
{"role": "user", "content": "[Observation]:\n{\"score\":0.6843,\"pdf_id\":\"d411e5d8-67c3-5eff-9e4d-101e913322dc\",\"page_number\":6,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"54d0c3e5-c4a9-5492-bc7a-b94201364818\",\"text\":\"which we use as baselines in our experiments (See Ap-\\npendix C for more details):\\n6\"}\n{\"score\":0.6752,\"pdf_id\":\"61ce60c9-f261-543c-b580-e70f31aebad3\",\"page_number\":23,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"3978c783-8ee3-54d4-8f6f-cfc52be7d818\",\"text\":\"Justi\\ufb01cation: We include details of the datasets in both the main paper and supplementary.\\n583\\nThe implementation of baselines rely on open source codes that are well documented.\\n584\\nFurther, we will release our own code for better reproducibility.\\n585\\nGuidelines:\\n586\\n\\u2022 The answer NA means that the paper does not include experiments.\\n587\\n\\u2022 If the paper includes experiments, a No answer to this question will not be perceived\\n588\"}\n{\"score\":0.6649,\"pdf_id\":\"8c5c1f8e-ad29-5b82-ba0e-88323b8d9af7\",\"page_number\":34,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"bda25c5e-d050-5257-b5c4-f4990b9abe3f\",\"text\":\"how we adapted baselines to the experiments and how we tune our parameters are discussed\\nin Section 6.\\nGuidelines:\\n\\u2022 The answer NA means that the paper does not include experiments.\\n\\u2022 The experimental setting should be presented in the core of the paper to a level of detail\\nthat is necessary to appreciate the results and make sense of them.\\n\\u2022 The full details can be provided either with the code, in appendix, or as supplemental\\nmaterial.\\n7. Experiment Statistical Significance\"}\n{\"score\":0.6568,\"pdf_id\":\"d6082aed-b8fc-5d72-a269-763965f5ff53\",\"page_number\":33,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"b1d2339e-a71b-5c9d-9524-e8ffef27e032\",\"text\":\"baselines (Table 7).\\nGuidelines:\\n\\u2022 The answer NA means that the paper does not include experiments.\\n\\u2022 The experimental setting should be presented in the core of the paper to a level of detail\\nthat is necessary to appreciate the results and make sense of them.\\n\\u2022 The full details can be provided either with the code, in appendix, or as supplemental\\nmaterial.\\n7. Experiment Statistical Significance\\nQuestion: Does the paper report error bars suitably and correctly defined or other appropriate\"}\n{\"score\":0.6555,\"pdf_id\":\"a1ca4429-7581-59e3-aa4e-f8d34cdbe67e\",\"page_number\":17,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"09b313ab-fa56-5ff1-ab4d-64f9cd7ded07\",\"text\":\"method and baselines, are provided. Any deviations or omitted experiments are clearly\\nstated with justifications.\\n6. Experimental Setting\\/Details\\nQuestion: Does the paper specify all the training and test details (e.g., data splits, hyper-\\nparameters, how they were chosen, type of optimizer, etc.) necessary to understand the\\nresults?\\nAnswer: [TODO]\\n17\"}\n\nIn total, 5 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved results still do not provide the specific baselines used in the experiments of the paper with the given `paper_id`. However, one of the chunks mentions that the baselines are discussed in Appendix C. Since the previous SQL query to retrieve Appendix C did not return any results, I will now try to retrieve the content of the appendix from the `pages` table.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT page_number, page_content FROM pages WHERE ref_paper_id = '7eb41d67-59e3-542a-8f03-93ab8f53216a' AND page_content LIKE '%Appendix C%';\")"}
{"role": "user", "content": "[Observation]:\n{\"page_number\":6,\"page_content\":\"TNE (Elazar et al., 2022). We derive our main\\nbenchmark from the TNE dataset (\\u00a72). We extract\\npredicate-argument data by focusing on a subset\\nof relations in TNE where the anchor\\u2019s syntactic\\nhead is a deverbal noun, i.e. a nominal predicate,\\nand hypothesize that their complements constitute\\nsemantic arguments of the predicate word. To filter\\nthe relevant anchors, we apply the nominal predi-\\ncate classifier of QANom (Klein et al., 2020) with\\na threshold of 0.75 and identify 10946\\/1315\\/1206\\npredicate instances in the train, development, and\\ntest partitions respectively. The average document\\nin TNE is 8 sentences long, where each deverbal\\nanchor is related to 4.5 complement entities on av-\\nerage, and notably, 2.5 of these have the closest\\nmention to the predicate located in a different sen-\\ntence. Examining a sample of 50 deverbal anchors\\nwe find that out of 275 cross-sentence complement\\nentities, 93% exhibit a semantic relation that can\\nbe captured by a QA-SRL question, validating our\\ninitial hypothesis.\\nThe TNE task pre-specifies a list of noun-phrases\\nas candidates in each document4, and we are tasked\\nto select out of those the complement phrases for\\neach deverbal anchor in the document.\\nWhen using generative methods to form argu-\\nments, we consider a specific NP candidate as pre-\\ndicted if it matches one of the generated argument\\nphrases. Two phrases match if either they share the\\nsame syntactic head or have a high token-wise over-\\nlap of above 0.5 Intersection-over-Union (IOU).\\nOtherwise, any non-overlapping generated phrase\\nis discarded.\\nON5V (Moor et al., 2013) We also evaluate our\\nmethod on ON5V, using the unified set of predi-\\ncates from both train and development partitions as\\nour evaluation data. The documents in this dataset\\nhave gold coreference annotations, which are nec-\\nessary for our evaluation protocol (see \\u00a76.2). We\\nuse cross-fold validation over 4 folds and report\\naverage and standard deviation on the test fold.\\nThe search for arguments is limited to a context\\nwindow of 7 sentences, with 5 preceding and 1\\nsubsequent sentence around the predicate, a scope\\nthat was found to be sufficient to locate more than\\n98% of all originally annotated arguments. We use\\nnoun phrases and named entities as candidates for\\ncross-sentence arguments, they are extracted using\\nSpacy\\u2019s (Honnibal et al., 2020) NER and depen-\\n4Note that in an ordinary SRL setup, a candidate list is not\\nprovided.\\ndency parsers. These candidate phrases cover 80%\\nto 90% of all cross-sentence arguments found in\\nMoor et al. (2013) and Gerber and Chai (2010)\\nrespectively.\\nTo close the coverage gap (see section 2) for\\nmodifier roles we asked an in-house annotator team\\nto go over the existing data and add any argument\\nphrase that can be captured by a QA-SRL ques-\\ntion. The resulting dataset has 3271 arguments\\nwith 1800 novel cross-sentence mentions that did\\nnot belong to any previously annotated entity, em-\\nphasizing the need for exhaustive annotation. We\\nrefer to Appendix C for more details regarding the\\nannotation protocol.\\n6.2\\nEvaluation\\nWe follow the evaluation methodology proposed\\nby Ruppenhofer et al. (2010) and adapt it to our\\nschema-free task setting. It states that credit for a\\nsemantic argument should be assigned only once,\\nirrespective of the number of multiple mentions\\nit has in the reference or system output. Since a\\nsalient argument can dominate the argument set\\nwith multiple mentions, it becomes imperative to\\ndisentangle the evaluation of argument detection\\nfrom co-reference resolution.\\nSpecifically, our evaluation procedure employs\\nexternally provided co-reference data and maps\\npredicted and reference arguments to their entity\\nclusters.5 An entity is considered as predicted if it\\nhas at least one mention in the system output, and\\nlikewise for an entity in the reference set. We calcu-\\nlate the standard precision and recall metrics over\\nentities, summing entity counts over all instances\\nin the dataset.\\nA\\npredicted\\nor\\nreference\\nargument\\nmen-\\ntion is mapped to a co-reference cluster if\\nits match score is above 0.5 with one of\\nthe mentions in the cluster.\\nThe score be-\\ntween two spans in the document is defined as\\nscore(a, m) = max{I[h(a) == h(m)], IOU(a, m)}\\nwhere h(a) is the index of the syntactic head\\ntoken6 of a and IOU is the tokenwise intersection\\nover union score. If an argument is matched to\\nmultiple clusters, we select the one with the higher\\nmatch score. Arguments that do not correspond\\nto any pre-existing cluster form a new singleton\\n5Our evaluation benchmarks provide gold co-reference\\nchains.\\n6Head indices are retrieved with the spaCy dependency\\nparser (Honnibal et al., 2020)\\n16399\\n\"}\n\nIn total, 1 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved page content from Appendix C mentions that the baselines are discussed in the section. I will now extract the specific baselines used in the experiments from this content.\n[Action]:\nGenerateAnswer(answer=['TNE', 'ON5V'])"}
{"role": "user", "content": "[Observation]: ['TNE', 'ON5V']"}
