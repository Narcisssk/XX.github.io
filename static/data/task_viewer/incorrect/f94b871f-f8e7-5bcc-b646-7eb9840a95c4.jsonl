{"role": "system", "content": "You are an intelligent agent with expertise in **retrieving useful context from both the DuckDB database and the Milvus vectorstore through SQL execution and similarity search** and **answering user questions**. You will be given a natural language question concerning PDF files, along with the schema of both the database and the vectorstore. Your ultimate goal is to answer the input question with pre-defined answer format. The DuckDB database contains all parsed content of raw PDF files, while the Milvus vectorstore encodes specific column cells from the database as vectors. You can predict executable actions, interact with the hybrid environment (including database and vectorstore) across multiple turns, and retrieve necessary context until you are confident in resolving the question.\n\n--------\n\n## Task Description\nEach task consists of the following parts:\n\n[Question]: User question regarding the PDF, e.g., Is there any ...?\n[Answer Format]: it describes the format of the final answer, e.g., the answer is \"Yes\" or \"No\" without punctuation.\n[Anchor PDF]: Optional, a python str or list, the PDF(s) you must use to answer the question.\n[Reference PDF]: Optional, a python str or list, the PDF(s) you may use to answer the question.\n[Conference]: Optional, a python str or list, the conference(s) and year(s) of the relevant papers for retrieval.\n[Database Schema]: A detailed serialized schema of the DuckDB database for reference when generating SQL queries. It includes 1) tables, 2) columns and their data types, 3) descriptions for these schema items, and 4) primary key and foreign key constraints.\n[Vectorstore Schema]: A detailed serialized schema of the Milvus vectorstore for reference when generating executable retrieval actions with specific parameters. It includes 1) collections, 2) fields, 3) encodable (table, column) pairs in the relational database where the vectorized content originates, and 4) grammar for valid filter rules.\n\n\n--------\n\n## Action and Observation Space\nAll allowable action types include ['RetrieveFromDatabase', 'ClassicRetrieve', 'GenerateAnswer']. Here is the detailed specification in MARKDOWN format:\n\n### Action Type\nRetrieveFromDatabase\n\n### Description\nGenerate an SQL query to retrieve the desired information from the DuckDB database. Please refer to the concrete database schema to produce a valid and executable SQL.\n\n### Observation\nThe observation space is the execution result of the SQL query. You do not need to worry about the actual execution, we will perform it for you. If the SQL failed to execute, we will return the error message. Extremely long SQL output will be truncated.\n\n### Syntax and Parameters (MARKDOWN Format)\nRetrieveFromDatabase(sql: str)\n- sql: str, required. The concrete DuckDB SQL query to execute and retrieve results.\n\n### Use Cases\n\n#### Case 1\nGet the abstract of the paper with paper_id '12345678' from the metadata table in the DuckDB database.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT abstract FROM metadata WHERE paper_id = '12345678';\")\n\n\n#### Case 2\nFind which page in the paper with paper_id '12345678' contains Figure 3.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT pages.page_number FROM images JOIN pages JOIN metadata ON images.ref_page_id = pages.page_id AND pages.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '12345678' AND images.image_caption LIKE '%Figure 3%';\")\n\n\n----\n\n### Action Type\nClassicRetrieve\n\n### Description\nGiven a query text, retrieve relevant context from the Milvus vectorstore.\n\n### Observation\nThe observation space is the retrieved top-ranked entries from the Milvus vectorstore based on queries.\n\n### Syntax and Parameters (MARKDOWN Format)\nClassicRetrieve(query: str, limit: int = 5)\n- query: str, required. The query text will be encoded and used to search for relevant context. You can rephrase the original user question to obtain a more clear and structured query requirement.\n- limit: int, optional, default to 5. The number of top-ranked context to retrieve. Please set it to a positive integer to limit the number of returned results. Extremely large limit values may be truncated.\n\n### Use Cases\n\n#### Case 1\nRetrieve top 5 pieces about a certain topic.\n\n[Action]: ClassicRetrieve(query='Is there any work about the topic structured RAG?')\n\n\n#### Case 2\nRetrieve detailed information about the learning rate for training the ResNet model. The top 4 most relevant entries will be returned based on the query.\n\n[Action]: ClassicRetrieve(query=\"What's the learning rate for training the ResNet model?\", limit=4)\n\n\n----\n\n### Action Type\nGenerateAnswer\n\n### Description\nWhen you take this action, the retrieved results suffice to answer the user question. PLEASE STRICTLY ADHERE TO THE ANSWER FORMAT FOR THE CURRENT QUESTION.\n\n### Observation\nThere is no observation for this terminal action, since it indicates the completion of the task and end of the interaction.\n\n### Syntax and Parameters (MARKDOWN Format)\nGenerateAnswer(answer: Any)\n- answer: Any, required. The final answer to the user question. Please adhere to the answer format for the current question.\n\n### Use Cases\n\n#### Case 1\nThe answer to the user question is 42.\n\n[Action]: GenerateAnswer(answer=42)\n\n\n#### Case 2\nThe answer to the user question is a list of strings: ['Results', 'Discussion'].\n\n[Action]: GenerateAnswer(answer=['Results', 'Discussion'])\n\n\n\n--------\n\n## Interaction Framework\n\nThe main interaction procedure proceeds like this:\n\n----\n\n[Thought]: ... reasoning process, why to take this action ...\n[Action]: ... which action to take, please strictly conform to the action specification ...\n[Observation]: ... execution results or error message after taking the action ...\n\n... # more interleaved triplets of ([Thought], [Action], [Observation])\n\n[Thought]: ... reasoning process to produce the final answer ...\n[Action]: ... the terminate action `GenerateAnswer`, there is no further observation ...\n\n----\n\nIn general, the main interaction loop consists of an interleaved of triplets ([Thought], [Action], [Observation]), except the last `GenerateAnswer` action which does not have \"[Observation]:\". You need to predict the \"[Thought]: ...\" followed by the \"[Action]: ...\" for each turn, and we will execute your action in the environment and provide the \"[Observation]: ...\" for the previous action.\n\n--------\n\n## Suggestions or Hints for Agent Interaction\n\n1. Explore multiple retrieval strategies. For example:\n- Experiment with different (table, column) pairs to extract diverse types of information.\n- Query various embedding models (collections) to find the most relevant context.\n\n2. Combine both structured and unstructured data. Concretely:\n- Use SQL queries to retrieve precise facts and structured data. Pay special attention to morphological variations in cell values.\n- Perform similarity searches in the vectorstore to capture semantic relationships and hidden insights.\n\n3. Iterate and refine:\n- If SQL execution result is not satisfactory, try alternative SQL queries to explore the database content carefully.\n- If the vector-based neural retrieval is insufficient, try alternative approaches or parameter settings.\n- Use your findings to validate or enrich the final response.\n\n4. Ensure confidence. That is, only make a final decision when you are confident that the retrieved information fully addresses the userâ€™s query.\n\n\nRemember that, for each question, you only have 20 interaction turns at most. Now, let's start!\n"}
{"role": "user", "content": "[Question]: Which sub-splits are included in the validation and test sets of the OC20 dataset used in the paper?\n[Answer Format]: Your answer should be a python list of the full names of the sub-splits. YOU MUST USE THE EXACT FULL NAMES FROM THE PAPER.\n[Anchor PDF]: '82e60cf1-0b61-51c8-899f-490b9462eb9f'\n[Database Schema]: The database schema for /home/htc981/workspace/project/HNS-RAG/data/database/ai_research/ai_research.sql is as follows:\n/* database ai_research: This database contains information about AI research papers. Each PDF file is represented or parsed via different views, e.g., pages, sections, figures, tables, and references. We also extract the concrete content inside each concrete element via OCR.\n*/\n/* table metadata: This table stores metadata about each paper, including the number of pages, paper path and paper id.\n*/\nCREATE TABLE IF NOT EXISTS metadata (\n\tpaper_id UUID, -- A unique identifier for this paper.\n\ttitle VARCHAR, -- The title of this paper.\n\tabstract VARCHAR, -- The abstract of this paper.\n\tnum_pages INTEGER, -- The number of pages in this paper.\n\tconference_full VARCHAR, -- The full name of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tconference_abbreviation VARCHAR, -- The abbreviation of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tpub_year INTEGER, -- The year when this paper was published.\n\tvolume VARCHAR, -- The volume of the conference where this paper was published. e.g. findings.\n\tdownload_url VARCHAR, -- The url from which the paper can be downloaded.\n\tbibtex VARCHAR, -- The bibtex of this paper.\n\tauthors VARCHAR[], -- The full names of authors of this paper.\n\tpdf_path VARCHAR, -- The path to the PDF file of this paper.\n\ttldr VARCHAR, -- A brief summary of the paper's main idea or findings generated by LLM based on title and abstract.\n\ttags VARCHAR[], -- Keywords representing the paper's topics, methods, or applications generated by LLM based on title and abstract.,\n\tPRIMARY KEY (paper_id)\n);\n/* table pages: This table stores information of the pages in the papers, including their content, size and their order within the paper. The pagesare extracted using PyMuPDF.\n*/\nCREATE TABLE IF NOT EXISTS pages (\n\tpage_id UUID, -- A unique identifier for each page.\n\tpage_number INTEGER, -- The page number in the current paper, starting from 1.\n\tpage_width INTEGER, -- The pixel width of the current page.\n\tpage_height INTEGER, -- The pixel height of the current page.\n\tpage_content VARCHAR, -- The content of the page.\n\tpage_summary VARCHAR, -- A brief summary of the page content, generated by LLM, focusing on key information and describing the page content.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (page_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table images: This table stores the information about images in each paper. The images are extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS images (\n\timage_id UUID, -- The unique identifier of the image.\n\timage_caption VARCHAR, -- The caption of this image, \"\" if it doesn't have one.\n\timage_summary VARCHAR, -- A brief summary of the image, generated by LLM, focusing on key information and describing the image.\n\tbounding_box INTEGER[4], -- The bounding box of the figure in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height which are used to determine the shape of the rectangle.\n\tordinal INTEGER, -- Each figure is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (image_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table chunks: This table contains the information of each chunk of text (chunk size = 512 tokens with no overlapping) in each page of the paper. A chunk is a sub-text that is extracted from the main text using langchain, such as a sentence or a paragraph.\n*/\nCREATE TABLE IF NOT EXISTS chunks (\n\tchunk_id UUID, -- A unique identifier for each chunk of text.\n\ttext_content VARCHAR, -- The text content of the current chunk.\n\tordinal INTEGER, -- Each chunk is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (chunk_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table tables: This table stores information about tables extracted from pages using MinerU, including content (in html format), bounding box and summary of each table generated by LLM.\n*/\nCREATE TABLE IF NOT EXISTS tables (\n\ttable_id UUID, -- A unique identifier for each table.\n\ttable_caption VARCHAR, -- Caption of the table, showing key information of the table.\n\ttable_content VARCHAR, -- The content of the table in html format.\n\ttable_summary VARCHAR, -- A brief summary of the table content generated by LLM, focusing on key information and describing the table content.\n\tbounding_box INTEGER[4], -- The bounding box of the table in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height.\n\tordinal INTEGER, -- Each table is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this table is located.,\n\tPRIMARY KEY (table_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table sections: This table contains the text content of each section in the paper, e.g. `Introduction`, `Experiment`, `Conclusion`, `Reference`. The sections are extracted using PyMuPDF or MinerU.\n*/\nCREATE TABLE IF NOT EXISTS sections (\n\tsection_id UUID, -- A unique identifier for each section of text.\n\tsection_title VARCHAR, -- The title of the current section.\n\tsection_content VARCHAR, -- The text content of the current section.\n\tsection_summary VARCHAR, -- A brief summary of the section content generated by LLM, focusing on key information and describing the section content.\n\tordinal INTEGER, -- Each section is labeled with one distinct integer number in the paper, which starts from 0.\n\tpage_numbers INTEGER[], -- A list of page numbers where current section is located in the relevant paper.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (section_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table equations: This table stores information about equations extracted from pages using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS equations (\n\tequation_id UUID, -- A unique identifier for each equation.\n\tequation_content VARCHAR, -- Content of the equation in latex format.\n\tordinal INTEGER, -- Each equation is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the paper ID in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the page ID in the `pages` table where this equation is located.,\n\tPRIMARY KEY (equation_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table reference: This table stores information about references extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS reference (\n\treference_id UUID, -- A unique identifier for each reference.\n\treference_content VARCHAR, -- Content of the reference.\n\tordinal INTEGER, -- Each reference is labeled with one distinct integer number according to its order in the paper, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this reference is located.,\n\tPRIMARY KEY (reference_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n[Vectorstore Schema]: The vectorstore schema for ai_research is as follows. You can try collections with different encoding models or modalities:\n[\n    {\n        \"collection_name\": \"text_bm25_en\",\n        \"modality\": \"text\",\n        \"embed_type\": \"bm25\",\n        \"embed_model\": \"en\",\n        \"description\": \"This collection is used to store the sparse embeddings generated by the BM25 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric inner-product (IP).\",\n        \"fields\": [\n            {\n                \"name\": \"id\",\n                \"dtype\": \"INT64\",\n                \"is_primary\": true,\n                \"description\": \"The unique id for each encoded text vector in this collection.\"\n            },\n            {\n                \"name\": \"vector\",\n                \"dtype\": \"SPARSE_FLOAT_VECTOR\",\n                \"description\": \"The encoded sparse vector of the text content generated by the BM25 model. Note that, the raw text content can be uniquely identified by the triplet fields below: `table_name`, `column_name`, `primary_key`.\"\n            },\n            {\n                \"name\": \"pdf_id\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The unique id of the PDF file stored in the relational database that the encoded text belongs to. This field can be used to quickly filter the search space.\"\n            },\n            {\n                \"name\": \"page_number\",\n                \"dtype\": \"INT16\",\n                \"description\": \"The page number in the PDF file that the encoded text belongs to (starting from 1). This field can be used to quickly filter the search space. Value -1 means unknown.\"\n            },\n            {\n                \"name\": \"table_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which table in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"column_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which column under `table_name` in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"primary_key\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The primary key value of `table_name` (or which row) in the relational database that the text content belongs to. Note that, the triplet (`table_name`, `column_name`, `primary_key`) can be used to construct a one-to-one mapping between the `text` field in the current vectorstore and the cell entry in the relational database.\"\n            }\n        ]\n    },\n    {\n        \"collection_name\": \"text_sentence_transformers_all_minilm_l6_v2\",\n        \"modality\": \"text\",\n        \"embed_type\": \"sentence_transformers\",\n        \"embed_model\": \"all-MiniLM-L6-v2\",\n        \"description\": \"This collection is used to store the embeddings generated by the all-MiniLM-L6-v2 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric COSINE.\",\n        \"fields\": \"The fields of this collection are similar to the `text_bm25_en` collection.\"\n    }\n]\n\nThe following lists all encodable (table_name, column_name, encode_modality) information from the corresponding DuckDB database, where the encoded vector entries are sourced. Note that, for text modality, we directly encode cell values from the `table_name.column_name`; for image modality, we encode the cropped images for `page_number` in `pdf_id` with bounding boxes from `table_name.column_name`. You can leverage them for filter condition during similarity search:\n[\n    [\n        \"metadata\",\n        \"title\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"abstract\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"bibtex\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"tldr\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_content\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_summary\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_caption\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_summary\",\n        \"text\"\n    ],\n    [\n        \"chunks\",\n        \"text_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_caption\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_summary\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_title\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_content\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_summary\",\n        \"text\"\n    ],\n    [\n        \"equations\",\n        \"equation_content\",\n        \"text\"\n    ],\n    [\n        \"reference\",\n        \"reference_content\",\n        \"text\"\n    ]\n]\n\nHere are the operators that you can use in the filtering condition for the vectorstore:\n{\n    \"operators\": {\n        \"logical\": [\n            {\n                \"symbol\": \"not\",\n                \"example\": \"not expr\",\n                \"description\": \"True if expr is false.\"\n            },\n            {\n                \"symbol\": \"and\",\n                \"example\": \"expr1 and expr2\",\n                \"description\": \"True if both expr1 and expr2 are true.\"\n            },\n            {\n                \"symbol\": \"or\",\n                \"example\": \"expr1 or expr2\",\n                \"description\": \"True if either expr1 or expr2 are true.\"\n            }\n        ],\n        \"binary arithmetic\": [\n            {\n                \"symbol\": \"+\",\n                \"example\": \"a + b\",\n                \"description\": \"Add the two operands.\"\n            },\n            {\n                \"symbol\": \"-\",\n                \"example\": \"a - b\",\n                \"description\": \"Subtract the second operand from the first operand.\"\n            },\n            {\n                \"symbol\": \"*\",\n                \"example\": \"a * b\",\n                \"description\": \"Multiply the two operands.\"\n            },\n            {\n                \"symbol\": \"/\",\n                \"example\": \"a / b\",\n                \"description\": \"Divide the first operand by the second operand.\"\n            },\n            {\n                \"symbol\": \"**\",\n                \"example\": \"a ** b\",\n                \"description\": \"Raise the first operand to the power of the second operand.\"\n            },\n            {\n                \"symbol\": \"%\",\n                \"example\": \"a % b\",\n                \"description\": \"Divide the first operand by the second operand and yield the remainder portion.\"\n            }\n        ],\n        \"relational\": [\n            {\n                \"symbol\": \"<\",\n                \"example\": \"a < b\",\n                \"description\": \"True if a is less than b.\"\n            },\n            {\n                \"symbol\": \">\",\n                \"example\": \"a > b\",\n                \"description\": \"True if a is greater than b.\"\n            },\n            {\n                \"symbol\": \"==\",\n                \"example\": \"a == b\",\n                \"description\": \"True if a is equal to b. Please use **two** equal signs for equality comparison.\"\n            },\n            {\n                \"symbol\": \"!=\",\n                \"example\": \"a != b\",\n                \"description\": \"True if a is not equal to b.\"\n            },\n            {\n                \"symbol\": \"<=\",\n                \"example\": \"a <= b\",\n                \"description\": \"True if a is less than or equal to b.\"\n            },\n            {\n                \"symbol\": \">=\",\n                \"example\": \"a >= b\",\n                \"description\": \"True if a is greater than or equal to b.\"\n            },\n            {\n                \"symbol\": \"in\",\n                \"example\": \"a in [b, c, ...]\",\n                \"description\": \"True if a is equal to any of the values in the list.\"\n            }\n        ],\n        \"array operations\": [\n            {\n                \"symbol\": \"[]\",\n                \"example\": \"bbox[0]\",\n                \"description\": \"This expression gets the first element in array bbox. For example, 'bbox[0] < 50' evaluates to true if the value of bbox[0] is less than 50.\"\n            },\n            {\n                \"symbol\": \"array_contains\",\n                \"example\": \"array_contains(bbox, 100)\",\n                \"description\": \"This expression evaluates to true if array bbox contains element 100.\"\n            },\n            {\n                \"symbol\": \"array_length\",\n                \"example\": \"array_length(int_array) == 4\",\n                \"description\": \"This expression evaluates to true if int_array contains exactly 4 elements.\"\n            }\n        ]\n    },\n    \"use cases\": [\n        {\n            \"example\": \"table_name == 'chunks' and column_name == 'text_content'\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and column_name equal to 'text_content'.\"\n        },\n        {\n            \"example\": \"table_name == 'chunks' and primary_key in ['123', '456', '789']\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and primary_key equal to any of the values in the list ['123', '456', '789'].\"\n        },\n        {\n            \"example\": \"bbox[0] + bbox[2] <= 100 and bbox[1] + bbox[3] <= 300 and pdf_id == '123456' and page_number == 1\",\n            \"description\": \"For image modality, filter results to include only image regions that are entirely within the upper-left quadrant of page 1 in the PDF with ID '123456', assuming the page dimensions are 200 (width) x 600 (height).\"\n        }\n    ]\n}"}
{"role": "assistant", "content": "[Thought]: To answer the question about the sub-splits included in the validation and test sets of the OC20 dataset, I need to retrieve the relevant information from the paper with the given `paper_id`. I will first check the `sections` table to find the section that discusses the dataset and then extract the specific sub-splits mentioned.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_content FROM sections WHERE ref_paper_id = '82e60cf1-0b61-51c8-899f-490b9462eb9f' AND section_title LIKE '%Dataset%' OR section_title LIKE '%Data%' OR section_title LIKE '%Experiment%' OR section_title LIKE '%Evaluation%';\")"}
{"role": "user", "content": "[Observation]:\n{\"section_content\":\"DATASETS WITH DIVERSE DEMONSTRATIONS FOR IMITATION LEARNING\\nIn this section, we present a novel suite of tasks known as D3IL - Datasets with Diverse Demon-\\nstrations for Imitation Learning. We first introduce metrics for the quantification of diverse behavior\\n(refer to Section 3.1). Subsequently, we delve into the design principles underlying our tasks, which\\nare subsequently introduced at the end of this section.\\n3.1\\nQUANTIFYING DIVERSE BEHAVIOR\\nLet D = {(an, sn)}N\\nn=1 be a human-recorded demonstration dataset with actions a \\u2208A and states\\ns \\u2208S. Further, let p(a|s) be the underlying state-conditional action distribution. The goal of\\nimitation learning is to learn a policy \\u03c0(a|s) \\u2248p(a|s). Diversity is characterized by a multimodal\\naction distribution p(a|s), meaning that there are multiple distinct actions that are likely for a given\\nstate s. We refer to this as multimodality on a state-level. However, this multimodality is hard to\\nquantify in most scenarios as we do not have access to p(a|s). Instead, we look at the multimodality\\non a behavior-level to define an auxiliary metric that reflects if a model is capable of imitating diverse\\nbehaviors. To define behavior-level multi-modality, we introduce discrete behavior descriptors \\u03b2 \\u2208\\nB, for example, which box has been chosen to be pushed first. The space B of behavior descriptors\\nare thus task-specific and are discussed in Section 3.3.\\nTo evaluate the ability of a trained policy \\u03c0(a|s) to capture multi-modality, we collected data such\\nthat we have an approximately equal number of demonstrations for each behavior descriptor \\u03b2 \\u2208B.\\nThereafter, we perform simulations in the task environment to compute the agents\\u2019 distribution \\u03c0(\\u03b2)\\nover its achieved behaviors. We then assess the policy\\u2019s capability of learning diverse behavior by\\nleveraging the behavior entropy, that is,\\nH\\n\\u0000\\u03c0(\\u03b2)\\n\\u0001\\n= \\u2212\\nX\\n\\u03b2\\u2208B\\n\\u03c0(\\u03b2) log|B| \\u03c0(\\u03b2).\\n(1)\\nPlease note that we employ the logarithm with a base of |B| to ensure that H\\n\\u0000\\u03c0(\\u03b2)\\n\\u0001\\n\\u2208[0, 1].\\nThis choice of base facilitates a straightforward interpretation of the metric: An entropy value of 0\\nsignifies a policy that consistently executes the same behavior, while an entropy value of 1 represents\\na diverse policy that executes all behaviors with equal probability, that is, \\u03c0(\\u03b2) \\u22481\\/|B| and hence\\nmatches the true behavior distribution by the design of the data collection process. Yet, a high\\nbehavior entropy can also be achieved by following different behaviors in different initial states in a\\ndeterministic manner, and hence, this behavior entropy can be a poor metric for behavior diversity.\\nHence, we evaluate the expected entropy of the behavior conditioned on the initial state s0. If, for\\nthe same initial state, all behaviors can be achieved, the conditional behavior entropy is high, while\\n3\\nPublished as a conference paper at ICLR 2024\\nif for the same initial state always the same behavior is executed, this entropy is 0. We define the\\nconditional behavior entropy as\\nEs0\\u223cp(s0)\\n\\u0002\\nH\\n\\u0000\\u03c0(\\u03b2|s0)\\n\\u0001\\u0003\\n\\u2248\\u22121\\nS0\\nX\\ns0\\u223cp(s0)\\nX\\n\\u03b2\\u2208B\\n\\u03c0(\\u03b2|s0) log|B| \\u03c0(\\u03b2|s0),\\n(2)\\nwhere the expectation is approximated using a Monte Carlo estimate. Here, S0 denotes the number\\nof samples from the initial state distribution p(s0).\\n3.2\\nTASK DESIGN PRINCIPLES\\nWe build D3IL based on the following key principles: i) Diverse Behavior. Diversity is the central\\naspect of our task design. We intentionally design our tasks to encompass multiple viable approaches\\nto successful task completion. To quantify the behavior diversity, we explicitly specify these dis-\\ntinct behaviors, each representing a legitimate solution. ii.) Multiple Human Demonstrators. To\\nreflect the natural variability in human behavior and to obtain a richer dataset, we have collected\\ndemonstration data from multiple human demonstrators. This diversity in data sources introduces\\nvariations in the quality and style of demonstrations. iii.) Variable Trajectory Lengths. Our tasks\\nincorporate variable trajectory lengths, replicating real-world scenarios where demonstrations may\\ndiffer in duration. This design choice challenges our learning agents to handle non-uniform data se-\\nquences effectively. By accommodating varying trajectory lengths, our approach must learn to adapt\\nand generalize to different time horizons, a critical property for real-world applications. iv.) Task\\nVariations and Closed-Loop Feedback. For most tasks, agents need to rely on sensory feedback\\nto achieve a good performance which considerably increases the complexity of the learning task\\nin comparison to learning open-loop trajectories. We achieve this by introducing task variations in\\nevery execution. For example, in every execution, the initial position of the objects will be different\\nand the agent needs to adapt its behaviour accordingly.\\n3.3\\nTASK DESCRIPTION AND DATA COLLECTION\\nWe simulate all tasks (T1-T5) using the Mujoco physics engine (Todorov et al. (2012)). The simula-\\ntion environment consists of a 7DoF Franka Emika Panda robot and various objects. For T1-T4, the\\nrobot is equipped with a cylindrical end effector to perform object manipulations. The corresponding\\ndemonstrations are recorded by using an Xbox game-pad which sends commands to an inverse kine-\\nmatics (IK) controller. In T5, the robot has a parallel gripper and uses an augmented reality setup\\nfor controlling the end effector (Jiang et al., 2024), allowing for more dexterous manipulations.\\nAvoiding (T1). The Avoiding task requires the robot to reach the green\\nfinish line from a fixed initial position without colliding with one of\\nthe six obstacles. The task does not require object manipulation and\\nis designed to test a model\\u2019s ability to capture diversity. There are\\n24 different ways of successfully completing the task and thus |B| =\\n24. The dataset contains 96 demonstrations in total, comprising 24\\nsolutions with 4 trajectories for each solution.\\nAligning (T2). The Aligning task requires the robot to push a hollow\\nbox to a predefined target position and orientation. The task can be\\ncompleted by either pushing the box from outside or inside and thus\\n|B| = 2. It requires less diversity than T1 but involves complex object\\nmanipulation. The dataset contains 1k demonstrations, 500 for each\\nbehavior with uniformly sampled initial states.\\n4\\nPublished as a conference paper at ICLR 2024\\nPushing (T3). This task requires the robot to push two blocks to fixed\\ntarget zones. Having two blocks and two target zones results in |B| = 4\\nbehaviors. The task has more diversity than T2 and involves complex\\nobject manipulations. Additionally, the task has high variation in tra-\\njectory length caused by multiple human demonstrators with different\\nexperience levels. The dataset contains 2k demonstrations, 500 for each\\nbehavior with uniformly sampled initial block positions.\\nSorting-X (T4). This task requires the robot to sort red and blue blocks\\nto their color-matching target box. The \\u2018X\\u2019 refers to the number of\\nblocks. In this work, we test three difficulty levels, i.e., X \\u2208{2, 4, 6}.\\nThe number of behaviors |B| is determined by the sorting order. For\\nX = 6, the task has many objects, is highly diverse (|B| = 20), re-\\nquires complex manipulations, has high variation in trajectory length,\\nand is thus more challenging than T1-T3. The dataset contains 1.6k\\ndemonstrations for X = 6 and an approximately equal number of tra-\\njectories for each sorting order.\\nStacking-X (T5). This task requires the robot to stack blocks with\\ndifferent colors in a (yellow) target zone. The number of behaviors |B|\\nis given by the stacking order. Having three different blocks results\\nin six different combinations for stacking the blocks and hence |B| =\\n6. This task additionally requires dexterous manipulations since the\\nblue box has the be stacked upright and is thus considered to be the\\nmost challenging out of all five tasks. Here, \\u2018X\\u2019 does not refer to the\\ndifficulty but rather to the evaluation protocol: For Stacking-X with\\nX \\u2208{1, 2, 3} we compute the performance metrics of the models that\\nare capable of stacking X blocks. The \\u22481k trajectories were recorded\\nusing augmented reality (AR) such that each stacking order is equally\\noften present.\\n4\"}\n{\"section_content\":\"Training Set The training corpora consist of $10{\\\\bf K}+$ hours of paired audio-text data, sampled from both public and in-house datasets. This data regime is representative of a variety of ASR systems used for various speech applications, with a mix of accents, speakers, sampling rates, and background noise. Less than $5\\\\%$ of the data are synthetic audios generated using AWS Polly Text-to-Speech (TTS) 2 neural backend.\\nEvaluation Set We evaluate the proposed MATE approach on both synthetic and real datasets from various domains: MTDialogue (movie-twitter), LibriSpeech (LS) (Panayotov et al., 2015) and VoxPopuli (Wang et al., 2021) are in-domain sets, as the training set includes their corresponding train data splits. Wall Street Journal (WSJ) (Garofolo et al., 1993), ConvAI (in-house), SLURP (Bastianelli et al., 2020) datasets are out-of-domain (OOD) datasets for zero-shot evaluation.\\nMTDialogue (movie-twitter) is based on a public lexical dialogue corpus 3 which consists of movie subtitles and twitter user interactions. The audios are generated from TTS system. MTDialogue dataset is a seen dataset for open-book evaluation; i.e., all its data samples are covered in training data. An subset of 1.2 hour is sampled for evaluation. LibriSpeech(LS) (Panayotov et al., 2015) is a read English speech corpus based on LibriVox audiobooks. We consider the two offcial evaluation sets: test-clean and test-other, each with 5.0 hours of test audios. VoxPopuli (Wang et al., 2021) consists of public political speech, sampled from 2009-2020 European Parliament event recordings. For our evaluation purpose, we utilize a 5-hour subset of VoxPopuli English data.\\n\\nWe also evaluate MATE on OOD evaluation sets: ConvAI, WSJ, and SLURP. The Wall Street Journal (WSJ) (Garofolo et al., 1993) corpus contains conventional and spontaneous dictation by journalists. The test_eval93 split of 0.4 hour is selected for our evaluation. ConvAI is based on in-house user utterances of a task-oriented conversational AI system. The typical usage scenarios include booking fights, ordering food and querying health insurance information, etc. The 2.0 hours of audios are generated from TTS system. SLURP (Bastianelli et al., 2020) is a public dataset for smart home virtual assistant development. Top usage scenarios include checking calendar, playing music, and asking about time, etc. We utilized the $10\\\\,\\\\mathrm{hr}$ test set for evaluation.\\nEthical Considerations: We have reviewed all licenses of public datasets, which allow the usage for research and paper publication. The in-house dataset ConvAI is internally approved for research purposes. All datasets are sets are de-identifed to ensure anonymity. We also make sure the datasets cover various English accents, speakers and backgrounds.\"}\n{\"section_content\":\"We validate our methods on 10 datasets over 4 tasks, including quadruplet tasks, ASQP and ACOS, and triplet tasks, ASTE and TASD. For a fair comparison, we apply the same data splits as previous works. The targets of each task are shown in Table 1 and the detailed statistics are in Appendix A.\\nFor the ASQP task, we adopt two datasets in the restaurant domain based on SemEval tasks (Pontiki et al., 2015, 2016), Rest15 and Rest16 aligned and completed by Zhang et al. (2021a) subsequently. For the ACOS task, we apply Restaurant-ACOS and Laptop-ACOS constructed by Cai et al. (2021). Compared with ASQP, datasets of ACOS focus on implicit aspects and opinions, which helps to measure our methods comprehensively. For the triple tasks, we adopt datasets provided by Xu et al. (2020) and Wan et al. (2020) for ASTE (Peng et al., 2020) and TASD, respectively.\"}\n{\"section_content\":\"Table 9 shows the data statistics of all datasets of the ASQP, ACOS, ASTE and TASD task. For fair comparison, we keep the same train\\/dev\\/test division as previous works.\"}\n{\"section_content\":\"Table 7 shows the statistics of the three public benchmark datasets, including ACE05-E, ACE05- $\\\\mathrm{E+}$ and ERE-EN.\"}\n{\"section_content\":\"We construct a parallel dataset for Classical Chinese and Kanbun. The dataset consists of original ancient Chinese texts, Japanese reading orders, and Kanbun texts. We show examples in Table 1.\\nAlthough it is crucial to choose texts that cover as many periods as possible since vocabulary and grammar change with time, it is diffcult to construct a comprehensive dataset. To our knowledge, Tangshixuan8 (Selection of Tang Poems) is the largest resource containing both original ancient Chinese texts and translated Kanbun texts. We use this resource to make our dataset. For preprocessing, we extract the Japanese reading order from Kanbun by a rule-based program. For the special tokens that may not appear in Kanbun or appear multiple times, we annotated them manually. We also convert the characters from old character forms to new character forms (kind of like transforming Traditional Chinese to Simplifed Chinese, but in Japanese character forms) using dictionaries to mitigate the out-of-vocabulary problem.\\nTangshixuan contains a total of 465 poems. We split the dataset using group shuffe split to ensure that all sentences in one poem would not be split. Table 2 lists the statistics of the dataset.\\nBased on the dataset, we introduce two tasks, character reordering and machine translation, both of which are signifcant in Kanbun comprehension. For character reordering, the goal is to transform Classical Chinese texts into Japanese reading orders, from SVO to SOV. Japanese reading orders as\\nTable 1: Examples of our dataset. Each instance has a triple of the original ancient Chinese text, the Japanese reading order (the numbers represent their index in the original text), and the translated Kanbun text.\\nshown in Table 1, such as \\u201c12543\\u201d, are the targets to be predicted. Machine translation is a sequenceto-sequence task that translates Classical Chinese texts into Kanbun. Since the source and target sentences share the vocabulary, it can also be considered as a multilingual rewriting task.\\nWe split each sentence into characters and preprocess them into inputs by the form {character}{the character\\u2019s index in the sentence}[SEP]{sentence}. The character\\u2019s index is added to handle the cases where more than two identical characters appear in one sentence. To make gold labels for training, we normalize the ranks by the lengths of the sentences, making the value of ranks range from 0 to 1 (for a sentence of length 5, the ranks will be normalized from 1, 2, ..., 5 to 0.2, 0.4, ..., 1). Once we collect the output ranks, we sort them in ascending order and restore them to the original characters. Then we obtain a reordered sentence. An illustration of our sorting method is shown in (A) of Figure 2.\"}\n{\"section_content\":\"Details of Dataset\\nTo train the visual text generation model, we constructed a dataset called TG-2M, which contains rich\\ntextual data. The images in this dataset are sourced from existing open-source datasets, including\\nMARIO-10M [5], Wukong [8], ArT [6], LSVT [27], MLT [16], ReCTS [37], TextSeg [31]. Following\\nAnyText [28], we filter the images with some rules, which can devided into three steps. Specifically,\\nthe filtering rules of the first step include:\\n\\u2022 The images of width smaller than 256 will be filtered out.\\n\\u2022 The images with aspect ratio larger than 2.0 or smaller than 0.5 will be filtered out.\\nAfter step 1, we use PP-OCR5 to detect and recognize the texts in these images. Then, we undergo\\nthe second filtering step:\\n\\u2022 The images with more than 10 texts will be filtered out.\\n\\u2022 The images with more than 3 small texts will be filtered out. The small text refers to\\nhorizontal text with a height of less than 30 pixels or vertical text with a width of less than\\n30 pixels. The orientation of the text is determined by the aspect ratio of the text bounding\\nbox, with an aspect ratio less than 0.5 considered vertical text.\\n\\u2022 Images containing more than 3 text instances with recognition scores below 0.7 will be\\nfiltered out.\\nWe use BLIP-2 [12] and Qwen-VL [1] to recaption the images. First, we generate initial captions\\nusing BLIP-2. Because some initial captions are low-quality, we then modify these captions using\\nQwen-VL. The low-quality captions are defined as those containing meaningless text or having low\\nCLIP similarity with the reference image. This process is necessary because some captions generated\\nby BLIP-2 are meaningless, as shown in Fig. 10. Additionally, although Qwen-VL\\u2019s captions are of\\nhigh quality, many of them are quite lengthy, which can affect the understanding of the CLIP text\\nencoder in the diffusion model.\\nBLIP-2 Caption: carouselell - carouselell - carouselell - carouselell - carouselell -\\ncarouselell - carouselell - carouselell \\u2013\\nQwen-VL Caption: An animated welcome message displayed by the website carousell.com. \\nIt features several icons arranged around a central circle which contains the text \\u201cCarousell\\u201d.\\nBLIP-2 Caption: car cover for car, car cover for car, car cover for car, car cover for car, car \\ncover for car.\\nQwen-VL Caption: Free shipping! Car Cover Sun UV Snow Dust Rain Resistant \\nProtection Covers M L XL XXL size(China (Mainland))\\nBLIP-2 Caption: barahan - fire breathers\\nQwen-VL Caption: The album artwork of Sarah Burtons' debut release 'Firebreatherers'.\\nBLIP-2 Caption: i pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi\\npi pi pi\\nQwen-VL Caption: Two speech bubbles say be rational and get real.\\nFigure 10: Comparison of captions by BLIP-2 and Qwen-VL.\\nExamples from our TG-2M dataset are shown in Fig.11, illustrating the variety of image styles. The\\ndataset statistics are summarized in Tab.3. TG-2M contains a total of 2.53 million images with 9.54\\n5https:\\/\\/github.com\\/PaddlePaddle\\/PaddleOCR\\n13\\nTable 3: The statistics of our proposed TG-2M dataset.\\nimage count\\nline count\\nmean chars\\/line\\n#line < 20 chars\\nEnglish\\n1.3M\\n5.59M\\n4.23\\n5.50M, 98.4%\\nChinese\\n1.23M\\n3.95M\\n5.68\\n3.83M, 97.0%\\nTotal\\n2.53M\\n9.54M\\n4.83\\n9.33M, 97.8%\\nFigure 11: Some cases in our proposed TG-2M dataset.\\nmillion text lines. On average, each text line contains 4.83 characters. Notably, 97.8% of the text\\nlines have fewer than 20 characters, which facilitates effective training of our model.\\nB\"}\n{\"section_content\":\"The detailed statistics are shown in Table 1.\\nFingerspelling LibriSpeech To extract semantic units from the fngerspelling signs, we trained the visual CPC encoder on a sentence-level fngerspelling dataset constructed from the 960-hour LibriSpeech dataset and the Unvoiced dataset (Nagaraj, 2018). To construct the dataset, we replace each letter in the LibriSpeech transcript with an image of that letter\\u2019s ASL Alphabet symbol chosen uniformly at random from Unvoiced. To study the effect of visual variability on SSR-U, we subset the ASL Alphabet images to 100, 300, 500, or 1000 images per letter sign. The dev-clean subset of LibriSpeech is used as the validation set.\\nFingerspelling LJSpeech We train our characterlevel model on another sentence-level fngerspelling dataset constructed from LJSpeech (Ito and Johnson, 2017) and the ASL Alphabet dataset similar to the fngerspelling LibriSpeech.\\nASL LibriSpeech For the word-level SSR-U, we construct another corpus using LibriSpeech for speech and MSASL (Joze and Koller, 2019) for word-level sign videos. Since many MSASL videos no longer exist on YouTube, only $11.6\\\\mathbf{k}$ out of $25\\\\mathrm{k}$ videos are downloaded. Further, due to the mismatch in vocabulary size, we use forced alignment information to flter out LibriSpeech words that don\\u2019t appear in MSASL and keep sentences that are at least 5 words long. Next, for each word in each sentence, we pick a word-level sign video uniformly at random from MSASL. To study the effect of vocabulary size on our model, we follow the split provided by (Joze and Koller, 2019) to subset the data to a vocabulary size of 100, 200, 500 or 1000.\"}\n\n... # only display 8 rows in JSON format, more are truncated due to length constraint based on max_tokens (5000)"}
{"role": "assistant", "content": "[Thought]: The sections retrieved from the database do not contain the specific information about the OC20 dataset. I will now perform a similarity search in the vectorstore to find the relevant context.\n[Action]:\nClassicRetrieve(query='Which sub-splits are included in the validation and test sets of the OC20 dataset?', limit=5)"}
{"role": "user", "content": "[Observation]:\n{\"score\":0.7074,\"pdf_id\":\"5892a439-7de0-5e1a-8936-cc57d1bf1f0c\",\"page_number\":21,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"5c07cec0-6edb-552d-abbf-30aac89044f4\",\"text\":\"all the three splits available. We split the training set into train (0.8 fraction) and validation sets (0.2\\nfraction). And, use the validation or test split for reporting numbers. The details of all the datasets\\nare included in Table 2.\\n21\"}\n{\"score\":0.6863,\"pdf_id\":\"b0db48ce-526c-56c0-a425-d2be285a11fa\",\"page_number\":10,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"e813e7ba-7c9b-589d-9292-c2cef66dfd9b\",\"text\":\"to construct the train\\/dev\\/test splits as follows: (a)\\nfor datasets with fewer than 10k samples (RTE,\\nMRPC), we divide the original validation set in\\nhalf, using one half for validation and the other for\\ntesting. (b) for larger datasets (MNLI), we split 2k\\nsamples from the training set as the development\\nset, and use the original development set as the test\\nset. The detailed dataset statistics are presented in\\nTable 4.\\nC\\nAppendix for experimental settings\\nWe add a classification layer after each interme-\"}\n{\"score\":0.6824,\"pdf_id\":\"9b06b24b-0afc-5ccb-95fc-c662395d291d\",\"page_number\":15,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"eccdf438-ffda-5d8f-bf9c-0605f49f9ad7\",\"text\":\"the training split as the validation set and the re-\\nmaining 90% for training. We split the datasets\\nwith the datasets library (Lhoest et al., 2021) us-\\ning seed 42 and shuffle the samples. Then, the\\noriginal validation split is taken as the test set on\\nwhich we report the performance of all models. For\\nHumSet, we use the original train\\/validation\\/test\\nsplits, as all of them are publicly available, includ-\\ning labels. Details about the train\\/validation\\/test\\nsplits can be found in Table 5.\"}\n{\"score\":0.6575,\"pdf_id\":\"fbebae68-619e-5c14-85c2-f3186b3be1c2\",\"page_number\":25,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"8646b0ce-7dfa-59b9-8f1a-9ecff0ce6c4c\",\"text\":\"Are there recommended data splits (e.g., training, development\\/validation, testing)? If so, please\\nprovide a description of these splits, explaining the rationale behind them.\\n\\u2022 Yes, the Syn-IS dataset is split according to the semantic and covariate shift levels, which is\\nsuited for the evaluation process of our IS-OOD benchmark.\\nAre there any errors, sources of noise, or redundancies in the dataset? If so, please provide a\\ndescription.\"}\n{\"score\":0.6543,\"pdf_id\":\"0ccddb86-7696-59b3-af01-b2df817a0714\",\"page_number\":2,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"2124b30f-7bc6-50c7-b96e-c984bca5169d\",\"text\":\"with four splits: train, validation, test, and hidden test (with 329k training samples, 11k validation\\n2\"}\n\nIn total, 5 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved results from the vectorstore do not directly provide the sub-splits of the OC20 dataset. I will refine the query to be more specific and try again.\n[Action]:\nClassicRetrieve(query='OC20 dataset validation and test set sub-splits', limit=5)"}
{"role": "user", "content": "[Observation]:\n{\"score\":0.7085,\"pdf_id\":\"6d91f7ae-5206-5b7d-8782-d9926307f15f\",\"page_number\":6,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"847a7bca-838d-5b13-8cb7-5899b9b8b31f\",\"text\":\"following the approach of Raffel et al. (2020). Since the original test sets are not publicly available,\\nwe adopt the data split strategy from Zhang et al. (2020). For smaller datasets (RTE, MRPC, STS-B,\\nCoLA) with fewer than 10K samples, we split the original validation set equally into validation and\\ntest sets. For larger datasets, we create a validation set by reserving 1K samples from the training\\ndata and use the original validation set for testing.\\nBaselines:\"}\n{\"score\":0.6942,\"pdf_id\":\"b0db48ce-526c-56c0-a425-d2be285a11fa\",\"page_number\":10,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"e813e7ba-7c9b-589d-9292-c2cef66dfd9b\",\"text\":\"to construct the train\\/dev\\/test splits as follows: (a)\\nfor datasets with fewer than 10k samples (RTE,\\nMRPC), we divide the original validation set in\\nhalf, using one half for validation and the other for\\ntesting. (b) for larger datasets (MNLI), we split 2k\\nsamples from the training set as the development\\nset, and use the original development set as the test\\nset. The detailed dataset statistics are presented in\\nTable 4.\\nC\\nAppendix for experimental settings\\nWe add a classification layer after each interme-\"}\n{\"score\":0.6611,\"pdf_id\":\"e480bb47-4b96-5155-9c24-ad8c845774b4\",\"page_number\":11,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"13296edf-f80e-541f-ac1b-dad0fcce34f5\",\"text\":\"the following sources: Food-101 from https:\\/\\/visiir.isir.upmc.fr, N24News from https:\\n\\/\\/github.com\\/billywzh717\\/N24News, and BRCA and ROSMAP from https:\\/\\/github.com\\/\\ntxWang\\/MOGONET.\\nTo ensure a fair comparison with previous works, we adopt the default split method detailed in Table\\n4. As the Food-101 dataset does not include a validation set, we partition 5,000 samples from the\\ntraining set to create one, which is conistent with other baselines.\\nDataset\\nModalities\\nModality Types\\nTrain\\nValidation\\nTest\"}\n{\"score\":0.6541,\"pdf_id\":\"3cca9875-edd7-5fa9-b8c1-b70e146475ff\",\"page_number\":16,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"e86aaa79-81a1-5687-985b-52e69e0ecc75\",\"text\":\"data partitioning strategy. We divide the data into training, validation, and test sets with ratios of\\n0.75, 0.15, and 0.15, respectively. This split ensures a substantial portion of data for training while\\nallocating sufficient samples for validation and testing. In cases where the datasets for downstream\\ntasks does not come with predefined train-validation-test splits, we implement a robust splitting\\nstrategy. We randomly divide the data into training, validation, and test sets, maintaining consistent\"}\n{\"score\":0.6442,\"pdf_id\":\"9b06b24b-0afc-5ccb-95fc-c662395d291d\",\"page_number\":15,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"eccdf438-ffda-5d8f-bf9c-0605f49f9ad7\",\"text\":\"the training split as the validation set and the re-\\nmaining 90% for training. We split the datasets\\nwith the datasets library (Lhoest et al., 2021) us-\\ning seed 42 and shuffle the samples. Then, the\\noriginal validation split is taken as the test set on\\nwhich we report the performance of all models. For\\nHumSet, we use the original train\\/validation\\/test\\nsplits, as all of them are publicly available, includ-\\ning labels. Details about the train\\/validation\\/test\\nsplits can be found in Table 5.\"}\n\nIn total, 5 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved results still do not provide the specific sub-splits of the OC20 dataset. I will try a more targeted SQL query to extract the relevant section content.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_content FROM sections WHERE ref_paper_id = '82e60cf1-0b61-51c8-899f-490b9462eb9f' AND section_title LIKE '%Dataset%' OR section_title LIKE '%Data%' OR section_title LIKE '%Experiment%' OR section_title LIKE '%Evaluation%';\")"}
{"role": "user", "content": "[Observation]:\n{\"section_content\":\"DATASETS WITH DIVERSE DEMONSTRATIONS FOR IMITATION LEARNING\\nIn this section, we present a novel suite of tasks known as D3IL - Datasets with Diverse Demon-\\nstrations for Imitation Learning. We first introduce metrics for the quantification of diverse behavior\\n(refer to Section 3.1). Subsequently, we delve into the design principles underlying our tasks, which\\nare subsequently introduced at the end of this section.\\n3.1\\nQUANTIFYING DIVERSE BEHAVIOR\\nLet D = {(an, sn)}N\\nn=1 be a human-recorded demonstration dataset with actions a \\u2208A and states\\ns \\u2208S. Further, let p(a|s) be the underlying state-conditional action distribution. The goal of\\nimitation learning is to learn a policy \\u03c0(a|s) \\u2248p(a|s). Diversity is characterized by a multimodal\\naction distribution p(a|s), meaning that there are multiple distinct actions that are likely for a given\\nstate s. We refer to this as multimodality on a state-level. However, this multimodality is hard to\\nquantify in most scenarios as we do not have access to p(a|s). Instead, we look at the multimodality\\non a behavior-level to define an auxiliary metric that reflects if a model is capable of imitating diverse\\nbehaviors. To define behavior-level multi-modality, we introduce discrete behavior descriptors \\u03b2 \\u2208\\nB, for example, which box has been chosen to be pushed first. The space B of behavior descriptors\\nare thus task-specific and are discussed in Section 3.3.\\nTo evaluate the ability of a trained policy \\u03c0(a|s) to capture multi-modality, we collected data such\\nthat we have an approximately equal number of demonstrations for each behavior descriptor \\u03b2 \\u2208B.\\nThereafter, we perform simulations in the task environment to compute the agents\\u2019 distribution \\u03c0(\\u03b2)\\nover its achieved behaviors. We then assess the policy\\u2019s capability of learning diverse behavior by\\nleveraging the behavior entropy, that is,\\nH\\n\\u0000\\u03c0(\\u03b2)\\n\\u0001\\n= \\u2212\\nX\\n\\u03b2\\u2208B\\n\\u03c0(\\u03b2) log|B| \\u03c0(\\u03b2).\\n(1)\\nPlease note that we employ the logarithm with a base of |B| to ensure that H\\n\\u0000\\u03c0(\\u03b2)\\n\\u0001\\n\\u2208[0, 1].\\nThis choice of base facilitates a straightforward interpretation of the metric: An entropy value of 0\\nsignifies a policy that consistently executes the same behavior, while an entropy value of 1 represents\\na diverse policy that executes all behaviors with equal probability, that is, \\u03c0(\\u03b2) \\u22481\\/|B| and hence\\nmatches the true behavior distribution by the design of the data collection process. Yet, a high\\nbehavior entropy can also be achieved by following different behaviors in different initial states in a\\ndeterministic manner, and hence, this behavior entropy can be a poor metric for behavior diversity.\\nHence, we evaluate the expected entropy of the behavior conditioned on the initial state s0. If, for\\nthe same initial state, all behaviors can be achieved, the conditional behavior entropy is high, while\\n3\\nPublished as a conference paper at ICLR 2024\\nif for the same initial state always the same behavior is executed, this entropy is 0. We define the\\nconditional behavior entropy as\\nEs0\\u223cp(s0)\\n\\u0002\\nH\\n\\u0000\\u03c0(\\u03b2|s0)\\n\\u0001\\u0003\\n\\u2248\\u22121\\nS0\\nX\\ns0\\u223cp(s0)\\nX\\n\\u03b2\\u2208B\\n\\u03c0(\\u03b2|s0) log|B| \\u03c0(\\u03b2|s0),\\n(2)\\nwhere the expectation is approximated using a Monte Carlo estimate. Here, S0 denotes the number\\nof samples from the initial state distribution p(s0).\\n3.2\\nTASK DESIGN PRINCIPLES\\nWe build D3IL based on the following key principles: i) Diverse Behavior. Diversity is the central\\naspect of our task design. We intentionally design our tasks to encompass multiple viable approaches\\nto successful task completion. To quantify the behavior diversity, we explicitly specify these dis-\\ntinct behaviors, each representing a legitimate solution. ii.) Multiple Human Demonstrators. To\\nreflect the natural variability in human behavior and to obtain a richer dataset, we have collected\\ndemonstration data from multiple human demonstrators. This diversity in data sources introduces\\nvariations in the quality and style of demonstrations. iii.) Variable Trajectory Lengths. Our tasks\\nincorporate variable trajectory lengths, replicating real-world scenarios where demonstrations may\\ndiffer in duration. This design choice challenges our learning agents to handle non-uniform data se-\\nquences effectively. By accommodating varying trajectory lengths, our approach must learn to adapt\\nand generalize to different time horizons, a critical property for real-world applications. iv.) Task\\nVariations and Closed-Loop Feedback. For most tasks, agents need to rely on sensory feedback\\nto achieve a good performance which considerably increases the complexity of the learning task\\nin comparison to learning open-loop trajectories. We achieve this by introducing task variations in\\nevery execution. For example, in every execution, the initial position of the objects will be different\\nand the agent needs to adapt its behaviour accordingly.\\n3.3\\nTASK DESCRIPTION AND DATA COLLECTION\\nWe simulate all tasks (T1-T5) using the Mujoco physics engine (Todorov et al. (2012)). The simula-\\ntion environment consists of a 7DoF Franka Emika Panda robot and various objects. For T1-T4, the\\nrobot is equipped with a cylindrical end effector to perform object manipulations. The corresponding\\ndemonstrations are recorded by using an Xbox game-pad which sends commands to an inverse kine-\\nmatics (IK) controller. In T5, the robot has a parallel gripper and uses an augmented reality setup\\nfor controlling the end effector (Jiang et al., 2024), allowing for more dexterous manipulations.\\nAvoiding (T1). The Avoiding task requires the robot to reach the green\\nfinish line from a fixed initial position without colliding with one of\\nthe six obstacles. The task does not require object manipulation and\\nis designed to test a model\\u2019s ability to capture diversity. There are\\n24 different ways of successfully completing the task and thus |B| =\\n24. The dataset contains 96 demonstrations in total, comprising 24\\nsolutions with 4 trajectories for each solution.\\nAligning (T2). The Aligning task requires the robot to push a hollow\\nbox to a predefined target position and orientation. The task can be\\ncompleted by either pushing the box from outside or inside and thus\\n|B| = 2. It requires less diversity than T1 but involves complex object\\nmanipulation. The dataset contains 1k demonstrations, 500 for each\\nbehavior with uniformly sampled initial states.\\n4\\nPublished as a conference paper at ICLR 2024\\nPushing (T3). This task requires the robot to push two blocks to fixed\\ntarget zones. Having two blocks and two target zones results in |B| = 4\\nbehaviors. The task has more diversity than T2 and involves complex\\nobject manipulations. Additionally, the task has high variation in tra-\\njectory length caused by multiple human demonstrators with different\\nexperience levels. The dataset contains 2k demonstrations, 500 for each\\nbehavior with uniformly sampled initial block positions.\\nSorting-X (T4). This task requires the robot to sort red and blue blocks\\nto their color-matching target box. The \\u2018X\\u2019 refers to the number of\\nblocks. In this work, we test three difficulty levels, i.e., X \\u2208{2, 4, 6}.\\nThe number of behaviors |B| is determined by the sorting order. For\\nX = 6, the task has many objects, is highly diverse (|B| = 20), re-\\nquires complex manipulations, has high variation in trajectory length,\\nand is thus more challenging than T1-T3. The dataset contains 1.6k\\ndemonstrations for X = 6 and an approximately equal number of tra-\\njectories for each sorting order.\\nStacking-X (T5). This task requires the robot to stack blocks with\\ndifferent colors in a (yellow) target zone. The number of behaviors |B|\\nis given by the stacking order. Having three different blocks results\\nin six different combinations for stacking the blocks and hence |B| =\\n6. This task additionally requires dexterous manipulations since the\\nblue box has the be stacked upright and is thus considered to be the\\nmost challenging out of all five tasks. Here, \\u2018X\\u2019 does not refer to the\\ndifficulty but rather to the evaluation protocol: For Stacking-X with\\nX \\u2208{1, 2, 3} we compute the performance metrics of the models that\\nare capable of stacking X blocks. The \\u22481k trajectories were recorded\\nusing augmented reality (AR) such that each stacking order is equally\\noften present.\\n4\"}\n{\"section_content\":\"Training Set The training corpora consist of $10{\\\\bf K}+$ hours of paired audio-text data, sampled from both public and in-house datasets. This data regime is representative of a variety of ASR systems used for various speech applications, with a mix of accents, speakers, sampling rates, and background noise. Less than $5\\\\%$ of the data are synthetic audios generated using AWS Polly Text-to-Speech (TTS) 2 neural backend.\\nEvaluation Set We evaluate the proposed MATE approach on both synthetic and real datasets from various domains: MTDialogue (movie-twitter), LibriSpeech (LS) (Panayotov et al., 2015) and VoxPopuli (Wang et al., 2021) are in-domain sets, as the training set includes their corresponding train data splits. Wall Street Journal (WSJ) (Garofolo et al., 1993), ConvAI (in-house), SLURP (Bastianelli et al., 2020) datasets are out-of-domain (OOD) datasets for zero-shot evaluation.\\nMTDialogue (movie-twitter) is based on a public lexical dialogue corpus 3 which consists of movie subtitles and twitter user interactions. The audios are generated from TTS system. MTDialogue dataset is a seen dataset for open-book evaluation; i.e., all its data samples are covered in training data. An subset of 1.2 hour is sampled for evaluation. LibriSpeech(LS) (Panayotov et al., 2015) is a read English speech corpus based on LibriVox audiobooks. We consider the two offcial evaluation sets: test-clean and test-other, each with 5.0 hours of test audios. VoxPopuli (Wang et al., 2021) consists of public political speech, sampled from 2009-2020 European Parliament event recordings. For our evaluation purpose, we utilize a 5-hour subset of VoxPopuli English data.\\n\\nWe also evaluate MATE on OOD evaluation sets: ConvAI, WSJ, and SLURP. The Wall Street Journal (WSJ) (Garofolo et al., 1993) corpus contains conventional and spontaneous dictation by journalists. The test_eval93 split of 0.4 hour is selected for our evaluation. ConvAI is based on in-house user utterances of a task-oriented conversational AI system. The typical usage scenarios include booking fights, ordering food and querying health insurance information, etc. The 2.0 hours of audios are generated from TTS system. SLURP (Bastianelli et al., 2020) is a public dataset for smart home virtual assistant development. Top usage scenarios include checking calendar, playing music, and asking about time, etc. We utilized the $10\\\\,\\\\mathrm{hr}$ test set for evaluation.\\nEthical Considerations: We have reviewed all licenses of public datasets, which allow the usage for research and paper publication. The in-house dataset ConvAI is internally approved for research purposes. All datasets are sets are de-identifed to ensure anonymity. We also make sure the datasets cover various English accents, speakers and backgrounds.\"}\n{\"section_content\":\"We validate our methods on 10 datasets over 4 tasks, including quadruplet tasks, ASQP and ACOS, and triplet tasks, ASTE and TASD. For a fair comparison, we apply the same data splits as previous works. The targets of each task are shown in Table 1 and the detailed statistics are in Appendix A.\\nFor the ASQP task, we adopt two datasets in the restaurant domain based on SemEval tasks (Pontiki et al., 2015, 2016), Rest15 and Rest16 aligned and completed by Zhang et al. (2021a) subsequently. For the ACOS task, we apply Restaurant-ACOS and Laptop-ACOS constructed by Cai et al. (2021). Compared with ASQP, datasets of ACOS focus on implicit aspects and opinions, which helps to measure our methods comprehensively. For the triple tasks, we adopt datasets provided by Xu et al. (2020) and Wan et al. (2020) for ASTE (Peng et al., 2020) and TASD, respectively.\"}\n{\"section_content\":\"Table 9 shows the data statistics of all datasets of the ASQP, ACOS, ASTE and TASD task. For fair comparison, we keep the same train\\/dev\\/test division as previous works.\"}\n{\"section_content\":\"Table 7 shows the statistics of the three public benchmark datasets, including ACE05-E, ACE05- $\\\\mathrm{E+}$ and ERE-EN.\"}\n{\"section_content\":\"We construct a parallel dataset for Classical Chinese and Kanbun. The dataset consists of original ancient Chinese texts, Japanese reading orders, and Kanbun texts. We show examples in Table 1.\\nAlthough it is crucial to choose texts that cover as many periods as possible since vocabulary and grammar change with time, it is diffcult to construct a comprehensive dataset. To our knowledge, Tangshixuan8 (Selection of Tang Poems) is the largest resource containing both original ancient Chinese texts and translated Kanbun texts. We use this resource to make our dataset. For preprocessing, we extract the Japanese reading order from Kanbun by a rule-based program. For the special tokens that may not appear in Kanbun or appear multiple times, we annotated them manually. We also convert the characters from old character forms to new character forms (kind of like transforming Traditional Chinese to Simplifed Chinese, but in Japanese character forms) using dictionaries to mitigate the out-of-vocabulary problem.\\nTangshixuan contains a total of 465 poems. We split the dataset using group shuffe split to ensure that all sentences in one poem would not be split. Table 2 lists the statistics of the dataset.\\nBased on the dataset, we introduce two tasks, character reordering and machine translation, both of which are signifcant in Kanbun comprehension. For character reordering, the goal is to transform Classical Chinese texts into Japanese reading orders, from SVO to SOV. Japanese reading orders as\\nTable 1: Examples of our dataset. Each instance has a triple of the original ancient Chinese text, the Japanese reading order (the numbers represent their index in the original text), and the translated Kanbun text.\\nshown in Table 1, such as \\u201c12543\\u201d, are the targets to be predicted. Machine translation is a sequenceto-sequence task that translates Classical Chinese texts into Kanbun. Since the source and target sentences share the vocabulary, it can also be considered as a multilingual rewriting task.\\nWe split each sentence into characters and preprocess them into inputs by the form {character}{the character\\u2019s index in the sentence}[SEP]{sentence}. The character\\u2019s index is added to handle the cases where more than two identical characters appear in one sentence. To make gold labels for training, we normalize the ranks by the lengths of the sentences, making the value of ranks range from 0 to 1 (for a sentence of length 5, the ranks will be normalized from 1, 2, ..., 5 to 0.2, 0.4, ..., 1). Once we collect the output ranks, we sort them in ascending order and restore them to the original characters. Then we obtain a reordered sentence. An illustration of our sorting method is shown in (A) of Figure 2.\"}\n{\"section_content\":\"Details of Dataset\\nTo train the visual text generation model, we constructed a dataset called TG-2M, which contains rich\\ntextual data. The images in this dataset are sourced from existing open-source datasets, including\\nMARIO-10M [5], Wukong [8], ArT [6], LSVT [27], MLT [16], ReCTS [37], TextSeg [31]. Following\\nAnyText [28], we filter the images with some rules, which can devided into three steps. Specifically,\\nthe filtering rules of the first step include:\\n\\u2022 The images of width smaller than 256 will be filtered out.\\n\\u2022 The images with aspect ratio larger than 2.0 or smaller than 0.5 will be filtered out.\\nAfter step 1, we use PP-OCR5 to detect and recognize the texts in these images. Then, we undergo\\nthe second filtering step:\\n\\u2022 The images with more than 10 texts will be filtered out.\\n\\u2022 The images with more than 3 small texts will be filtered out. The small text refers to\\nhorizontal text with a height of less than 30 pixels or vertical text with a width of less than\\n30 pixels. The orientation of the text is determined by the aspect ratio of the text bounding\\nbox, with an aspect ratio less than 0.5 considered vertical text.\\n\\u2022 Images containing more than 3 text instances with recognition scores below 0.7 will be\\nfiltered out.\\nWe use BLIP-2 [12] and Qwen-VL [1] to recaption the images. First, we generate initial captions\\nusing BLIP-2. Because some initial captions are low-quality, we then modify these captions using\\nQwen-VL. The low-quality captions are defined as those containing meaningless text or having low\\nCLIP similarity with the reference image. This process is necessary because some captions generated\\nby BLIP-2 are meaningless, as shown in Fig. 10. Additionally, although Qwen-VL\\u2019s captions are of\\nhigh quality, many of them are quite lengthy, which can affect the understanding of the CLIP text\\nencoder in the diffusion model.\\nBLIP-2 Caption: carouselell - carouselell - carouselell - carouselell - carouselell -\\ncarouselell - carouselell - carouselell \\u2013\\nQwen-VL Caption: An animated welcome message displayed by the website carousell.com. \\nIt features several icons arranged around a central circle which contains the text \\u201cCarousell\\u201d.\\nBLIP-2 Caption: car cover for car, car cover for car, car cover for car, car cover for car, car \\ncover for car.\\nQwen-VL Caption: Free shipping! Car Cover Sun UV Snow Dust Rain Resistant \\nProtection Covers M L XL XXL size(China (Mainland))\\nBLIP-2 Caption: barahan - fire breathers\\nQwen-VL Caption: The album artwork of Sarah Burtons' debut release 'Firebreatherers'.\\nBLIP-2 Caption: i pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi\\npi pi pi\\nQwen-VL Caption: Two speech bubbles say be rational and get real.\\nFigure 10: Comparison of captions by BLIP-2 and Qwen-VL.\\nExamples from our TG-2M dataset are shown in Fig.11, illustrating the variety of image styles. The\\ndataset statistics are summarized in Tab.3. TG-2M contains a total of 2.53 million images with 9.54\\n5https:\\/\\/github.com\\/PaddlePaddle\\/PaddleOCR\\n13\\nTable 3: The statistics of our proposed TG-2M dataset.\\nimage count\\nline count\\nmean chars\\/line\\n#line < 20 chars\\nEnglish\\n1.3M\\n5.59M\\n4.23\\n5.50M, 98.4%\\nChinese\\n1.23M\\n3.95M\\n5.68\\n3.83M, 97.0%\\nTotal\\n2.53M\\n9.54M\\n4.83\\n9.33M, 97.8%\\nFigure 11: Some cases in our proposed TG-2M dataset.\\nmillion text lines. On average, each text line contains 4.83 characters. Notably, 97.8% of the text\\nlines have fewer than 20 characters, which facilitates effective training of our model.\\nB\"}\n{\"section_content\":\"The detailed statistics are shown in Table 1.\\nFingerspelling LibriSpeech To extract semantic units from the fngerspelling signs, we trained the visual CPC encoder on a sentence-level fngerspelling dataset constructed from the 960-hour LibriSpeech dataset and the Unvoiced dataset (Nagaraj, 2018). To construct the dataset, we replace each letter in the LibriSpeech transcript with an image of that letter\\u2019s ASL Alphabet symbol chosen uniformly at random from Unvoiced. To study the effect of visual variability on SSR-U, we subset the ASL Alphabet images to 100, 300, 500, or 1000 images per letter sign. The dev-clean subset of LibriSpeech is used as the validation set.\\nFingerspelling LJSpeech We train our characterlevel model on another sentence-level fngerspelling dataset constructed from LJSpeech (Ito and Johnson, 2017) and the ASL Alphabet dataset similar to the fngerspelling LibriSpeech.\\nASL LibriSpeech For the word-level SSR-U, we construct another corpus using LibriSpeech for speech and MSASL (Joze and Koller, 2019) for word-level sign videos. Since many MSASL videos no longer exist on YouTube, only $11.6\\\\mathbf{k}$ out of $25\\\\mathrm{k}$ videos are downloaded. Further, due to the mismatch in vocabulary size, we use forced alignment information to flter out LibriSpeech words that don\\u2019t appear in MSASL and keep sentences that are at least 5 words long. Next, for each word in each sentence, we pick a word-level sign video uniformly at random from MSASL. To study the effect of vocabulary size on our model, we follow the split provided by (Joze and Koller, 2019) to subset the data to a vocabulary size of 100, 200, 500 or 1000.\"}\n\n... # only display 8 rows in JSON format, more are truncated due to length constraint based on max_tokens (5000)"}
{"role": "assistant", "content": "[Thought]: The retrieved sections still do not provide the specific information about the sub-splits of the OC20 dataset. I will perform a more targeted similarity search using the `text_sentence_transformers_all_minilm_l6_v2` collection to find the relevant context.\n[Action]:\nClassicRetrieve(query='OC20 dataset validation and test set sub-splits', limit=5, collection_name='text_sentence_transformers_all_minilm_l6_v2')"}
{"role": "user", "content": "[Observation]: [Error]: Failed to parse the parameters for action ClassicRetrieve from the response. ClassicRetrieve.__init__() got an unexpected keyword argument 'collection_name'."}
{"role": "assistant", "content": "[Thought]: It seems that the `collection_name` parameter is not supported in the `ClassicRetrieve` action. I will try the similarity search without specifying the collection name and see if I can find the relevant context.\n[Action]:\nClassicRetrieve(query='OC20 dataset validation and test set sub-splits', limit=5)"}
{"role": "user", "content": "[Observation]:\n{\"score\":0.7085,\"pdf_id\":\"6d91f7ae-5206-5b7d-8782-d9926307f15f\",\"page_number\":6,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"847a7bca-838d-5b13-8cb7-5899b9b8b31f\",\"text\":\"following the approach of Raffel et al. (2020). Since the original test sets are not publicly available,\\nwe adopt the data split strategy from Zhang et al. (2020). For smaller datasets (RTE, MRPC, STS-B,\\nCoLA) with fewer than 10K samples, we split the original validation set equally into validation and\\ntest sets. For larger datasets, we create a validation set by reserving 1K samples from the training\\ndata and use the original validation set for testing.\\nBaselines:\"}\n{\"score\":0.6942,\"pdf_id\":\"b0db48ce-526c-56c0-a425-d2be285a11fa\",\"page_number\":10,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"e813e7ba-7c9b-589d-9292-c2cef66dfd9b\",\"text\":\"to construct the train\\/dev\\/test splits as follows: (a)\\nfor datasets with fewer than 10k samples (RTE,\\nMRPC), we divide the original validation set in\\nhalf, using one half for validation and the other for\\ntesting. (b) for larger datasets (MNLI), we split 2k\\nsamples from the training set as the development\\nset, and use the original development set as the test\\nset. The detailed dataset statistics are presented in\\nTable 4.\\nC\\nAppendix for experimental settings\\nWe add a classification layer after each interme-\"}\n{\"score\":0.6611,\"pdf_id\":\"e480bb47-4b96-5155-9c24-ad8c845774b4\",\"page_number\":11,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"13296edf-f80e-541f-ac1b-dad0fcce34f5\",\"text\":\"the following sources: Food-101 from https:\\/\\/visiir.isir.upmc.fr, N24News from https:\\n\\/\\/github.com\\/billywzh717\\/N24News, and BRCA and ROSMAP from https:\\/\\/github.com\\/\\ntxWang\\/MOGONET.\\nTo ensure a fair comparison with previous works, we adopt the default split method detailed in Table\\n4. As the Food-101 dataset does not include a validation set, we partition 5,000 samples from the\\ntraining set to create one, which is conistent with other baselines.\\nDataset\\nModalities\\nModality Types\\nTrain\\nValidation\\nTest\"}\n{\"score\":0.6541,\"pdf_id\":\"3cca9875-edd7-5fa9-b8c1-b70e146475ff\",\"page_number\":16,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"e86aaa79-81a1-5687-985b-52e69e0ecc75\",\"text\":\"data partitioning strategy. We divide the data into training, validation, and test sets with ratios of\\n0.75, 0.15, and 0.15, respectively. This split ensures a substantial portion of data for training while\\nallocating sufficient samples for validation and testing. In cases where the datasets for downstream\\ntasks does not come with predefined train-validation-test splits, we implement a robust splitting\\nstrategy. We randomly divide the data into training, validation, and test sets, maintaining consistent\"}\n{\"score\":0.6442,\"pdf_id\":\"9b06b24b-0afc-5ccb-95fc-c662395d291d\",\"page_number\":15,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"eccdf438-ffda-5d8f-bf9c-0605f49f9ad7\",\"text\":\"the training split as the validation set and the re-\\nmaining 90% for training. We split the datasets\\nwith the datasets library (Lhoest et al., 2021) us-\\ning seed 42 and shuffle the samples. Then, the\\noriginal validation split is taken as the test set on\\nwhich we report the performance of all models. For\\nHumSet, we use the original train\\/validation\\/test\\nsplits, as all of them are publicly available, includ-\\ning labels. Details about the train\\/validation\\/test\\nsplits can be found in Table 5.\"}\n\nIn total, 5 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved results still do not provide the specific sub-splits of the OC20 dataset. I will try a more targeted SQL query to extract the relevant section content, focusing on the sections related to the OC20 dataset.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_content FROM sections WHERE ref_paper_id = '82e60cf1-0b61-51c8-899f-490b9462eb9f' AND section_title LIKE '%OC20%' OR section_title LIKE '%Dataset%' OR section_title LIKE '%Data%' OR section_title LIKE '%Experiment%' OR section_title LIKE '%Evaluation%';\")"}
{"role": "user", "content": "[Observation]:\n{\"section_content\":\"DATASETS WITH DIVERSE DEMONSTRATIONS FOR IMITATION LEARNING\\nIn this section, we present a novel suite of tasks known as D3IL - Datasets with Diverse Demon-\\nstrations for Imitation Learning. We first introduce metrics for the quantification of diverse behavior\\n(refer to Section 3.1). Subsequently, we delve into the design principles underlying our tasks, which\\nare subsequently introduced at the end of this section.\\n3.1\\nQUANTIFYING DIVERSE BEHAVIOR\\nLet D = {(an, sn)}N\\nn=1 be a human-recorded demonstration dataset with actions a \\u2208A and states\\ns \\u2208S. Further, let p(a|s) be the underlying state-conditional action distribution. The goal of\\nimitation learning is to learn a policy \\u03c0(a|s) \\u2248p(a|s). Diversity is characterized by a multimodal\\naction distribution p(a|s), meaning that there are multiple distinct actions that are likely for a given\\nstate s. We refer to this as multimodality on a state-level. However, this multimodality is hard to\\nquantify in most scenarios as we do not have access to p(a|s). Instead, we look at the multimodality\\non a behavior-level to define an auxiliary metric that reflects if a model is capable of imitating diverse\\nbehaviors. To define behavior-level multi-modality, we introduce discrete behavior descriptors \\u03b2 \\u2208\\nB, for example, which box has been chosen to be pushed first. The space B of behavior descriptors\\nare thus task-specific and are discussed in Section 3.3.\\nTo evaluate the ability of a trained policy \\u03c0(a|s) to capture multi-modality, we collected data such\\nthat we have an approximately equal number of demonstrations for each behavior descriptor \\u03b2 \\u2208B.\\nThereafter, we perform simulations in the task environment to compute the agents\\u2019 distribution \\u03c0(\\u03b2)\\nover its achieved behaviors. We then assess the policy\\u2019s capability of learning diverse behavior by\\nleveraging the behavior entropy, that is,\\nH\\n\\u0000\\u03c0(\\u03b2)\\n\\u0001\\n= \\u2212\\nX\\n\\u03b2\\u2208B\\n\\u03c0(\\u03b2) log|B| \\u03c0(\\u03b2).\\n(1)\\nPlease note that we employ the logarithm with a base of |B| to ensure that H\\n\\u0000\\u03c0(\\u03b2)\\n\\u0001\\n\\u2208[0, 1].\\nThis choice of base facilitates a straightforward interpretation of the metric: An entropy value of 0\\nsignifies a policy that consistently executes the same behavior, while an entropy value of 1 represents\\na diverse policy that executes all behaviors with equal probability, that is, \\u03c0(\\u03b2) \\u22481\\/|B| and hence\\nmatches the true behavior distribution by the design of the data collection process. Yet, a high\\nbehavior entropy can also be achieved by following different behaviors in different initial states in a\\ndeterministic manner, and hence, this behavior entropy can be a poor metric for behavior diversity.\\nHence, we evaluate the expected entropy of the behavior conditioned on the initial state s0. If, for\\nthe same initial state, all behaviors can be achieved, the conditional behavior entropy is high, while\\n3\\nPublished as a conference paper at ICLR 2024\\nif for the same initial state always the same behavior is executed, this entropy is 0. We define the\\nconditional behavior entropy as\\nEs0\\u223cp(s0)\\n\\u0002\\nH\\n\\u0000\\u03c0(\\u03b2|s0)\\n\\u0001\\u0003\\n\\u2248\\u22121\\nS0\\nX\\ns0\\u223cp(s0)\\nX\\n\\u03b2\\u2208B\\n\\u03c0(\\u03b2|s0) log|B| \\u03c0(\\u03b2|s0),\\n(2)\\nwhere the expectation is approximated using a Monte Carlo estimate. Here, S0 denotes the number\\nof samples from the initial state distribution p(s0).\\n3.2\\nTASK DESIGN PRINCIPLES\\nWe build D3IL based on the following key principles: i) Diverse Behavior. Diversity is the central\\naspect of our task design. We intentionally design our tasks to encompass multiple viable approaches\\nto successful task completion. To quantify the behavior diversity, we explicitly specify these dis-\\ntinct behaviors, each representing a legitimate solution. ii.) Multiple Human Demonstrators. To\\nreflect the natural variability in human behavior and to obtain a richer dataset, we have collected\\ndemonstration data from multiple human demonstrators. This diversity in data sources introduces\\nvariations in the quality and style of demonstrations. iii.) Variable Trajectory Lengths. Our tasks\\nincorporate variable trajectory lengths, replicating real-world scenarios where demonstrations may\\ndiffer in duration. This design choice challenges our learning agents to handle non-uniform data se-\\nquences effectively. By accommodating varying trajectory lengths, our approach must learn to adapt\\nand generalize to different time horizons, a critical property for real-world applications. iv.) Task\\nVariations and Closed-Loop Feedback. For most tasks, agents need to rely on sensory feedback\\nto achieve a good performance which considerably increases the complexity of the learning task\\nin comparison to learning open-loop trajectories. We achieve this by introducing task variations in\\nevery execution. For example, in every execution, the initial position of the objects will be different\\nand the agent needs to adapt its behaviour accordingly.\\n3.3\\nTASK DESCRIPTION AND DATA COLLECTION\\nWe simulate all tasks (T1-T5) using the Mujoco physics engine (Todorov et al. (2012)). The simula-\\ntion environment consists of a 7DoF Franka Emika Panda robot and various objects. For T1-T4, the\\nrobot is equipped with a cylindrical end effector to perform object manipulations. The corresponding\\ndemonstrations are recorded by using an Xbox game-pad which sends commands to an inverse kine-\\nmatics (IK) controller. In T5, the robot has a parallel gripper and uses an augmented reality setup\\nfor controlling the end effector (Jiang et al., 2024), allowing for more dexterous manipulations.\\nAvoiding (T1). The Avoiding task requires the robot to reach the green\\nfinish line from a fixed initial position without colliding with one of\\nthe six obstacles. The task does not require object manipulation and\\nis designed to test a model\\u2019s ability to capture diversity. There are\\n24 different ways of successfully completing the task and thus |B| =\\n24. The dataset contains 96 demonstrations in total, comprising 24\\nsolutions with 4 trajectories for each solution.\\nAligning (T2). The Aligning task requires the robot to push a hollow\\nbox to a predefined target position and orientation. The task can be\\ncompleted by either pushing the box from outside or inside and thus\\n|B| = 2. It requires less diversity than T1 but involves complex object\\nmanipulation. The dataset contains 1k demonstrations, 500 for each\\nbehavior with uniformly sampled initial states.\\n4\\nPublished as a conference paper at ICLR 2024\\nPushing (T3). This task requires the robot to push two blocks to fixed\\ntarget zones. Having two blocks and two target zones results in |B| = 4\\nbehaviors. The task has more diversity than T2 and involves complex\\nobject manipulations. Additionally, the task has high variation in tra-\\njectory length caused by multiple human demonstrators with different\\nexperience levels. The dataset contains 2k demonstrations, 500 for each\\nbehavior with uniformly sampled initial block positions.\\nSorting-X (T4). This task requires the robot to sort red and blue blocks\\nto their color-matching target box. The \\u2018X\\u2019 refers to the number of\\nblocks. In this work, we test three difficulty levels, i.e., X \\u2208{2, 4, 6}.\\nThe number of behaviors |B| is determined by the sorting order. For\\nX = 6, the task has many objects, is highly diverse (|B| = 20), re-\\nquires complex manipulations, has high variation in trajectory length,\\nand is thus more challenging than T1-T3. The dataset contains 1.6k\\ndemonstrations for X = 6 and an approximately equal number of tra-\\njectories for each sorting order.\\nStacking-X (T5). This task requires the robot to stack blocks with\\ndifferent colors in a (yellow) target zone. The number of behaviors |B|\\nis given by the stacking order. Having three different blocks results\\nin six different combinations for stacking the blocks and hence |B| =\\n6. This task additionally requires dexterous manipulations since the\\nblue box has the be stacked upright and is thus considered to be the\\nmost challenging out of all five tasks. Here, \\u2018X\\u2019 does not refer to the\\ndifficulty but rather to the evaluation protocol: For Stacking-X with\\nX \\u2208{1, 2, 3} we compute the performance metrics of the models that\\nare capable of stacking X blocks. The \\u22481k trajectories were recorded\\nusing augmented reality (AR) such that each stacking order is equally\\noften present.\\n4\"}\n{\"section_content\":\"Training Set The training corpora consist of $10{\\\\bf K}+$ hours of paired audio-text data, sampled from both public and in-house datasets. This data regime is representative of a variety of ASR systems used for various speech applications, with a mix of accents, speakers, sampling rates, and background noise. Less than $5\\\\%$ of the data are synthetic audios generated using AWS Polly Text-to-Speech (TTS) 2 neural backend.\\nEvaluation Set We evaluate the proposed MATE approach on both synthetic and real datasets from various domains: MTDialogue (movie-twitter), LibriSpeech (LS) (Panayotov et al., 2015) and VoxPopuli (Wang et al., 2021) are in-domain sets, as the training set includes their corresponding train data splits. Wall Street Journal (WSJ) (Garofolo et al., 1993), ConvAI (in-house), SLURP (Bastianelli et al., 2020) datasets are out-of-domain (OOD) datasets for zero-shot evaluation.\\nMTDialogue (movie-twitter) is based on a public lexical dialogue corpus 3 which consists of movie subtitles and twitter user interactions. The audios are generated from TTS system. MTDialogue dataset is a seen dataset for open-book evaluation; i.e., all its data samples are covered in training data. An subset of 1.2 hour is sampled for evaluation. LibriSpeech(LS) (Panayotov et al., 2015) is a read English speech corpus based on LibriVox audiobooks. We consider the two offcial evaluation sets: test-clean and test-other, each with 5.0 hours of test audios. VoxPopuli (Wang et al., 2021) consists of public political speech, sampled from 2009-2020 European Parliament event recordings. For our evaluation purpose, we utilize a 5-hour subset of VoxPopuli English data.\\n\\nWe also evaluate MATE on OOD evaluation sets: ConvAI, WSJ, and SLURP. The Wall Street Journal (WSJ) (Garofolo et al., 1993) corpus contains conventional and spontaneous dictation by journalists. The test_eval93 split of 0.4 hour is selected for our evaluation. ConvAI is based on in-house user utterances of a task-oriented conversational AI system. The typical usage scenarios include booking fights, ordering food and querying health insurance information, etc. The 2.0 hours of audios are generated from TTS system. SLURP (Bastianelli et al., 2020) is a public dataset for smart home virtual assistant development. Top usage scenarios include checking calendar, playing music, and asking about time, etc. We utilized the $10\\\\,\\\\mathrm{hr}$ test set for evaluation.\\nEthical Considerations: We have reviewed all licenses of public datasets, which allow the usage for research and paper publication. The in-house dataset ConvAI is internally approved for research purposes. All datasets are sets are de-identifed to ensure anonymity. We also make sure the datasets cover various English accents, speakers and backgrounds.\"}\n{\"section_content\":\"We validate our methods on 10 datasets over 4 tasks, including quadruplet tasks, ASQP and ACOS, and triplet tasks, ASTE and TASD. For a fair comparison, we apply the same data splits as previous works. The targets of each task are shown in Table 1 and the detailed statistics are in Appendix A.\\nFor the ASQP task, we adopt two datasets in the restaurant domain based on SemEval tasks (Pontiki et al., 2015, 2016), Rest15 and Rest16 aligned and completed by Zhang et al. (2021a) subsequently. For the ACOS task, we apply Restaurant-ACOS and Laptop-ACOS constructed by Cai et al. (2021). Compared with ASQP, datasets of ACOS focus on implicit aspects and opinions, which helps to measure our methods comprehensively. For the triple tasks, we adopt datasets provided by Xu et al. (2020) and Wan et al. (2020) for ASTE (Peng et al., 2020) and TASD, respectively.\"}\n{\"section_content\":\"Table 7 shows the statistics of the three public benchmark datasets, including ACE05-E, ACE05- $\\\\mathrm{E+}$ and ERE-EN.\"}\n{\"section_content\":\"We construct a parallel dataset for Classical Chinese and Kanbun. The dataset consists of original ancient Chinese texts, Japanese reading orders, and Kanbun texts. We show examples in Table 1.\\nAlthough it is crucial to choose texts that cover as many periods as possible since vocabulary and grammar change with time, it is diffcult to construct a comprehensive dataset. To our knowledge, Tangshixuan8 (Selection of Tang Poems) is the largest resource containing both original ancient Chinese texts and translated Kanbun texts. We use this resource to make our dataset. For preprocessing, we extract the Japanese reading order from Kanbun by a rule-based program. For the special tokens that may not appear in Kanbun or appear multiple times, we annotated them manually. We also convert the characters from old character forms to new character forms (kind of like transforming Traditional Chinese to Simplifed Chinese, but in Japanese character forms) using dictionaries to mitigate the out-of-vocabulary problem.\\nTangshixuan contains a total of 465 poems. We split the dataset using group shuffe split to ensure that all sentences in one poem would not be split. Table 2 lists the statistics of the dataset.\\nBased on the dataset, we introduce two tasks, character reordering and machine translation, both of which are signifcant in Kanbun comprehension. For character reordering, the goal is to transform Classical Chinese texts into Japanese reading orders, from SVO to SOV. Japanese reading orders as\\nTable 1: Examples of our dataset. Each instance has a triple of the original ancient Chinese text, the Japanese reading order (the numbers represent their index in the original text), and the translated Kanbun text.\\nshown in Table 1, such as \\u201c12543\\u201d, are the targets to be predicted. Machine translation is a sequenceto-sequence task that translates Classical Chinese texts into Kanbun. Since the source and target sentences share the vocabulary, it can also be considered as a multilingual rewriting task.\\nWe split each sentence into characters and preprocess them into inputs by the form {character}{the character\\u2019s index in the sentence}[SEP]{sentence}. The character\\u2019s index is added to handle the cases where more than two identical characters appear in one sentence. To make gold labels for training, we normalize the ranks by the lengths of the sentences, making the value of ranks range from 0 to 1 (for a sentence of length 5, the ranks will be normalized from 1, 2, ..., 5 to 0.2, 0.4, ..., 1). Once we collect the output ranks, we sort them in ascending order and restore them to the original characters. Then we obtain a reordered sentence. An illustration of our sorting method is shown in (A) of Figure 2.\"}\n{\"section_content\":\"Details of Dataset\\nTo train the visual text generation model, we constructed a dataset called TG-2M, which contains rich\\ntextual data. The images in this dataset are sourced from existing open-source datasets, including\\nMARIO-10M [5], Wukong [8], ArT [6], LSVT [27], MLT [16], ReCTS [37], TextSeg [31]. Following\\nAnyText [28], we filter the images with some rules, which can devided into three steps. Specifically,\\nthe filtering rules of the first step include:\\n\\u2022 The images of width smaller than 256 will be filtered out.\\n\\u2022 The images with aspect ratio larger than 2.0 or smaller than 0.5 will be filtered out.\\nAfter step 1, we use PP-OCR5 to detect and recognize the texts in these images. Then, we undergo\\nthe second filtering step:\\n\\u2022 The images with more than 10 texts will be filtered out.\\n\\u2022 The images with more than 3 small texts will be filtered out. The small text refers to\\nhorizontal text with a height of less than 30 pixels or vertical text with a width of less than\\n30 pixels. The orientation of the text is determined by the aspect ratio of the text bounding\\nbox, with an aspect ratio less than 0.5 considered vertical text.\\n\\u2022 Images containing more than 3 text instances with recognition scores below 0.7 will be\\nfiltered out.\\nWe use BLIP-2 [12] and Qwen-VL [1] to recaption the images. First, we generate initial captions\\nusing BLIP-2. Because some initial captions are low-quality, we then modify these captions using\\nQwen-VL. The low-quality captions are defined as those containing meaningless text or having low\\nCLIP similarity with the reference image. This process is necessary because some captions generated\\nby BLIP-2 are meaningless, as shown in Fig. 10. Additionally, although Qwen-VL\\u2019s captions are of\\nhigh quality, many of them are quite lengthy, which can affect the understanding of the CLIP text\\nencoder in the diffusion model.\\nBLIP-2 Caption: carouselell - carouselell - carouselell - carouselell - carouselell -\\ncarouselell - carouselell - carouselell \\u2013\\nQwen-VL Caption: An animated welcome message displayed by the website carousell.com. \\nIt features several icons arranged around a central circle which contains the text \\u201cCarousell\\u201d.\\nBLIP-2 Caption: car cover for car, car cover for car, car cover for car, car cover for car, car \\ncover for car.\\nQwen-VL Caption: Free shipping! Car Cover Sun UV Snow Dust Rain Resistant \\nProtection Covers M L XL XXL size(China (Mainland))\\nBLIP-2 Caption: barahan - fire breathers\\nQwen-VL Caption: The album artwork of Sarah Burtons' debut release 'Firebreatherers'.\\nBLIP-2 Caption: i pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi\\npi pi pi\\nQwen-VL Caption: Two speech bubbles say be rational and get real.\\nFigure 10: Comparison of captions by BLIP-2 and Qwen-VL.\\nExamples from our TG-2M dataset are shown in Fig.11, illustrating the variety of image styles. The\\ndataset statistics are summarized in Tab.3. TG-2M contains a total of 2.53 million images with 9.54\\n5https:\\/\\/github.com\\/PaddlePaddle\\/PaddleOCR\\n13\\nTable 3: The statistics of our proposed TG-2M dataset.\\nimage count\\nline count\\nmean chars\\/line\\n#line < 20 chars\\nEnglish\\n1.3M\\n5.59M\\n4.23\\n5.50M, 98.4%\\nChinese\\n1.23M\\n3.95M\\n5.68\\n3.83M, 97.0%\\nTotal\\n2.53M\\n9.54M\\n4.83\\n9.33M, 97.8%\\nFigure 11: Some cases in our proposed TG-2M dataset.\\nmillion text lines. On average, each text line contains 4.83 characters. Notably, 97.8% of the text\\nlines have fewer than 20 characters, which facilitates effective training of our model.\\nB\"}\n{\"section_content\":\"The detailed statistics are shown in Table 1.\\nFingerspelling LibriSpeech To extract semantic units from the fngerspelling signs, we trained the visual CPC encoder on a sentence-level fngerspelling dataset constructed from the 960-hour LibriSpeech dataset and the Unvoiced dataset (Nagaraj, 2018). To construct the dataset, we replace each letter in the LibriSpeech transcript with an image of that letter\\u2019s ASL Alphabet symbol chosen uniformly at random from Unvoiced. To study the effect of visual variability on SSR-U, we subset the ASL Alphabet images to 100, 300, 500, or 1000 images per letter sign. The dev-clean subset of LibriSpeech is used as the validation set.\\nFingerspelling LJSpeech We train our characterlevel model on another sentence-level fngerspelling dataset constructed from LJSpeech (Ito and Johnson, 2017) and the ASL Alphabet dataset similar to the fngerspelling LibriSpeech.\\nASL LibriSpeech For the word-level SSR-U, we construct another corpus using LibriSpeech for speech and MSASL (Joze and Koller, 2019) for word-level sign videos. Since many MSASL videos no longer exist on YouTube, only $11.6\\\\mathbf{k}$ out of $25\\\\mathrm{k}$ videos are downloaded. Further, due to the mismatch in vocabulary size, we use forced alignment information to flter out LibriSpeech words that don\\u2019t appear in MSASL and keep sentences that are at least 5 words long. Next, for each word in each sentence, we pick a word-level sign video uniformly at random from MSASL. To study the effect of vocabulary size on our model, we follow the split provided by (Joze and Koller, 2019) to subset the data to a vocabulary size of 100, 200, 500 or 1000.\"}\n\n... # only display 7 rows in JSON format, more are truncated due to length constraint based on max_tokens (5000)"}
{"role": "assistant", "content": "[Thought]: The retrieved sections still do not provide the specific information about the sub-splits of the OC20 dataset. I will perform a more targeted SQL query to extract the relevant section content, focusing on the sections related to the OC20 dataset and the specific sub-splits.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_content FROM sections WHERE ref_paper_id = '82e60cf1-0b61-51c8-899f-490b9462eb9f' AND section_title LIKE '%OC20%' OR section_title LIKE '%Dataset%' OR section_title LIKE '%Data%' OR section_title LIKE '%Experiment%' OR section_title LIKE '%Evaluation%' AND section_content LIKE '%OC20%';\")"}
{"role": "user", "content": "[Observation]:\n{\"section_content\":\"DATASETS WITH DIVERSE DEMONSTRATIONS FOR IMITATION LEARNING\\nIn this section, we present a novel suite of tasks known as D3IL - Datasets with Diverse Demon-\\nstrations for Imitation Learning. We first introduce metrics for the quantification of diverse behavior\\n(refer to Section 3.1). Subsequently, we delve into the design principles underlying our tasks, which\\nare subsequently introduced at the end of this section.\\n3.1\\nQUANTIFYING DIVERSE BEHAVIOR\\nLet D = {(an, sn)}N\\nn=1 be a human-recorded demonstration dataset with actions a \\u2208A and states\\ns \\u2208S. Further, let p(a|s) be the underlying state-conditional action distribution. The goal of\\nimitation learning is to learn a policy \\u03c0(a|s) \\u2248p(a|s). Diversity is characterized by a multimodal\\naction distribution p(a|s), meaning that there are multiple distinct actions that are likely for a given\\nstate s. We refer to this as multimodality on a state-level. However, this multimodality is hard to\\nquantify in most scenarios as we do not have access to p(a|s). Instead, we look at the multimodality\\non a behavior-level to define an auxiliary metric that reflects if a model is capable of imitating diverse\\nbehaviors. To define behavior-level multi-modality, we introduce discrete behavior descriptors \\u03b2 \\u2208\\nB, for example, which box has been chosen to be pushed first. The space B of behavior descriptors\\nare thus task-specific and are discussed in Section 3.3.\\nTo evaluate the ability of a trained policy \\u03c0(a|s) to capture multi-modality, we collected data such\\nthat we have an approximately equal number of demonstrations for each behavior descriptor \\u03b2 \\u2208B.\\nThereafter, we perform simulations in the task environment to compute the agents\\u2019 distribution \\u03c0(\\u03b2)\\nover its achieved behaviors. We then assess the policy\\u2019s capability of learning diverse behavior by\\nleveraging the behavior entropy, that is,\\nH\\n\\u0000\\u03c0(\\u03b2)\\n\\u0001\\n= \\u2212\\nX\\n\\u03b2\\u2208B\\n\\u03c0(\\u03b2) log|B| \\u03c0(\\u03b2).\\n(1)\\nPlease note that we employ the logarithm with a base of |B| to ensure that H\\n\\u0000\\u03c0(\\u03b2)\\n\\u0001\\n\\u2208[0, 1].\\nThis choice of base facilitates a straightforward interpretation of the metric: An entropy value of 0\\nsignifies a policy that consistently executes the same behavior, while an entropy value of 1 represents\\na diverse policy that executes all behaviors with equal probability, that is, \\u03c0(\\u03b2) \\u22481\\/|B| and hence\\nmatches the true behavior distribution by the design of the data collection process. Yet, a high\\nbehavior entropy can also be achieved by following different behaviors in different initial states in a\\ndeterministic manner, and hence, this behavior entropy can be a poor metric for behavior diversity.\\nHence, we evaluate the expected entropy of the behavior conditioned on the initial state s0. If, for\\nthe same initial state, all behaviors can be achieved, the conditional behavior entropy is high, while\\n3\\nPublished as a conference paper at ICLR 2024\\nif for the same initial state always the same behavior is executed, this entropy is 0. We define the\\nconditional behavior entropy as\\nEs0\\u223cp(s0)\\n\\u0002\\nH\\n\\u0000\\u03c0(\\u03b2|s0)\\n\\u0001\\u0003\\n\\u2248\\u22121\\nS0\\nX\\ns0\\u223cp(s0)\\nX\\n\\u03b2\\u2208B\\n\\u03c0(\\u03b2|s0) log|B| \\u03c0(\\u03b2|s0),\\n(2)\\nwhere the expectation is approximated using a Monte Carlo estimate. Here, S0 denotes the number\\nof samples from the initial state distribution p(s0).\\n3.2\\nTASK DESIGN PRINCIPLES\\nWe build D3IL based on the following key principles: i) Diverse Behavior. Diversity is the central\\naspect of our task design. We intentionally design our tasks to encompass multiple viable approaches\\nto successful task completion. To quantify the behavior diversity, we explicitly specify these dis-\\ntinct behaviors, each representing a legitimate solution. ii.) Multiple Human Demonstrators. To\\nreflect the natural variability in human behavior and to obtain a richer dataset, we have collected\\ndemonstration data from multiple human demonstrators. This diversity in data sources introduces\\nvariations in the quality and style of demonstrations. iii.) Variable Trajectory Lengths. Our tasks\\nincorporate variable trajectory lengths, replicating real-world scenarios where demonstrations may\\ndiffer in duration. This design choice challenges our learning agents to handle non-uniform data se-\\nquences effectively. By accommodating varying trajectory lengths, our approach must learn to adapt\\nand generalize to different time horizons, a critical property for real-world applications. iv.) Task\\nVariations and Closed-Loop Feedback. For most tasks, agents need to rely on sensory feedback\\nto achieve a good performance which considerably increases the complexity of the learning task\\nin comparison to learning open-loop trajectories. We achieve this by introducing task variations in\\nevery execution. For example, in every execution, the initial position of the objects will be different\\nand the agent needs to adapt its behaviour accordingly.\\n3.3\\nTASK DESCRIPTION AND DATA COLLECTION\\nWe simulate all tasks (T1-T5) using the Mujoco physics engine (Todorov et al. (2012)). The simula-\\ntion environment consists of a 7DoF Franka Emika Panda robot and various objects. For T1-T4, the\\nrobot is equipped with a cylindrical end effector to perform object manipulations. The corresponding\\ndemonstrations are recorded by using an Xbox game-pad which sends commands to an inverse kine-\\nmatics (IK) controller. In T5, the robot has a parallel gripper and uses an augmented reality setup\\nfor controlling the end effector (Jiang et al., 2024), allowing for more dexterous manipulations.\\nAvoiding (T1). The Avoiding task requires the robot to reach the green\\nfinish line from a fixed initial position without colliding with one of\\nthe six obstacles. The task does not require object manipulation and\\nis designed to test a model\\u2019s ability to capture diversity. There are\\n24 different ways of successfully completing the task and thus |B| =\\n24. The dataset contains 96 demonstrations in total, comprising 24\\nsolutions with 4 trajectories for each solution.\\nAligning (T2). The Aligning task requires the robot to push a hollow\\nbox to a predefined target position and orientation. The task can be\\ncompleted by either pushing the box from outside or inside and thus\\n|B| = 2. It requires less diversity than T1 but involves complex object\\nmanipulation. The dataset contains 1k demonstrations, 500 for each\\nbehavior with uniformly sampled initial states.\\n4\\nPublished as a conference paper at ICLR 2024\\nPushing (T3). This task requires the robot to push two blocks to fixed\\ntarget zones. Having two blocks and two target zones results in |B| = 4\\nbehaviors. The task has more diversity than T2 and involves complex\\nobject manipulations. Additionally, the task has high variation in tra-\\njectory length caused by multiple human demonstrators with different\\nexperience levels. The dataset contains 2k demonstrations, 500 for each\\nbehavior with uniformly sampled initial block positions.\\nSorting-X (T4). This task requires the robot to sort red and blue blocks\\nto their color-matching target box. The \\u2018X\\u2019 refers to the number of\\nblocks. In this work, we test three difficulty levels, i.e., X \\u2208{2, 4, 6}.\\nThe number of behaviors |B| is determined by the sorting order. For\\nX = 6, the task has many objects, is highly diverse (|B| = 20), re-\\nquires complex manipulations, has high variation in trajectory length,\\nand is thus more challenging than T1-T3. The dataset contains 1.6k\\ndemonstrations for X = 6 and an approximately equal number of tra-\\njectories for each sorting order.\\nStacking-X (T5). This task requires the robot to stack blocks with\\ndifferent colors in a (yellow) target zone. The number of behaviors |B|\\nis given by the stacking order. Having three different blocks results\\nin six different combinations for stacking the blocks and hence |B| =\\n6. This task additionally requires dexterous manipulations since the\\nblue box has the be stacked upright and is thus considered to be the\\nmost challenging out of all five tasks. Here, \\u2018X\\u2019 does not refer to the\\ndifficulty but rather to the evaluation protocol: For Stacking-X with\\nX \\u2208{1, 2, 3} we compute the performance metrics of the models that\\nare capable of stacking X blocks. The \\u22481k trajectories were recorded\\nusing augmented reality (AR) such that each stacking order is equally\\noften present.\\n4\"}\n{\"section_content\":\"Training Set The training corpora consist of $10{\\\\bf K}+$ hours of paired audio-text data, sampled from both public and in-house datasets. This data regime is representative of a variety of ASR systems used for various speech applications, with a mix of accents, speakers, sampling rates, and background noise. Less than $5\\\\%$ of the data are synthetic audios generated using AWS Polly Text-to-Speech (TTS) 2 neural backend.\\nEvaluation Set We evaluate the proposed MATE approach on both synthetic and real datasets from various domains: MTDialogue (movie-twitter), LibriSpeech (LS) (Panayotov et al., 2015) and VoxPopuli (Wang et al., 2021) are in-domain sets, as the training set includes their corresponding train data splits. Wall Street Journal (WSJ) (Garofolo et al., 1993), ConvAI (in-house), SLURP (Bastianelli et al., 2020) datasets are out-of-domain (OOD) datasets for zero-shot evaluation.\\nMTDialogue (movie-twitter) is based on a public lexical dialogue corpus 3 which consists of movie subtitles and twitter user interactions. The audios are generated from TTS system. MTDialogue dataset is a seen dataset for open-book evaluation; i.e., all its data samples are covered in training data. An subset of 1.2 hour is sampled for evaluation. LibriSpeech(LS) (Panayotov et al., 2015) is a read English speech corpus based on LibriVox audiobooks. We consider the two offcial evaluation sets: test-clean and test-other, each with 5.0 hours of test audios. VoxPopuli (Wang et al., 2021) consists of public political speech, sampled from 2009-2020 European Parliament event recordings. For our evaluation purpose, we utilize a 5-hour subset of VoxPopuli English data.\\n\\nWe also evaluate MATE on OOD evaluation sets: ConvAI, WSJ, and SLURP. The Wall Street Journal (WSJ) (Garofolo et al., 1993) corpus contains conventional and spontaneous dictation by journalists. The test_eval93 split of 0.4 hour is selected for our evaluation. ConvAI is based on in-house user utterances of a task-oriented conversational AI system. The typical usage scenarios include booking fights, ordering food and querying health insurance information, etc. The 2.0 hours of audios are generated from TTS system. SLURP (Bastianelli et al., 2020) is a public dataset for smart home virtual assistant development. Top usage scenarios include checking calendar, playing music, and asking about time, etc. We utilized the $10\\\\,\\\\mathrm{hr}$ test set for evaluation.\\nEthical Considerations: We have reviewed all licenses of public datasets, which allow the usage for research and paper publication. The in-house dataset ConvAI is internally approved for research purposes. All datasets are sets are de-identifed to ensure anonymity. We also make sure the datasets cover various English accents, speakers and backgrounds.\"}\n{\"section_content\":\"We validate our methods on 10 datasets over 4 tasks, including quadruplet tasks, ASQP and ACOS, and triplet tasks, ASTE and TASD. For a fair comparison, we apply the same data splits as previous works. The targets of each task are shown in Table 1 and the detailed statistics are in Appendix A.\\nFor the ASQP task, we adopt two datasets in the restaurant domain based on SemEval tasks (Pontiki et al., 2015, 2016), Rest15 and Rest16 aligned and completed by Zhang et al. (2021a) subsequently. For the ACOS task, we apply Restaurant-ACOS and Laptop-ACOS constructed by Cai et al. (2021). Compared with ASQP, datasets of ACOS focus on implicit aspects and opinions, which helps to measure our methods comprehensively. For the triple tasks, we adopt datasets provided by Xu et al. (2020) and Wan et al. (2020) for ASTE (Peng et al., 2020) and TASD, respectively.\"}\n{\"section_content\":\"Table 7 shows the statistics of the three public benchmark datasets, including ACE05-E, ACE05- $\\\\mathrm{E+}$ and ERE-EN.\"}\n{\"section_content\":\"We construct a parallel dataset for Classical Chinese and Kanbun. The dataset consists of original ancient Chinese texts, Japanese reading orders, and Kanbun texts. We show examples in Table 1.\\nAlthough it is crucial to choose texts that cover as many periods as possible since vocabulary and grammar change with time, it is diffcult to construct a comprehensive dataset. To our knowledge, Tangshixuan8 (Selection of Tang Poems) is the largest resource containing both original ancient Chinese texts and translated Kanbun texts. We use this resource to make our dataset. For preprocessing, we extract the Japanese reading order from Kanbun by a rule-based program. For the special tokens that may not appear in Kanbun or appear multiple times, we annotated them manually. We also convert the characters from old character forms to new character forms (kind of like transforming Traditional Chinese to Simplifed Chinese, but in Japanese character forms) using dictionaries to mitigate the out-of-vocabulary problem.\\nTangshixuan contains a total of 465 poems. We split the dataset using group shuffe split to ensure that all sentences in one poem would not be split. Table 2 lists the statistics of the dataset.\\nBased on the dataset, we introduce two tasks, character reordering and machine translation, both of which are signifcant in Kanbun comprehension. For character reordering, the goal is to transform Classical Chinese texts into Japanese reading orders, from SVO to SOV. Japanese reading orders as\\nTable 1: Examples of our dataset. Each instance has a triple of the original ancient Chinese text, the Japanese reading order (the numbers represent their index in the original text), and the translated Kanbun text.\\nshown in Table 1, such as \\u201c12543\\u201d, are the targets to be predicted. Machine translation is a sequenceto-sequence task that translates Classical Chinese texts into Kanbun. Since the source and target sentences share the vocabulary, it can also be considered as a multilingual rewriting task.\\nWe split each sentence into characters and preprocess them into inputs by the form {character}{the character\\u2019s index in the sentence}[SEP]{sentence}. The character\\u2019s index is added to handle the cases where more than two identical characters appear in one sentence. To make gold labels for training, we normalize the ranks by the lengths of the sentences, making the value of ranks range from 0 to 1 (for a sentence of length 5, the ranks will be normalized from 1, 2, ..., 5 to 0.2, 0.4, ..., 1). Once we collect the output ranks, we sort them in ascending order and restore them to the original characters. Then we obtain a reordered sentence. An illustration of our sorting method is shown in (A) of Figure 2.\"}\n{\"section_content\":\"Details of Dataset\\nTo train the visual text generation model, we constructed a dataset called TG-2M, which contains rich\\ntextual data. The images in this dataset are sourced from existing open-source datasets, including\\nMARIO-10M [5], Wukong [8], ArT [6], LSVT [27], MLT [16], ReCTS [37], TextSeg [31]. Following\\nAnyText [28], we filter the images with some rules, which can devided into three steps. Specifically,\\nthe filtering rules of the first step include:\\n\\u2022 The images of width smaller than 256 will be filtered out.\\n\\u2022 The images with aspect ratio larger than 2.0 or smaller than 0.5 will be filtered out.\\nAfter step 1, we use PP-OCR5 to detect and recognize the texts in these images. Then, we undergo\\nthe second filtering step:\\n\\u2022 The images with more than 10 texts will be filtered out.\\n\\u2022 The images with more than 3 small texts will be filtered out. The small text refers to\\nhorizontal text with a height of less than 30 pixels or vertical text with a width of less than\\n30 pixels. The orientation of the text is determined by the aspect ratio of the text bounding\\nbox, with an aspect ratio less than 0.5 considered vertical text.\\n\\u2022 Images containing more than 3 text instances with recognition scores below 0.7 will be\\nfiltered out.\\nWe use BLIP-2 [12] and Qwen-VL [1] to recaption the images. First, we generate initial captions\\nusing BLIP-2. Because some initial captions are low-quality, we then modify these captions using\\nQwen-VL. The low-quality captions are defined as those containing meaningless text or having low\\nCLIP similarity with the reference image. This process is necessary because some captions generated\\nby BLIP-2 are meaningless, as shown in Fig. 10. Additionally, although Qwen-VL\\u2019s captions are of\\nhigh quality, many of them are quite lengthy, which can affect the understanding of the CLIP text\\nencoder in the diffusion model.\\nBLIP-2 Caption: carouselell - carouselell - carouselell - carouselell - carouselell -\\ncarouselell - carouselell - carouselell \\u2013\\nQwen-VL Caption: An animated welcome message displayed by the website carousell.com. \\nIt features several icons arranged around a central circle which contains the text \\u201cCarousell\\u201d.\\nBLIP-2 Caption: car cover for car, car cover for car, car cover for car, car cover for car, car \\ncover for car.\\nQwen-VL Caption: Free shipping! Car Cover Sun UV Snow Dust Rain Resistant \\nProtection Covers M L XL XXL size(China (Mainland))\\nBLIP-2 Caption: barahan - fire breathers\\nQwen-VL Caption: The album artwork of Sarah Burtons' debut release 'Firebreatherers'.\\nBLIP-2 Caption: i pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi\\npi pi pi\\nQwen-VL Caption: Two speech bubbles say be rational and get real.\\nFigure 10: Comparison of captions by BLIP-2 and Qwen-VL.\\nExamples from our TG-2M dataset are shown in Fig.11, illustrating the variety of image styles. The\\ndataset statistics are summarized in Tab.3. TG-2M contains a total of 2.53 million images with 9.54\\n5https:\\/\\/github.com\\/PaddlePaddle\\/PaddleOCR\\n13\\nTable 3: The statistics of our proposed TG-2M dataset.\\nimage count\\nline count\\nmean chars\\/line\\n#line < 20 chars\\nEnglish\\n1.3M\\n5.59M\\n4.23\\n5.50M, 98.4%\\nChinese\\n1.23M\\n3.95M\\n5.68\\n3.83M, 97.0%\\nTotal\\n2.53M\\n9.54M\\n4.83\\n9.33M, 97.8%\\nFigure 11: Some cases in our proposed TG-2M dataset.\\nmillion text lines. On average, each text line contains 4.83 characters. Notably, 97.8% of the text\\nlines have fewer than 20 characters, which facilitates effective training of our model.\\nB\"}\n{\"section_content\":\"The detailed statistics are shown in Table 1.\\nFingerspelling LibriSpeech To extract semantic units from the fngerspelling signs, we trained the visual CPC encoder on a sentence-level fngerspelling dataset constructed from the 960-hour LibriSpeech dataset and the Unvoiced dataset (Nagaraj, 2018). To construct the dataset, we replace each letter in the LibriSpeech transcript with an image of that letter\\u2019s ASL Alphabet symbol chosen uniformly at random from Unvoiced. To study the effect of visual variability on SSR-U, we subset the ASL Alphabet images to 100, 300, 500, or 1000 images per letter sign. The dev-clean subset of LibriSpeech is used as the validation set.\\nFingerspelling LJSpeech We train our characterlevel model on another sentence-level fngerspelling dataset constructed from LJSpeech (Ito and Johnson, 2017) and the ASL Alphabet dataset similar to the fngerspelling LibriSpeech.\\nASL LibriSpeech For the word-level SSR-U, we construct another corpus using LibriSpeech for speech and MSASL (Joze and Koller, 2019) for word-level sign videos. Since many MSASL videos no longer exist on YouTube, only $11.6\\\\mathbf{k}$ out of $25\\\\mathrm{k}$ videos are downloaded. Further, due to the mismatch in vocabulary size, we use forced alignment information to flter out LibriSpeech words that don\\u2019t appear in MSASL and keep sentences that are at least 5 words long. Next, for each word in each sentence, we pick a word-level sign video uniformly at random from MSASL. To study the effect of vocabulary size on our model, we follow the split provided by (Joze and Koller, 2019) to subset the data to a vocabulary size of 100, 200, 500 or 1000.\"}\n\n... # only display 7 rows in JSON format, more are truncated due to length constraint based on max_tokens (5000)"}
{"role": "assistant", "content": "[Thought]: The retrieved sections still do not provide the specific sub-splits of the OC20 dataset. I will try a more targeted similarity search using the `text_sentence_transformers_all_minilm_l6_v2` collection to find the relevant context.\n[Action]:\nClassicRetrieve(query='OC20 dataset validation and test set sub-splits', limit=5)"}
{"role": "user", "content": "[Observation]:\n{\"score\":0.7085,\"pdf_id\":\"6d91f7ae-5206-5b7d-8782-d9926307f15f\",\"page_number\":6,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"847a7bca-838d-5b13-8cb7-5899b9b8b31f\",\"text\":\"following the approach of Raffel et al. (2020). Since the original test sets are not publicly available,\\nwe adopt the data split strategy from Zhang et al. (2020). For smaller datasets (RTE, MRPC, STS-B,\\nCoLA) with fewer than 10K samples, we split the original validation set equally into validation and\\ntest sets. For larger datasets, we create a validation set by reserving 1K samples from the training\\ndata and use the original validation set for testing.\\nBaselines:\"}\n{\"score\":0.6942,\"pdf_id\":\"b0db48ce-526c-56c0-a425-d2be285a11fa\",\"page_number\":10,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"e813e7ba-7c9b-589d-9292-c2cef66dfd9b\",\"text\":\"to construct the train\\/dev\\/test splits as follows: (a)\\nfor datasets with fewer than 10k samples (RTE,\\nMRPC), we divide the original validation set in\\nhalf, using one half for validation and the other for\\ntesting. (b) for larger datasets (MNLI), we split 2k\\nsamples from the training set as the development\\nset, and use the original development set as the test\\nset. The detailed dataset statistics are presented in\\nTable 4.\\nC\\nAppendix for experimental settings\\nWe add a classification layer after each interme-\"}\n{\"score\":0.6611,\"pdf_id\":\"e480bb47-4b96-5155-9c24-ad8c845774b4\",\"page_number\":11,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"13296edf-f80e-541f-ac1b-dad0fcce34f5\",\"text\":\"the following sources: Food-101 from https:\\/\\/visiir.isir.upmc.fr, N24News from https:\\n\\/\\/github.com\\/billywzh717\\/N24News, and BRCA and ROSMAP from https:\\/\\/github.com\\/\\ntxWang\\/MOGONET.\\nTo ensure a fair comparison with previous works, we adopt the default split method detailed in Table\\n4. As the Food-101 dataset does not include a validation set, we partition 5,000 samples from the\\ntraining set to create one, which is conistent with other baselines.\\nDataset\\nModalities\\nModality Types\\nTrain\\nValidation\\nTest\"}\n{\"score\":0.6541,\"pdf_id\":\"3cca9875-edd7-5fa9-b8c1-b70e146475ff\",\"page_number\":16,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"e86aaa79-81a1-5687-985b-52e69e0ecc75\",\"text\":\"data partitioning strategy. We divide the data into training, validation, and test sets with ratios of\\n0.75, 0.15, and 0.15, respectively. This split ensures a substantial portion of data for training while\\nallocating sufficient samples for validation and testing. In cases where the datasets for downstream\\ntasks does not come with predefined train-validation-test splits, we implement a robust splitting\\nstrategy. We randomly divide the data into training, validation, and test sets, maintaining consistent\"}\n{\"score\":0.6442,\"pdf_id\":\"9b06b24b-0afc-5ccb-95fc-c662395d291d\",\"page_number\":15,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"eccdf438-ffda-5d8f-bf9c-0605f49f9ad7\",\"text\":\"the training split as the validation set and the re-\\nmaining 90% for training. We split the datasets\\nwith the datasets library (Lhoest et al., 2021) us-\\ning seed 42 and shuffle the samples. Then, the\\noriginal validation split is taken as the test set on\\nwhich we report the performance of all models. For\\nHumSet, we use the original train\\/validation\\/test\\nsplits, as all of them are publicly available, includ-\\ning labels. Details about the train\\/validation\\/test\\nsplits can be found in Table 5.\"}\n\nIn total, 5 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved results still do not provide the specific sub-splits of the OC20 dataset. I will perform a more targeted SQL query to extract the relevant section content, focusing on the sections related to the OC20 dataset and the specific sub-splits.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_content FROM sections WHERE ref_paper_id = '82e60cf1-0b61-51c8-899f-490b9462eb9f' AND section_content LIKE '%OC20%' AND section_content LIKE '%validation%' AND section_content LIKE '%test%';\")"}
{"role": "user", "content": "[Observation]:\n{\"section_content\":\"Architectural Improvements. In Table 1a, we start with incorporating eSCN convolutions into Equiformer for higher-degree representations (Index 1) and then ablate the three proposed architectural improvements. First, with attention re-normalization, energy mean absolute errors (MAE) improve by $2.4\\\\%$ , while force MAE are about the same (Index 1 and 2). Second, we replace the gate activation with $S^{2}$ activation, but that does not converge (Index 3). With the proposed $S^{\\\\dot{2}}$ activation, we stabilize training and successfully leverage more expressive activation to improve force MAE (Index 4). Third, replacing equivariant layer normalization with separable layer normalization further improves force MAE (Index 5). We note that simply incorporating eSCN convolutions into Equiformer and using higher degrees (Index 1) do not result in better performance than the original eSCN baseline (Index 8), and that the proposed architectural changes are necessary. We additionally compare the performance gain of architectural improvements with that of training for longer. Attention re-normalization (Index 1 and 2) improves energy MAE by the same amount as increasing training epochs from 12 to 20\\nTable 2: OC20 results on S2EF validation and test splits, and IS2RS and IS2RE test splits when trained on OC20 S2EF-All or S2EF-Al $\\\\mathbf{\\\\Gamma}+\\\\mathbf{MD}$ splits. Throughput is reported as the number of structures processed per GPU-second during training and measured on V100 GPUs. $\\\\lambda_{E}$ is the coefficient of the energy loss.\\nFigure 4: EquiformerV2 achieves better accuracy trade-offs both in terms of inference speed as well as training cost. All models are trained on the S2EF-2M split and measured on V100 GPUs.\\n(Index 5 and 7). The improvement of SLN (Index 4 and 5) in force MAE is about $40\\\\%$ of that of increasing training epochs from 12 to 20 (Index 5 and 7), and SLN is about $6\\\\%$ faster in training. We also conduct the ablation studies on the QM9 dataset and summarize the results in Sec. F.3.\\nScaling of Parameters. In Tables 1c, 1d, 1e, we vary the maximum degree $L_{m a x}$ , the maximum order $M_{m a x}$ , and the number of Transformer blocks and compare with equivalent eSCN variants. Across all experiments, EquiformerV2 performs better than its eSCN counterparts. Besides, while one might intuitively expect higher resolutions and larger models to perform better, this is only true for EquiformerV2, not eSCN. For example, increasing $L_{m a x}$ from 6 to 8 or $M_{m a x}$ from 3 to 4 degrades the performance of eSCN on energy predictions but helps that of EquiformerV2. In Table 1b, we show that increasing the training epochs from 12 to 30 epochs can consistently improve performance.\\nSpeed-Accuracy Trade-offs. We compare trade-offs between inference speed or training time and force MAE among prior works and EquiformerV2 and summarize the results in Figure 4a and Figure 4b. EquifomerrV2 achieves the lowest force MAE across a wide range of inference speed and training cost.\"}\n{\"section_content\":\"Dataset. The OC22 dataset $\\\\mathrm{(Tran^{*}}$ et al., 2022) focuses on oxide electrocatalysis. One crucial difference between OC22 and OC20 is that the energies in OC22 are DFT total energies. DFT total energies are harder to predict but are the most general and closest to a DFT surrogate, offering the flexibility to study property prediction beyond adsorption energies. Similar to OC20, the tasks in OC22 are S2EF-Total and IS2RE-Total. We train models on the OC22 S2EF-Total dataset and evaluate them on energy and force MAE on the S2EF-Total validation and test splits. We use the trained models to perform structural relaxations and predict relaxed energy. Relaxed energy predictions are evaluated on the IS2RE-Total test split.\\nTraining Details. Please refer to Section E.1 for details on architectures, hyper-parameters and training time.\\nResults. We train two EquiformerV2 models with different energy coefficients $\\\\lambda_{E}$ and force coefficients $\\\\lambda_{F}$ . We follow the practice of OC22 models and use linear reference (Tran\\\\* et al., 2022). The results are summarized in Table 4. EquiformerV2 improves upon previous models on all the tasks. EquiformerV2 ( $\\\\lambda_{E}=4$ , $\\\\lambda_{F}=100$ ) trained on only OC22 achieves better results on all the tasks than GemNet-OC trained on both OC20 and OC22. We note that OC22 contains about 8.4M structures and OC20 contains about 130M structures, and therefore EquiformerV2 demonstrates significatly better data efficiency. Additionally, the performance gap between eSCN and EquiformerV2 is larger than that on OC20, suggesting that more complicated structures can benefit more from the proposed architecture. When trained on OC20 S2EF-All+MD, EquiformerV2 ( $\\\\lambda_{E}=4$ , 153M) improves upon eSCN by $4\\\\%$ on energy MAE and $9\\\\%$ on force MAE. For OC22, EquiformerV2 ( $\\\\lambda_{E}=4$ , $\\\\lambda_{F}=100$ ) improves upon eSCN by $18.9\\\\%$ on average energy MAE and $8.9\\\\%$ on average force MAE.\"}\n{\"section_content\":\"The large and diverse OC20 dataset (Chanussot\\\\* et al., 2021) (Creative Commons Attribution 4.0 License) consists of 1.2M DFT relaxations for training and evaluation, computed with the revised Perdew-Burke-Ernzerhof (RPBE) functional (Hammer et al., 1999). Each structure in OC20 has an adsorbate molecule placed on a catalyst surface, and the core task is Structure to Energy Forces (S2EF), which is to predict the energy of the structure and per-atom forces. Models trained for the S2EF task are evaluated on energy and force mean absolute error (MAE). These models can in turn be used for performing structure relaxations by using the model\\u2019s force predictions to iteratively update the atomic positions until a relaxed structure corresponding to a local energy minimum is found. These relaxed structure and energy predictions are evaluated on the Initial Structure to Relaxed Structure (IS2RS) and Initial Structure to Relaxed Energy (IS2RE) tasks. The \\u201cAll\\u201d split of OC20 contains 134M training structures spanning 56 elements, the \\u201cMD\\u201d split consists of 38M structures, and the \\u201c2M\\u201d split has 2M structures. For validation and test splits, there are four sub-splits containing in-distribution adsorbates and catalysts (ID), out-of-distribution adsorbates (OOD Ads), out-of-distribution catalysts (OOD Cat), and out-of-distribution adsorbates and catalysts (OOD Both).\"}\n\nIn total, 3 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved sections now provide the specific sub-splits of the OC20 dataset. I can extract the relevant information and generate the final answer.\n[Action]:\nGenerateAnswer(answer=['ID', 'OOD Ads', 'OOD Cat', 'OOD Both'])"}
{"role": "user", "content": "[Observation]: ['ID', 'OOD Ads', 'OOD Cat', 'OOD Both']"}
