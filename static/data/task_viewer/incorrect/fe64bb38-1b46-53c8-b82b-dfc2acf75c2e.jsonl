{"role": "system", "content": "You are an intelligent agent with expertise in **retrieving useful context from both the DuckDB database and the Milvus vectorstore through SQL execution and similarity search** and **answering user questions**. You will be given a natural language question concerning PDF files, along with the schema of both the database and the vectorstore. Your ultimate goal is to answer the input question with pre-defined answer format. The DuckDB database contains all parsed content of raw PDF files, while the Milvus vectorstore encodes specific column cells from the database as vectors. You can predict executable actions, interact with the hybrid environment (including database and vectorstore) across multiple turns, and retrieve necessary context until you are confident in resolving the question.\n\n--------\n\n## Task Description\nEach task consists of the following parts:\n\n[Question]: User question regarding the PDF, e.g., Is there any ...?\n[Answer Format]: it describes the format of the final answer, e.g., the answer is \"Yes\" or \"No\" without punctuation.\n[Anchor PDF]: Optional, a python str or list, the PDF(s) you must use to answer the question.\n[Reference PDF]: Optional, a python str or list, the PDF(s) you may use to answer the question.\n[Conference]: Optional, a python str or list, the conference(s) and year(s) of the relevant papers for retrieval.\n[Database Schema]: A detailed serialized schema of the DuckDB database for reference when generating SQL queries. It includes 1) tables, 2) columns and their data types, 3) descriptions for these schema items, and 4) primary key and foreign key constraints.\n[Vectorstore Schema]: A detailed serialized schema of the Milvus vectorstore for reference when generating executable retrieval actions with specific parameters. It includes 1) collections, 2) fields, 3) encodable (table, column) pairs in the relational database where the vectorized content originates, and 4) grammar for valid filter rules.\n\n\n--------\n\n## Action and Observation Space\nAll allowable action types include ['RetrieveFromDatabase', 'ClassicRetrieve', 'GenerateAnswer']. Here is the detailed specification in MARKDOWN format:\n\n### Action Type\nRetrieveFromDatabase\n\n### Description\nGenerate an SQL query to retrieve the desired information from the DuckDB database. Please refer to the concrete database schema to produce a valid and executable SQL.\n\n### Observation\nThe observation space is the execution result of the SQL query. You do not need to worry about the actual execution, we will perform it for you. If the SQL failed to execute, we will return the error message. Extremely long SQL output will be truncated.\n\n### Syntax and Parameters (MARKDOWN Format)\nRetrieveFromDatabase(sql: str)\n- sql: str, required. The concrete DuckDB SQL query to execute and retrieve results.\n\n### Use Cases\n\n#### Case 1\nGet the abstract of the paper with paper_id '12345678' from the metadata table in the DuckDB database.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT abstract FROM metadata WHERE paper_id = '12345678';\")\n\n\n#### Case 2\nFind which page in the paper with paper_id '12345678' contains Figure 3.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT pages.page_number FROM images JOIN pages JOIN metadata ON images.ref_page_id = pages.page_id AND pages.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '12345678' AND images.image_caption LIKE '%Figure 3%';\")\n\n\n----\n\n### Action Type\nClassicRetrieve\n\n### Description\nGiven a query text, retrieve relevant context from the Milvus vectorstore.\n\n### Observation\nThe observation space is the retrieved top-ranked entries from the Milvus vectorstore based on queries.\n\n### Syntax and Parameters (MARKDOWN Format)\nClassicRetrieve(query: str, limit: int = 5)\n- query: str, required. The query text will be encoded and used to search for relevant context. You can rephrase the original user question to obtain a more clear and structured query requirement.\n- limit: int, optional, default to 5. The number of top-ranked context to retrieve. Please set it to a positive integer to limit the number of returned results. Extremely large limit values may be truncated.\n\n### Use Cases\n\n#### Case 1\nRetrieve top 5 pieces about a certain topic.\n\n[Action]: ClassicRetrieve(query='Is there any work about the topic structured RAG?')\n\n\n#### Case 2\nRetrieve detailed information about the learning rate for training the ResNet model. The top 4 most relevant entries will be returned based on the query.\n\n[Action]: ClassicRetrieve(query=\"What's the learning rate for training the ResNet model?\", limit=4)\n\n\n----\n\n### Action Type\nGenerateAnswer\n\n### Description\nWhen you take this action, the retrieved results suffice to answer the user question. PLEASE STRICTLY ADHERE TO THE ANSWER FORMAT FOR THE CURRENT QUESTION.\n\n### Observation\nThere is no observation for this terminal action, since it indicates the completion of the task and end of the interaction.\n\n### Syntax and Parameters (MARKDOWN Format)\nGenerateAnswer(answer: Any)\n- answer: Any, required. The final answer to the user question. Please adhere to the answer format for the current question.\n\n### Use Cases\n\n#### Case 1\nThe answer to the user question is 42.\n\n[Action]: GenerateAnswer(answer=42)\n\n\n#### Case 2\nThe answer to the user question is a list of strings: ['Results', 'Discussion'].\n\n[Action]: GenerateAnswer(answer=['Results', 'Discussion'])\n\n\n\n--------\n\n## Interaction Framework\n\nThe main interaction procedure proceeds like this:\n\n----\n\n[Thought]: ... reasoning process, why to take this action ...\n[Action]: ... which action to take, please strictly conform to the action specification ...\n[Observation]: ... execution results or error message after taking the action ...\n\n... # more interleaved triplets of ([Thought], [Action], [Observation])\n\n[Thought]: ... reasoning process to produce the final answer ...\n[Action]: ... the terminate action `GenerateAnswer`, there is no further observation ...\n\n----\n\nIn general, the main interaction loop consists of an interleaved of triplets ([Thought], [Action], [Observation]), except the last `GenerateAnswer` action which does not have \"[Observation]:\". You need to predict the \"[Thought]: ...\" followed by the \"[Action]: ...\" for each turn, and we will execute your action in the environment and provide the \"[Observation]: ...\" for the previous action.\n\n--------\n\n## Suggestions or Hints for Agent Interaction\n\n1. Explore multiple retrieval strategies. For example:\n- Experiment with different (table, column) pairs to extract diverse types of information.\n- Query various embedding models (collections) to find the most relevant context.\n\n2. Combine both structured and unstructured data. Concretely:\n- Use SQL queries to retrieve precise facts and structured data. Pay special attention to morphological variations in cell values.\n- Perform similarity searches in the vectorstore to capture semantic relationships and hidden insights.\n\n3. Iterate and refine:\n- If SQL execution result is not satisfactory, try alternative SQL queries to explore the database content carefully.\n- If the vector-based neural retrieval is insufficient, try alternative approaches or parameter settings.\n- Use your findings to validate or enrich the final response.\n\n4. Ensure confidence. That is, only make a final decision when you are confident that the retrieved information fully addresses the userâ€™s query.\n\n\nRemember that, for each question, you only have 20 interaction turns at most. Now, let's start!\n"}
{"role": "user", "content": "[Question]: I want to contact the first author of this paper. What's the email address?\n[Answer Format]: Your answer should be a verbose text string representing the email address if there is only one first author. Otherwise, return a Python list of e-mail strings for each first and co-first author, e.g., [\"xxx@xxx.com\", \"yyy@yyy.com\", ...]. DO NOT INCLUDE ANY OTHER CONTEXT IN YOUR ANSWER.\n[Anchor PDF]: '3ea7de2a-3312-589f-a765-01e4b9e1dcb7'\n[Database Schema]: The database schema for /home/htc981/workspace/project/HNS-RAG/data/database/ai_research/ai_research.sql is as follows:\n/* database ai_research: This database contains information about AI research papers. Each PDF file is represented or parsed via different views, e.g., pages, sections, figures, tables, and references. We also extract the concrete content inside each concrete element via OCR.\n*/\n/* table metadata: This table stores metadata about each paper, including the number of pages, paper path and paper id.\n*/\nCREATE TABLE IF NOT EXISTS metadata (\n\tpaper_id UUID, -- A unique identifier for this paper.\n\ttitle VARCHAR, -- The title of this paper.\n\tabstract VARCHAR, -- The abstract of this paper.\n\tnum_pages INTEGER, -- The number of pages in this paper.\n\tconference_full VARCHAR, -- The full name of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tconference_abbreviation VARCHAR, -- The abbreviation of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tpub_year INTEGER, -- The year when this paper was published.\n\tvolume VARCHAR, -- The volume of the conference where this paper was published. e.g. findings.\n\tdownload_url VARCHAR, -- The url from which the paper can be downloaded.\n\tbibtex VARCHAR, -- The bibtex of this paper.\n\tauthors VARCHAR[], -- The full names of authors of this paper.\n\tpdf_path VARCHAR, -- The path to the PDF file of this paper.\n\ttldr VARCHAR, -- A brief summary of the paper's main idea or findings generated by LLM based on title and abstract.\n\ttags VARCHAR[], -- Keywords representing the paper's topics, methods, or applications generated by LLM based on title and abstract.,\n\tPRIMARY KEY (paper_id)\n);\n/* table pages: This table stores information of the pages in the papers, including their content, size and their order within the paper. The pagesare extracted using PyMuPDF.\n*/\nCREATE TABLE IF NOT EXISTS pages (\n\tpage_id UUID, -- A unique identifier for each page.\n\tpage_number INTEGER, -- The page number in the current paper, starting from 1.\n\tpage_width INTEGER, -- The pixel width of the current page.\n\tpage_height INTEGER, -- The pixel height of the current page.\n\tpage_content VARCHAR, -- The content of the page.\n\tpage_summary VARCHAR, -- A brief summary of the page content, generated by LLM, focusing on key information and describing the page content.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (page_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table images: This table stores the information about images in each paper. The images are extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS images (\n\timage_id UUID, -- The unique identifier of the image.\n\timage_caption VARCHAR, -- The caption of this image, \"\" if it doesn't have one.\n\timage_summary VARCHAR, -- A brief summary of the image, generated by LLM, focusing on key information and describing the image.\n\tbounding_box INTEGER[4], -- The bounding box of the figure in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height which are used to determine the shape of the rectangle.\n\tordinal INTEGER, -- Each figure is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (image_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table chunks: This table contains the information of each chunk of text (chunk size = 512 tokens with no overlapping) in each page of the paper. A chunk is a sub-text that is extracted from the main text using langchain, such as a sentence or a paragraph.\n*/\nCREATE TABLE IF NOT EXISTS chunks (\n\tchunk_id UUID, -- A unique identifier for each chunk of text.\n\ttext_content VARCHAR, -- The text content of the current chunk.\n\tordinal INTEGER, -- Each chunk is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (chunk_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table tables: This table stores information about tables extracted from pages using MinerU, including content (in html format), bounding box and summary of each table generated by LLM.\n*/\nCREATE TABLE IF NOT EXISTS tables (\n\ttable_id UUID, -- A unique identifier for each table.\n\ttable_caption VARCHAR, -- Caption of the table, showing key information of the table.\n\ttable_content VARCHAR, -- The content of the table in html format.\n\ttable_summary VARCHAR, -- A brief summary of the table content generated by LLM, focusing on key information and describing the table content.\n\tbounding_box INTEGER[4], -- The bounding box of the table in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height.\n\tordinal INTEGER, -- Each table is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this table is located.,\n\tPRIMARY KEY (table_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table sections: This table contains the text content of each section in the paper, e.g. `Introduction`, `Experiment`, `Conclusion`, `Reference`. The sections are extracted using PyMuPDF or MinerU.\n*/\nCREATE TABLE IF NOT EXISTS sections (\n\tsection_id UUID, -- A unique identifier for each section of text.\n\tsection_title VARCHAR, -- The title of the current section.\n\tsection_content VARCHAR, -- The text content of the current section.\n\tsection_summary VARCHAR, -- A brief summary of the section content generated by LLM, focusing on key information and describing the section content.\n\tordinal INTEGER, -- Each section is labeled with one distinct integer number in the paper, which starts from 0.\n\tpage_numbers INTEGER[], -- A list of page numbers where current section is located in the relevant paper.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (section_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table equations: This table stores information about equations extracted from pages using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS equations (\n\tequation_id UUID, -- A unique identifier for each equation.\n\tequation_content VARCHAR, -- Content of the equation in latex format.\n\tordinal INTEGER, -- Each equation is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the paper ID in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the page ID in the `pages` table where this equation is located.,\n\tPRIMARY KEY (equation_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table reference: This table stores information about references extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS reference (\n\treference_id UUID, -- A unique identifier for each reference.\n\treference_content VARCHAR, -- Content of the reference.\n\tordinal INTEGER, -- Each reference is labeled with one distinct integer number according to its order in the paper, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this reference is located.,\n\tPRIMARY KEY (reference_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n[Vectorstore Schema]: The vectorstore schema for ai_research is as follows. You can try collections with different encoding models or modalities:\n[\n    {\n        \"collection_name\": \"text_bm25_en\",\n        \"modality\": \"text\",\n        \"embed_type\": \"bm25\",\n        \"embed_model\": \"en\",\n        \"description\": \"This collection is used to store the sparse embeddings generated by the BM25 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric inner-product (IP).\",\n        \"fields\": [\n            {\n                \"name\": \"id\",\n                \"dtype\": \"INT64\",\n                \"is_primary\": true,\n                \"description\": \"The unique id for each encoded text vector in this collection.\"\n            },\n            {\n                \"name\": \"vector\",\n                \"dtype\": \"SPARSE_FLOAT_VECTOR\",\n                \"description\": \"The encoded sparse vector of the text content generated by the BM25 model. Note that, the raw text content can be uniquely identified by the triplet fields below: `table_name`, `column_name`, `primary_key`.\"\n            },\n            {\n                \"name\": \"pdf_id\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The unique id of the PDF file stored in the relational database that the encoded text belongs to. This field can be used to quickly filter the search space.\"\n            },\n            {\n                \"name\": \"page_number\",\n                \"dtype\": \"INT16\",\n                \"description\": \"The page number in the PDF file that the encoded text belongs to (starting from 1). This field can be used to quickly filter the search space. Value -1 means unknown.\"\n            },\n            {\n                \"name\": \"table_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which table in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"column_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which column under `table_name` in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"primary_key\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The primary key value of `table_name` (or which row) in the relational database that the text content belongs to. Note that, the triplet (`table_name`, `column_name`, `primary_key`) can be used to construct a one-to-one mapping between the `text` field in the current vectorstore and the cell entry in the relational database.\"\n            }\n        ]\n    },\n    {\n        \"collection_name\": \"text_sentence_transformers_all_minilm_l6_v2\",\n        \"modality\": \"text\",\n        \"embed_type\": \"sentence_transformers\",\n        \"embed_model\": \"all-MiniLM-L6-v2\",\n        \"description\": \"This collection is used to store the embeddings generated by the all-MiniLM-L6-v2 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric COSINE.\",\n        \"fields\": \"The fields of this collection are similar to the `text_bm25_en` collection.\"\n    }\n]\n\nThe following lists all encodable (table_name, column_name, encode_modality) information from the corresponding DuckDB database, where the encoded vector entries are sourced. Note that, for text modality, we directly encode cell values from the `table_name.column_name`; for image modality, we encode the cropped images for `page_number` in `pdf_id` with bounding boxes from `table_name.column_name`. You can leverage them for filter condition during similarity search:\n[\n    [\n        \"metadata\",\n        \"title\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"abstract\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"bibtex\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"tldr\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_content\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_summary\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_caption\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_summary\",\n        \"text\"\n    ],\n    [\n        \"chunks\",\n        \"text_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_caption\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_summary\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_title\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_content\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_summary\",\n        \"text\"\n    ],\n    [\n        \"equations\",\n        \"equation_content\",\n        \"text\"\n    ],\n    [\n        \"reference\",\n        \"reference_content\",\n        \"text\"\n    ]\n]\n\nHere are the operators that you can use in the filtering condition for the vectorstore:\n{\n    \"operators\": {\n        \"logical\": [\n            {\n                \"symbol\": \"not\",\n                \"example\": \"not expr\",\n                \"description\": \"True if expr is false.\"\n            },\n            {\n                \"symbol\": \"and\",\n                \"example\": \"expr1 and expr2\",\n                \"description\": \"True if both expr1 and expr2 are true.\"\n            },\n            {\n                \"symbol\": \"or\",\n                \"example\": \"expr1 or expr2\",\n                \"description\": \"True if either expr1 or expr2 are true.\"\n            }\n        ],\n        \"binary arithmetic\": [\n            {\n                \"symbol\": \"+\",\n                \"example\": \"a + b\",\n                \"description\": \"Add the two operands.\"\n            },\n            {\n                \"symbol\": \"-\",\n                \"example\": \"a - b\",\n                \"description\": \"Subtract the second operand from the first operand.\"\n            },\n            {\n                \"symbol\": \"*\",\n                \"example\": \"a * b\",\n                \"description\": \"Multiply the two operands.\"\n            },\n            {\n                \"symbol\": \"/\",\n                \"example\": \"a / b\",\n                \"description\": \"Divide the first operand by the second operand.\"\n            },\n            {\n                \"symbol\": \"**\",\n                \"example\": \"a ** b\",\n                \"description\": \"Raise the first operand to the power of the second operand.\"\n            },\n            {\n                \"symbol\": \"%\",\n                \"example\": \"a % b\",\n                \"description\": \"Divide the first operand by the second operand and yield the remainder portion.\"\n            }\n        ],\n        \"relational\": [\n            {\n                \"symbol\": \"<\",\n                \"example\": \"a < b\",\n                \"description\": \"True if a is less than b.\"\n            },\n            {\n                \"symbol\": \">\",\n                \"example\": \"a > b\",\n                \"description\": \"True if a is greater than b.\"\n            },\n            {\n                \"symbol\": \"==\",\n                \"example\": \"a == b\",\n                \"description\": \"True if a is equal to b. Please use **two** equal signs for equality comparison.\"\n            },\n            {\n                \"symbol\": \"!=\",\n                \"example\": \"a != b\",\n                \"description\": \"True if a is not equal to b.\"\n            },\n            {\n                \"symbol\": \"<=\",\n                \"example\": \"a <= b\",\n                \"description\": \"True if a is less than or equal to b.\"\n            },\n            {\n                \"symbol\": \">=\",\n                \"example\": \"a >= b\",\n                \"description\": \"True if a is greater than or equal to b.\"\n            },\n            {\n                \"symbol\": \"in\",\n                \"example\": \"a in [b, c, ...]\",\n                \"description\": \"True if a is equal to any of the values in the list.\"\n            }\n        ],\n        \"array operations\": [\n            {\n                \"symbol\": \"[]\",\n                \"example\": \"bbox[0]\",\n                \"description\": \"This expression gets the first element in array bbox. For example, 'bbox[0] < 50' evaluates to true if the value of bbox[0] is less than 50.\"\n            },\n            {\n                \"symbol\": \"array_contains\",\n                \"example\": \"array_contains(bbox, 100)\",\n                \"description\": \"This expression evaluates to true if array bbox contains element 100.\"\n            },\n            {\n                \"symbol\": \"array_length\",\n                \"example\": \"array_length(int_array) == 4\",\n                \"description\": \"This expression evaluates to true if int_array contains exactly 4 elements.\"\n            }\n        ]\n    },\n    \"use cases\": [\n        {\n            \"example\": \"table_name == 'chunks' and column_name == 'text_content'\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and column_name equal to 'text_content'.\"\n        },\n        {\n            \"example\": \"table_name == 'chunks' and primary_key in ['123', '456', '789']\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and primary_key equal to any of the values in the list ['123', '456', '789'].\"\n        },\n        {\n            \"example\": \"bbox[0] + bbox[2] <= 100 and bbox[1] + bbox[3] <= 300 and pdf_id == '123456' and page_number == 1\",\n            \"description\": \"For image modality, filter results to include only image regions that are entirely within the upper-left quadrant of page 1 in the PDF with ID '123456', assuming the page dimensions are 200 (width) x 600 (height).\"\n        }\n    ]\n}"}
{"role": "assistant", "content": "[Thought]: To find the email address of the first author of the paper, I need to first retrieve the author information from the metadata table for the specified paper ID. If there are multiple authors, I need to determine which one is the first author and then retrieve the email address from the paper content or metadata.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT authors FROM metadata WHERE paper_id = '3ea7de2a-3312-589f-a765-01e4b9e1dcb7';\")"}
{"role": "user", "content": "[Observation]:\n{\"authors\":\"['Guangzhi Xiong' 'Qiao Jin' 'Zhiyong Lu' 'Aidong Zhang']\"}\n\nIn total, 1 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The authors of the paper are listed as 'Guangzhi Xiong', 'Qiao Jin', 'Zhiyong Lu', and 'Aidong Zhang'. The first author is typically the first name in the list. Next, I need to search for the email address of the first author, 'Guangzhi Xiong', in the paper content.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT page_content FROM pages WHERE ref_paper_id = '3ea7de2a-3312-589f-a765-01e4b9e1dcb7';\")"}
{"role": "user", "content": "[Observation]:\n{\"page_content\":\"Findings of the Association for Computational Linguistics: ACL 2024, pages 6233\\u20136251\\nAugust 11-16, 2024 \\u00a92024 Association for Computational Linguistics\\nBenchmarking Retrieval-Augmented Generation for Medicine\\nGuangzhi Xiong\\u2663\\u2020, Qiao Jin\\u2661\\u2020, Zhiyong Lu\\u2661\\u00a7, Aidong Zhang\\u2663\\u00a7\\n\\u2663Univeristy of Virginia\\n\\u2661National Library of Medicine, National Institutes of Health\\n{hhu4zu, aidong}@virginia.edu\\n{qiao.jin, zhiyong.lu}@nih.gov\\nAbstract\\nWhile large language models (LLMs) have\\nachieved state-of-the-art performance on a wide\\nrange of medical question answering (QA)\\ntasks, they still face challenges with halluci-\\nnations and outdated knowledge. Retrieval-\\naugmented generation (RAG) is a promising so-\\nlution and has been widely adopted. However, a\\nRAG system can involve multiple flexible com-\\nponents, and there is a lack of best practices\\nregarding the optimal RAG setting for various\\nmedical purposes. To systematically evaluate\\nsuch systems, we propose the Medical Informa-\\ntion Retrieval-Augmented Generation Evalua-\\ntion (MIRAGE), a first-of-its-kind benchmark\\nincluding 7,663 questions from five medical\\nQA datasets. Using MIRAGE, we conducted\\nlarge-scale experiments with over 1.8 trillion\\nprompt tokens on 41 combinations of differ-\\nent corpora, retrievers, and backbone LLMs\\nthrough the MEDRAG toolkit introduced in this\\nwork. Overall, MEDRAG improves the accu-\\nracy of six different LLMs by up to 18% over\\nchain-of-thought prompting, elevating the per-\\nformance of GPT-3.5 and Mixtral to GPT-4-\\nlevel. Our results show that the combination of\\nvarious medical corpora and retrievers achieves\\nthe best performance. In addition, we discov-\\nered a log-linear scaling property and the \\u201clost-\\nin-the-middle\\u201d effects in medical RAG. We be-\\nlieve our comprehensive evaluations can serve\\nas practical guidelines for implementing RAG\\nsystems for medicine1.\\n1\\nIntroduction\\nLarge Language Models (LLMs) have revolution-\\nized the way people seek information online, from\\nsearching to directly asking chatbots for answers.\\nAlthough recent studies have shown their state-of-\\nthe-art capabilities of question answering (QA) in\\n\\u2020Equal contribution.\\n\\u00a7Co-correspondence.\\n1Project homepage: https:\\/\\/teddy-xionggz.github.\\nio\\/benchmark-medical-rag\\/\\nboth general and medical domains (OpenAI et al.,\\n2023; Anil et al., 2023; Touvron et al., 2023b; Sing-\\nhal et al., 2023a; Nori et al., 2023a), LLMs often\\ngenerate plausible-sounding but factually incorrect\\nresponses, commonly known as hallucination (Ji\\net al., 2023). Also, the training corpora of LLMs\\nmight not include the latest knowledge, such as\\nrecent updates of clinical guidelines. These issues\\ncan be especially dangerous in high-stakes domains\\nsuch as healthcare (Tian et al., 2024; Hersh, 2024),\\nand will affect the overall performance of LLMs\\non domain-specific QA tasks.\\nBy providing LLMs with relevant documents re-\\ntrieved from up-to-date and trustworthy collections,\\nRetrieval-Augmented Generation (RAG) has the\\npotential to address the above challenges (Lewis\\net al., 2020; Gao et al., 2023). RAG also improves\\nthe transparency of LLMs by grounding their rea-\\nsoning on the retrieved documents. As such, RAG\\nhas already been quickly implemented in various\\nscientific and clinical QA systems (L\\u00e1la et al., 2023;\\nZakka et al., 2024). However, a complete RAG sys-\\ntem contains several flexible modules, such as doc-\\nument collections (corpora), retrieval algorithms\\n(retrievers), and backbone LLMs, but the best prac-\\ntices for tuning these components are still unclear,\\nhindering their optimal adoption in medicine.\\nTo systematically evaluate how different com-\\nponents in RAG affect its performance, we first\\ncompile an evaluation benchmark termed MI-\\nRAGE, representing Medical Information Retrieval-\\nAugmented Generation Evaluation. MIRAGE in-\\ncludes 7,663 questions from five commonly used\\nQA datasets in biomedicine. To evaluate RAG in\\nrealistic medical settings, MIRAGE focuses on the\\nzero-shot ability in RAG systems where no demon-\\nstrations are provided. We also employ a question-\\nonly setting for the retrieval phase of RAG, as in\\nreal-world cases where no options are given. For\\na comprehensive comparison on MIRAGE, we pro-\\nvide MEDRAG, an easy-to-use toolkit that covers\\n6233\\n\"}\n{\"page_content\":\"five corpora, four retrievers, and six LLMs includ-\\ning both general and domain-specific models.\\nBased on the MIRAGE benchmark, we systemat-\\nically evaluated different MEDRAG solutions and\\nstudied the effects of each component on overall\\nperformance from a multidimensional perspective.\\nFor various LLMs, there is a 1% to 18% relative\\nperformance increase using MEDRAG compared to\\nchain-of-thought prompting (Wei et al., 2022). No-\\ntably, with MEDRAG, GPT-3.5 and Mixtral (Jiang\\net al., 2024) can achieve comparable performance\\nto GPT-4 (OpenAI et al., 2023) on MIRAGE. On the\\ncorpus dimension, we found different tasks have a\\npreference over the retrieval corpus. While point-\\nof-care articles and textbooks are solely helpful for\\nexamination questions, PubMed is a robust choice\\nfor all MIRAGE tasks. Our results also show that a\\ncombination of all corpora can be a more compre-\\nhensive choice. On the retriever dimension, BM25\\n(Robertson et al., 2009) and the domain-specific\\nMedCPT (Jin et al., 2023a) retriever display su-\\nperior performance on our MIRAGE benchmark.\\nThe performance can be further enhanced by com-\\nbining multiple retrievers. Beyond the evaluation\\nresults on MIRAGE, we found a log-linear scaling\\nrelationship between model performance and the\\nnumber of retrieved snippets. We also observed a\\n\\u201clost-in-the-middle\\u201d phenomenon (Liu et al., 2023)\\nbetween model performance and the position of\\nthe ground-truth snippet. Finally, we provide sev-\\neral practical recommendations based on the results\\nand analyses, which can guide the application and\\nfuture research of RAG in the biomedical domain.\\nIn summary, our contributions are three-fold:\\n\\u2022 We introduce the MIRAGE2, a first-of-its-kind\\nbenchmark for systematically comparing dif-\\nferent medical RAG systems.\\n\\u2022 We provide MEDRAG3, a RAG toolkit for\\nmedical QA that incorporates various domain-\\nspecific corpora,\\nretrievers,\\nand LLMs.\\nMEDRAG significantly improves the perfor-\\nmance of LLMs on MIRAGE.\\n\\u2022 We recommend a set of best practices for re-\\nsearch and deployments of medical RAG sys-\\ntems based on our comprehensive results and\\nanalyses on MIRAGE with MEDRAG.\\n2https:\\/\\/github.com\\/Teddy-XiongGZ\\/MIRAGE\\n3https:\\/\\/github.com\\/Teddy-XiongGZ\\/MedRAG\\n2\\nRelated Work\\n2.1\\nRetrieval-augmented Generation\\nRetrieval-Augmented Generation (RAG) was pro-\\nposed by Lewis et al. (2020) to enhance the gen-\\neration performance on knowledge-intensive tasks\\nby integrating retrieved relevant information. RAG\\nnot only mitigates the problem of hallucinations\\nas LLMs are grounded on given contexts, but can\\nalso provide up-to-date knowledge that might not\\nbe encoded by the LLMs. Many follow-up studies\\nhave been carried out to improve over the vanilla\\nRAG (Borgeaud et al., 2022; Ram et al., 2023; Gao\\net al., 2023; Jiang et al., 2023; Mialon et al., 2023).\\nIn biomedicine, there have also been various ex-\\nplorations on how LLMs can improve literature\\ninformation-seeking and clinical decision-making\\nwith RAG (Frisoni et al., 2022; Naik et al., 2022;\\nJin et al., 2023b; L\\u00e1la et al., 2023; Zakka et al.,\\n2024; Jeong et al., 2024; Wang et al., 2023b), but\\ntheir evaluations are not comprehensive. Neverthe-\\nless, current systematic evaluations in biomedicine\\ntypically focus on the vanilla LLMs without RAG\\n(Chen et al., 2023a; Nori et al., 2023a). Our study\\nprovides the first systematic evaluations of RAG\\nsystems in medicine.\\n2.2\\nBiomedical Question Answering\\nBiomedical or medical question answering (QA)\\nis a widely studied task since various information\\nneeds are expressed by natural language questions\\nin biomedicine (Zweigenbaum, 2003; Athenikos\\nand Han, 2010; Jin et al., 2022). While BERT-\\nbased (Devlin et al., 2019) models used to be the\\nstate-of-the-art methods of medical QA (Abacha\\net al., 2019; Lee et al., 2020; Soni and Roberts,\\n2020; Gu et al., 2021; Yasunaga et al., 2022), they\\nare outperformed by LLMs with large margins\\n(Singhal et al., 2023b; Chen et al., 2023b; Nori\\net al., 2023b). Due to their knowledge-intensive\\nnature, QA datasets are commonly used to evaluate\\nthe biomedical capabilities of both general LLMs\\n(Nori et al., 2023a,b) and domain-specific LLMs\\n(Luo et al., 2022; Chen et al., 2023b; Wu et al.,\\n2023; Singhal et al., 2023a,b). Following these\\nstudies, we also use medical QA datasets to test if a\\nRAG system can retrieve and leverage relevant con-\\ntexts. Unlike prior efforts, our evaluation employs\\nboth RAG and question-only retrieval settings, a\\nmore realistic evaluation for medical QA.\\n6234\\n\"}\n{\"page_content\":\"3\\nThe MIRAGE Benchmark\\n3.1\\nEvaluation Settings\\nThe main objective of this work is to evaluate RAG\\nsystems in a setting that reflects real-world medi-\\ncal information needs as much as possible while\\nbeing practically scalable. As such, our MIRAGE\\nbenchmark adopts four key evaluation settings:\\nZero-Shot Learning (ZSL).\\nAs real-world medi-\\ncal questions are often posed without similar exem-\\nplars available, in our benchmark, the RAG systems\\nshould be evaluated in a zero-shot setting where\\nin-context few-shot learning is not permitted.\\nMulti-Choice Evaluation (MCE).\\nEvaluating\\nmedical QA systems using multi-choice questions\\nis a widely adopted method that can be practically\\nimplemented for large-scale evaluation (Nori et al.,\\n2023a,b; Singhal et al., 2023a; Li\\u00e9vin et al., 2022;\\nL\\u00e1la et al., 2023). To be consistent with existing\\nresearch, we also use a multi-choice setting in our\\nbenchmark to compare different systems.\\nRetrieval-Augmented Generation (RAG).\\nThe\\nmedical questions used in MIRAGE are knowledge-\\nintensive, which are difficult to answer without ex-\\nternal knowledge. Moreover, due to the problem of\\nhallucination, letting LLMs be reasoning engines\\ninstead of knowledge databases could be a better\\npractice in medicine (Truhn et al., 2023). Thus,\\nRAG is needed to collect external information for\\naccurate and reliable answer generation.\\nQuestion-Only Retrieval (QOR).\\nTo align with\\nreal-world cases of medical QA, answer options\\nshould not be provided as input during retrieval.\\nThis is a more realistic setting for evaluating RAG\\nsystems. While Li\\u00e9vin et al. (2022) and L\\u00e1la et al.\\n(2023) evaluated LLMs with RAG on medical QA,\\noptions were used for retrieval in their work, which\\nis not a realistic setting. To the best of our knowl-\\nedge, we are the first to propose and employ this\\nsetting for medical QA evaluation.\\nStudy\\nZSL\\nMCE\\nRAG\\nQOR\\nNori et al. (2023a)\\n\\u2713\\n\\u2713\\nSinghal et al. (2023a)\\n\\u2713\\n\\u2713\\nLi\\u00e9vin et al. (2022)\\n\\u2713\\n\\u2713\\n\\u2713\\nL\\u00e1la et al. (2023)\\n\\u2713\\n\\u2713\\n\\u2713\\nMIRAGE (Ours)\\n\\u2713\\n\\u2713\\n\\u2713\\n\\u2713\\nTable 1: Comparison of related work for using the dif-\\nferent evaluation settings adopted in MIRAGE.\\nTable 1 lists related work on the evaluation set-\\ntings. Only MIRAGE adopts all four considerations.\\n3.2\\nComponent Datasets\\nPubMedQA*\\nBioASQ-Y\\/N\\n\\u00a0 \\u00a0 MMLU-Med\\u00a0\\n\\u00a0 MedQA-US\\u00a0\\nMedMCQA\\u00a0\\nWhich of the following best\\ndescribes ... ?\\nAxonal transport is:\\nA \\/ B \\/ C \\/ D\\n5 Datasets\\n7,663 Questions\\n2-4 Choices\\nA 72-year-old man comes to\\nthe physicians ... ?\\nIs anorectal endosonography\\nvaluable ... ?\\nIs medical hydrology the\\nsame as Spa ...?\\nA \\/ B \\/ C \\/ D\\nA \\/ B \\/ C \\/ D\\nYes \\/ No \\/\\nMaybe\\nYes \\/ No\\nFigure 1: Composition of the MIRAGE benchmark.\\nAs shown in Figure 1, MIRAGE contains five\\ncommonly used datasets for medical QA for the\\nevaluation of RAG systems (Hendrycks et al., 2020;\\nJin et al., 2021; Pal et al., 2022; Jin et al., 2019;\\nTsatsaronis et al., 2015), including three medical\\nexamination QA datasets (MMLU-Med, MedQA-\\nUS, MedMCQA) and two biomedical research\\nQA datasets (PubMedQA*, BioASQ-Y\\/N). Specif-\\nically, we only include multi-choice questions that\\nare related to biomedicine and exclude all ground-\\ntruth supporting contexts for the questions. For ex-\\nample, we remove the contexts of PubMedQA and\\nonly use the questions, resulting in PubMedQA*.\\nMore details are described in the appendix. Table\\n2 presents the statistics of the datasets in MIRAGE.\\nDataset\\nSize\\n#O.\\nAvg. L\\nSource\\nMMLU-Med\\n1,089\\n4\\n63\\nExamination\\nMedQA-US\\n1,273\\n4\\n177\\nExamination\\nMedMCQA\\n4,183\\n4\\n26\\nExamination\\nPubMedQA*\\n500\\n3\\n24\\nLiterature\\nBioASQ-Y\\/N\\n618\\n2\\n17\\nLiterature\\nTable 2: Statistics of MIRAGE tasks. #O.: numbers of\\noptions; Avg. L: average token counts in each question.\\nAs the tasks in MIRAGE are all composed of\\nmulti-choice questions, we evaluate a given RAG\\nsystem by testing its performance in predicting the\\ncorrect answer choices. For each specific task, we\\ncompute the accuracy of model predictions as the\\nevaluation metric, as well as the standard deviation\\nfor the proportion of correctly answered questions,\\nreflecting the error bound of the results. Across\\n6235\\n\"}\n{\"page_content\":\"all five tasks in MIRAGE, an average score of the\\naccuracies will be measured to show how a given\\nsystem performs on medical QA in general.\\n4\\nThe MEDRAG Toolkit\\nRetrievers\\nCopora\\nLLMs\\nBM25\\nSPECTER\\nContriever\\nMedCPT\\nPubMed\\nTextbooks\\nStatPearls\\nWikipedia\\nGPT-4\\nMixtral\\nGPT-3.5\\nLlama-2\\nMEDITRON\\nPMC-LLaMA\\nQuestion\\nAnswer\\nIndexing\\nMedCorp\\nRetrieval\\nGeneration\\nFigure 2: Component overview of the MEDRAG toolkit.\\nTo comprehensively evaluate how different RAG\\nsystems perform on our MIRAGE benchmark, we\\npropose MEDRAG, a toolkit with systematic imple-\\nmentations of RAG for medical QA. As shown in\\nFigure 2, MEDRAG consists of three major compo-\\nnents: Corpora, Retrievers, and LLMs, which are\\nbriefly introduced in this section. More details of\\neach component can be found in the appendix.\\nCorpus\\n#Doc.\\n#Snippets\\nAvg. L\\nDomain\\nPubMed\\n23.9M\\n23.9M\\n296\\nBiomed.\\nStatPearls\\n9.3k\\n301.2k\\n119\\nClinics\\nTextbooks\\n18\\n125.8k\\n182\\nMedicine\\nWikipedia\\n6.5M\\n29.9M\\n162\\nGeneral\\nMedCorp\\n30.4M\\n54.2M\\n221\\nMixed\\nTable 3: Statistics of corpora in MEDRAG. #Doc.: num-\\nbers of raw documents; #Snippets: numbers of snippets\\n(chunks); Avg. L: average length of snippets.\\nFor corpora used in MEDRAG, we collect raw\\ndata from four different sources, including the com-\\nmonly used PubMed4 for all biomedical abstracts,\\nStatPearls5 for clinical decision support, medical\\nTextbooks (Jin et al., 2021) for domain-specific\\nknowledge, and Wikipedia for general knowledge.\\nTo the best of our knowledge, this is the first work\\nthat evaluates new corpora like StatPearls. We also\\nprovide a MedCorp corpus by combining all four\\ncorpora, facilitating cross-source retrieval. Each\\ncorpus is chunked into short snippets. Statistics of\\nused corpora are shown in Table 3.\\n4https:\\/\\/pubmed.ncbi.nlm.nih.gov\\/\\n5https:\\/\\/www.statpearls.com\\/\\nRetriever\\nType\\nSize\\nMetric\\nDomain\\nBM25\\nLexical\\n\\u2013\\nBM25\\nGeneral\\nContriever\\nSemantic\\n110M\\nIP\\nGeneral\\nSPECTER\\nSemantic\\n110M\\nL2\\nScientific\\nMedCPT\\nSemantic\\n109M\\nIP\\nBiomed.\\nTable 4: Statistics of Retrievers in MEDRAG, where IP\\nstands for inner product and L2 stands for L2 norm.\\nFor the retrieval algorithms, while many gen-\\neral and domain-specific retrievers have been pro-\\nposed (Remy et al., 2022; Ostendorff et al., 2022;\\nKarpukhin et al., 2020; Xiong et al., 2020), we only\\nselect some representative ones in MEDRAG due\\nto limited resources, including a lexical retriever\\n(BM25, Robertson et al., 2009), a general-domain\\nsemantic retriever (Contriever, Izacard et al., 2022),\\na scientific-domain retriever (SPECTER, Cohan\\net al., 2020), and a biomedical-domain retriever\\n(MedCPT, Jin et al., 2023a). Their statistics are\\npresented in Table 4. In our experiments, 32 snip-\\npets are retrieved by default. Additionally, we uti-\\nlize Reciprocal Rank Fusion (RRF, Cormack et al.,\\n2009) to combine results from different retrievers,\\nincluding RRF-2 (fusion of BM25 and MedCPT),\\nand RRF-4 (fusion of all four retrievers).\\nLLM\\nSize\\nContext\\nOpen\\nDomain\\nGPT-4\\nN\\/A\\n32,768\\nNo\\nGeneral\\nGPT-3.5\\nN\\/A\\n16,384\\nNo\\nGeneral\\nMixtral\\n8\\u00d77B\\n32,768\\nYes\\nGeneral\\nLlama-2\\n70B\\n4,096\\nYes\\nGeneral\\nMEDITRON\\n70B\\n4,096\\nYes\\nBiomed.\\nPMC-LLaMA\\n13B\\n2,048\\nYes\\nBiomed.\\nTable 5: Statistics of LLMs used in MEDRAG. Context:\\ncontext length of the LLM; Open: Open-source.\\nSimilarly, although various LLMs have emerged\\nin recent years (Singhal et al., 2023a,b; Taylor et al.,\\n2022; Luo et al., 2022; Yang et al., 2022), we select\\nseveral frequently used ones in MEDRAG, includ-\\ning the commercial GPT-3.5 and GPT-4 (OpenAI\\net al., 2023), the open-source Mixtral (Jiang et al.,\\n2024) and Llama-2 (Touvron et al., 2023b), and\\nthe biomedical domain-specific MEDITRON (Chen\\net al., 2023b) and PMC-LLaMA (Wu et al., 2023).\\nStatistics of the used LLMs are in Table 5. For\\nall LLMs, we concatenate and prepend retrieved\\nsnippets to the input, and perform chain-of-thought\\n(CoT) prompting (Wei et al., 2022) in MEDRAG\\nto fully leverage the reasoning capability of the\\nmodels. Temperatures are set to 0 for deterministic\\noutputs. CoT without RAG is used as the baseline.\\n6236\\n\"}\n\n... # only display 4 rows in JSON format, more are truncated due to length constraint based on max_tokens (5000)"}
{"role": "assistant", "content": "[Thought]: The email addresses of the authors are listed in the page content. The first author, Guangzhi Xiong, has the email address `hhu4zu@virginia.edu`. I will extract this email address and provide it as the final answer.\n[Action]:\nGenerateAnswer(answer='hhu4zu@virginia.edu')"}
{"role": "user", "content": "[Observation]: hhu4zu@virginia.edu"}
