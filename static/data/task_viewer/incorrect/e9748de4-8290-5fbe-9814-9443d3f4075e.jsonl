{"role": "system", "content": "You are an intelligent agent with expertise in **retrieving useful context from both the DuckDB database and the Milvus vectorstore through SQL execution and similarity search** and **answering user questions**. You will be given a natural language question concerning PDF files, along with the schema of both the database and the vectorstore. Your ultimate goal is to answer the input question with pre-defined answer format. The DuckDB database contains all parsed content of raw PDF files, while the Milvus vectorstore encodes specific column cells from the database as vectors. You can predict executable actions, interact with the hybrid environment (including database and vectorstore) across multiple turns, and retrieve necessary context until you are confident in resolving the question.\n\n--------\n\n## Task Description\nEach task consists of the following parts:\n\n[Question]: User question regarding the PDF, e.g., Is there any ...?\n[Answer Format]: it describes the format of the final answer, e.g., the answer is \"Yes\" or \"No\" without punctuation.\n[Anchor PDF]: Optional, a python str or list, the PDF(s) you must use to answer the question.\n[Reference PDF]: Optional, a python str or list, the PDF(s) you may use to answer the question.\n[Conference]: Optional, a python str or list, the conference(s) and year(s) of the relevant papers for retrieval.\n[Database Schema]: A detailed serialized schema of the DuckDB database for reference when generating SQL queries. It includes 1) tables, 2) columns and their data types, 3) descriptions for these schema items, and 4) primary key and foreign key constraints.\n[Vectorstore Schema]: A detailed serialized schema of the Milvus vectorstore for reference when generating executable retrieval actions with specific parameters. It includes 1) collections, 2) fields, 3) encodable (table, column) pairs in the relational database where the vectorized content originates, and 4) grammar for valid filter rules.\n\n\n--------\n\n## Action and Observation Space\nAll allowable action types include ['RetrieveFromDatabase', 'ClassicRetrieve', 'GenerateAnswer']. Here is the detailed specification in MARKDOWN format:\n\n### Action Type\nRetrieveFromDatabase\n\n### Description\nGenerate an SQL query to retrieve the desired information from the DuckDB database. Please refer to the concrete database schema to produce a valid and executable SQL.\n\n### Observation\nThe observation space is the execution result of the SQL query. You do not need to worry about the actual execution, we will perform it for you. If the SQL failed to execute, we will return the error message. Extremely long SQL output will be truncated.\n\n### Syntax and Parameters (MARKDOWN Format)\nRetrieveFromDatabase(sql: str)\n- sql: str, required. The concrete DuckDB SQL query to execute and retrieve results.\n\n### Use Cases\n\n#### Case 1\nGet the abstract of the paper with paper_id '12345678' from the metadata table in the DuckDB database.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT abstract FROM metadata WHERE paper_id = '12345678';\")\n\n\n#### Case 2\nFind which page in the paper with paper_id '12345678' contains Figure 3.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT pages.page_number FROM images JOIN pages JOIN metadata ON images.ref_page_id = pages.page_id AND pages.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '12345678' AND images.image_caption LIKE '%Figure 3%';\")\n\n\n----\n\n### Action Type\nClassicRetrieve\n\n### Description\nGiven a query text, retrieve relevant context from the Milvus vectorstore.\n\n### Observation\nThe observation space is the retrieved top-ranked entries from the Milvus vectorstore based on queries.\n\n### Syntax and Parameters (MARKDOWN Format)\nClassicRetrieve(query: str, limit: int = 5)\n- query: str, required. The query text will be encoded and used to search for relevant context. You can rephrase the original user question to obtain a more clear and structured query requirement.\n- limit: int, optional, default to 5. The number of top-ranked context to retrieve. Please set it to a positive integer to limit the number of returned results. Extremely large limit values may be truncated.\n\n### Use Cases\n\n#### Case 1\nRetrieve top 5 pieces about a certain topic.\n\n[Action]: ClassicRetrieve(query='Is there any work about the topic structured RAG?')\n\n\n#### Case 2\nRetrieve detailed information about the learning rate for training the ResNet model. The top 4 most relevant entries will be returned based on the query.\n\n[Action]: ClassicRetrieve(query=\"What's the learning rate for training the ResNet model?\", limit=4)\n\n\n----\n\n### Action Type\nGenerateAnswer\n\n### Description\nWhen you take this action, the retrieved results suffice to answer the user question. PLEASE STRICTLY ADHERE TO THE ANSWER FORMAT FOR THE CURRENT QUESTION.\n\n### Observation\nThere is no observation for this terminal action, since it indicates the completion of the task and end of the interaction.\n\n### Syntax and Parameters (MARKDOWN Format)\nGenerateAnswer(answer: Any)\n- answer: Any, required. The final answer to the user question. Please adhere to the answer format for the current question.\n\n### Use Cases\n\n#### Case 1\nThe answer to the user question is 42.\n\n[Action]: GenerateAnswer(answer=42)\n\n\n#### Case 2\nThe answer to the user question is a list of strings: ['Results', 'Discussion'].\n\n[Action]: GenerateAnswer(answer=['Results', 'Discussion'])\n\n\n\n--------\n\n## Interaction Framework\n\nThe main interaction procedure proceeds like this:\n\n----\n\n[Thought]: ... reasoning process, why to take this action ...\n[Action]: ... which action to take, please strictly conform to the action specification ...\n[Observation]: ... execution results or error message after taking the action ...\n\n... # more interleaved triplets of ([Thought], [Action], [Observation])\n\n[Thought]: ... reasoning process to produce the final answer ...\n[Action]: ... the terminate action `GenerateAnswer`, there is no further observation ...\n\n----\n\nIn general, the main interaction loop consists of an interleaved of triplets ([Thought], [Action], [Observation]), except the last `GenerateAnswer` action which does not have \"[Observation]:\". You need to predict the \"[Thought]: ...\" followed by the \"[Action]: ...\" for each turn, and we will execute your action in the environment and provide the \"[Observation]: ...\" for the previous action.\n\n--------\n\n## Suggestions or Hints for Agent Interaction\n\n1. Explore multiple retrieval strategies. For example:\n- Experiment with different (table, column) pairs to extract diverse types of information.\n- Query various embedding models (collections) to find the most relevant context.\n\n2. Combine both structured and unstructured data. Concretely:\n- Use SQL queries to retrieve precise facts and structured data. Pay special attention to morphological variations in cell values.\n- Perform similarity searches in the vectorstore to capture semantic relationships and hidden insights.\n\n3. Iterate and refine:\n- If SQL execution result is not satisfactory, try alternative SQL queries to explore the database content carefully.\n- If the vector-based neural retrieval is insufficient, try alternative approaches or parameter settings.\n- Use your findings to validate or enrich the final response.\n\n4. Ensure confidence. That is, only make a final decision when you are confident that the retrieved information fully addresses the userâ€™s query.\n\n\nRemember that, for each question, you only have 20 interaction turns at most. Now, let's start!\n"}
{"role": "user", "content": "[Question]: According to the paper that proposed Synapse, which other concurrent work performs the best? In the dataset that both papers applied, how many tasks are there?\n[Answer Format]: Your answer should be a Python list of 2 elements, the first is a string, the name of method, and the second is an integer, the number of tasks.\n[Anchor PDF]: '3ae0bebe-bf9c-5ff2-9721-620c3f53f5e9'\n[Database Schema]: The database schema for /home/htc981/workspace/project/HNS-RAG/data/database/ai_research/ai_research.sql is as follows:\n/* database ai_research: This database contains information about AI research papers. Each PDF file is represented or parsed via different views, e.g., pages, sections, figures, tables, and references. We also extract the concrete content inside each concrete element via OCR.\n*/\n/* table metadata: This table stores metadata about each paper, including the number of pages, paper path and paper id.\n*/\nCREATE TABLE IF NOT EXISTS metadata (\n\tpaper_id UUID, -- A unique identifier for this paper.\n\ttitle VARCHAR, -- The title of this paper.\n\tabstract VARCHAR, -- The abstract of this paper.\n\tnum_pages INTEGER, -- The number of pages in this paper.\n\tconference_full VARCHAR, -- The full name of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tconference_abbreviation VARCHAR, -- The abbreviation of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tpub_year INTEGER, -- The year when this paper was published.\n\tvolume VARCHAR, -- The volume of the conference where this paper was published. e.g. findings.\n\tdownload_url VARCHAR, -- The url from which the paper can be downloaded.\n\tbibtex VARCHAR, -- The bibtex of this paper.\n\tauthors VARCHAR[], -- The full names of authors of this paper.\n\tpdf_path VARCHAR, -- The path to the PDF file of this paper.\n\ttldr VARCHAR, -- A brief summary of the paper's main idea or findings generated by LLM based on title and abstract.\n\ttags VARCHAR[], -- Keywords representing the paper's topics, methods, or applications generated by LLM based on title and abstract.,\n\tPRIMARY KEY (paper_id)\n);\n/* table pages: This table stores information of the pages in the papers, including their content, size and their order within the paper. The pagesare extracted using PyMuPDF.\n*/\nCREATE TABLE IF NOT EXISTS pages (\n\tpage_id UUID, -- A unique identifier for each page.\n\tpage_number INTEGER, -- The page number in the current paper, starting from 1.\n\tpage_width INTEGER, -- The pixel width of the current page.\n\tpage_height INTEGER, -- The pixel height of the current page.\n\tpage_content VARCHAR, -- The content of the page.\n\tpage_summary VARCHAR, -- A brief summary of the page content, generated by LLM, focusing on key information and describing the page content.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (page_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table images: This table stores the information about images in each paper. The images are extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS images (\n\timage_id UUID, -- The unique identifier of the image.\n\timage_caption VARCHAR, -- The caption of this image, \"\" if it doesn't have one.\n\timage_summary VARCHAR, -- A brief summary of the image, generated by LLM, focusing on key information and describing the image.\n\tbounding_box INTEGER[4], -- The bounding box of the figure in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height which are used to determine the shape of the rectangle.\n\tordinal INTEGER, -- Each figure is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (image_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table chunks: This table contains the information of each chunk of text (chunk size = 512 tokens with no overlapping) in each page of the paper. A chunk is a sub-text that is extracted from the main text using langchain, such as a sentence or a paragraph.\n*/\nCREATE TABLE IF NOT EXISTS chunks (\n\tchunk_id UUID, -- A unique identifier for each chunk of text.\n\ttext_content VARCHAR, -- The text content of the current chunk.\n\tordinal INTEGER, -- Each chunk is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (chunk_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table tables: This table stores information about tables extracted from pages using MinerU, including content (in html format), bounding box and summary of each table generated by LLM.\n*/\nCREATE TABLE IF NOT EXISTS tables (\n\ttable_id UUID, -- A unique identifier for each table.\n\ttable_caption VARCHAR, -- Caption of the table, showing key information of the table.\n\ttable_content VARCHAR, -- The content of the table in html format.\n\ttable_summary VARCHAR, -- A brief summary of the table content generated by LLM, focusing on key information and describing the table content.\n\tbounding_box INTEGER[4], -- The bounding box of the table in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height.\n\tordinal INTEGER, -- Each table is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this table is located.,\n\tPRIMARY KEY (table_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table sections: This table contains the text content of each section in the paper, e.g. `Introduction`, `Experiment`, `Conclusion`, `Reference`. The sections are extracted using PyMuPDF or MinerU.\n*/\nCREATE TABLE IF NOT EXISTS sections (\n\tsection_id UUID, -- A unique identifier for each section of text.\n\tsection_title VARCHAR, -- The title of the current section.\n\tsection_content VARCHAR, -- The text content of the current section.\n\tsection_summary VARCHAR, -- A brief summary of the section content generated by LLM, focusing on key information and describing the section content.\n\tordinal INTEGER, -- Each section is labeled with one distinct integer number in the paper, which starts from 0.\n\tpage_numbers INTEGER[], -- A list of page numbers where current section is located in the relevant paper.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (section_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table equations: This table stores information about equations extracted from pages using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS equations (\n\tequation_id UUID, -- A unique identifier for each equation.\n\tequation_content VARCHAR, -- Content of the equation in latex format.\n\tordinal INTEGER, -- Each equation is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the paper ID in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the page ID in the `pages` table where this equation is located.,\n\tPRIMARY KEY (equation_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table reference: This table stores information about references extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS reference (\n\treference_id UUID, -- A unique identifier for each reference.\n\treference_content VARCHAR, -- Content of the reference.\n\tordinal INTEGER, -- Each reference is labeled with one distinct integer number according to its order in the paper, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this reference is located.,\n\tPRIMARY KEY (reference_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n[Vectorstore Schema]: The vectorstore schema for ai_research is as follows. You can try collections with different encoding models or modalities:\n[\n    {\n        \"collection_name\": \"text_bm25_en\",\n        \"modality\": \"text\",\n        \"embed_type\": \"bm25\",\n        \"embed_model\": \"en\",\n        \"description\": \"This collection is used to store the sparse embeddings generated by the BM25 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric inner-product (IP).\",\n        \"fields\": [\n            {\n                \"name\": \"id\",\n                \"dtype\": \"INT64\",\n                \"is_primary\": true,\n                \"description\": \"The unique id for each encoded text vector in this collection.\"\n            },\n            {\n                \"name\": \"vector\",\n                \"dtype\": \"SPARSE_FLOAT_VECTOR\",\n                \"description\": \"The encoded sparse vector of the text content generated by the BM25 model. Note that, the raw text content can be uniquely identified by the triplet fields below: `table_name`, `column_name`, `primary_key`.\"\n            },\n            {\n                \"name\": \"pdf_id\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The unique id of the PDF file stored in the relational database that the encoded text belongs to. This field can be used to quickly filter the search space.\"\n            },\n            {\n                \"name\": \"page_number\",\n                \"dtype\": \"INT16\",\n                \"description\": \"The page number in the PDF file that the encoded text belongs to (starting from 1). This field can be used to quickly filter the search space. Value -1 means unknown.\"\n            },\n            {\n                \"name\": \"table_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which table in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"column_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which column under `table_name` in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"primary_key\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The primary key value of `table_name` (or which row) in the relational database that the text content belongs to. Note that, the triplet (`table_name`, `column_name`, `primary_key`) can be used to construct a one-to-one mapping between the `text` field in the current vectorstore and the cell entry in the relational database.\"\n            }\n        ]\n    },\n    {\n        \"collection_name\": \"text_sentence_transformers_all_minilm_l6_v2\",\n        \"modality\": \"text\",\n        \"embed_type\": \"sentence_transformers\",\n        \"embed_model\": \"all-MiniLM-L6-v2\",\n        \"description\": \"This collection is used to store the embeddings generated by the all-MiniLM-L6-v2 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric COSINE.\",\n        \"fields\": \"The fields of this collection are similar to the `text_bm25_en` collection.\"\n    }\n]\n\nThe following lists all encodable (table_name, column_name, encode_modality) information from the corresponding DuckDB database, where the encoded vector entries are sourced. Note that, for text modality, we directly encode cell values from the `table_name.column_name`; for image modality, we encode the cropped images for `page_number` in `pdf_id` with bounding boxes from `table_name.column_name`. You can leverage them for filter condition during similarity search:\n[\n    [\n        \"metadata\",\n        \"title\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"abstract\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"bibtex\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"tldr\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_content\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_summary\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_caption\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_summary\",\n        \"text\"\n    ],\n    [\n        \"chunks\",\n        \"text_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_caption\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_summary\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_title\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_content\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_summary\",\n        \"text\"\n    ],\n    [\n        \"equations\",\n        \"equation_content\",\n        \"text\"\n    ],\n    [\n        \"reference\",\n        \"reference_content\",\n        \"text\"\n    ]\n]\n\nHere are the operators that you can use in the filtering condition for the vectorstore:\n{\n    \"operators\": {\n        \"logical\": [\n            {\n                \"symbol\": \"not\",\n                \"example\": \"not expr\",\n                \"description\": \"True if expr is false.\"\n            },\n            {\n                \"symbol\": \"and\",\n                \"example\": \"expr1 and expr2\",\n                \"description\": \"True if both expr1 and expr2 are true.\"\n            },\n            {\n                \"symbol\": \"or\",\n                \"example\": \"expr1 or expr2\",\n                \"description\": \"True if either expr1 or expr2 are true.\"\n            }\n        ],\n        \"binary arithmetic\": [\n            {\n                \"symbol\": \"+\",\n                \"example\": \"a + b\",\n                \"description\": \"Add the two operands.\"\n            },\n            {\n                \"symbol\": \"-\",\n                \"example\": \"a - b\",\n                \"description\": \"Subtract the second operand from the first operand.\"\n            },\n            {\n                \"symbol\": \"*\",\n                \"example\": \"a * b\",\n                \"description\": \"Multiply the two operands.\"\n            },\n            {\n                \"symbol\": \"/\",\n                \"example\": \"a / b\",\n                \"description\": \"Divide the first operand by the second operand.\"\n            },\n            {\n                \"symbol\": \"**\",\n                \"example\": \"a ** b\",\n                \"description\": \"Raise the first operand to the power of the second operand.\"\n            },\n            {\n                \"symbol\": \"%\",\n                \"example\": \"a % b\",\n                \"description\": \"Divide the first operand by the second operand and yield the remainder portion.\"\n            }\n        ],\n        \"relational\": [\n            {\n                \"symbol\": \"<\",\n                \"example\": \"a < b\",\n                \"description\": \"True if a is less than b.\"\n            },\n            {\n                \"symbol\": \">\",\n                \"example\": \"a > b\",\n                \"description\": \"True if a is greater than b.\"\n            },\n            {\n                \"symbol\": \"==\",\n                \"example\": \"a == b\",\n                \"description\": \"True if a is equal to b. Please use **two** equal signs for equality comparison.\"\n            },\n            {\n                \"symbol\": \"!=\",\n                \"example\": \"a != b\",\n                \"description\": \"True if a is not equal to b.\"\n            },\n            {\n                \"symbol\": \"<=\",\n                \"example\": \"a <= b\",\n                \"description\": \"True if a is less than or equal to b.\"\n            },\n            {\n                \"symbol\": \">=\",\n                \"example\": \"a >= b\",\n                \"description\": \"True if a is greater than or equal to b.\"\n            },\n            {\n                \"symbol\": \"in\",\n                \"example\": \"a in [b, c, ...]\",\n                \"description\": \"True if a is equal to any of the values in the list.\"\n            }\n        ],\n        \"array operations\": [\n            {\n                \"symbol\": \"[]\",\n                \"example\": \"bbox[0]\",\n                \"description\": \"This expression gets the first element in array bbox. For example, 'bbox[0] < 50' evaluates to true if the value of bbox[0] is less than 50.\"\n            },\n            {\n                \"symbol\": \"array_contains\",\n                \"example\": \"array_contains(bbox, 100)\",\n                \"description\": \"This expression evaluates to true if array bbox contains element 100.\"\n            },\n            {\n                \"symbol\": \"array_length\",\n                \"example\": \"array_length(int_array) == 4\",\n                \"description\": \"This expression evaluates to true if int_array contains exactly 4 elements.\"\n            }\n        ]\n    },\n    \"use cases\": [\n        {\n            \"example\": \"table_name == 'chunks' and column_name == 'text_content'\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and column_name equal to 'text_content'.\"\n        },\n        {\n            \"example\": \"table_name == 'chunks' and primary_key in ['123', '456', '789']\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and primary_key equal to any of the values in the list ['123', '456', '789'].\"\n        },\n        {\n            \"example\": \"bbox[0] + bbox[2] <= 100 and bbox[1] + bbox[3] <= 300 and pdf_id == '123456' and page_number == 1\",\n            \"description\": \"For image modality, filter results to include only image regions that are entirely within the upper-left quadrant of page 1 in the PDF with ID '123456', assuming the page dimensions are 200 (width) x 600 (height).\"\n        }\n    ]\n}"}
{"role": "assistant", "content": "[Thought]: To answer the question, I need to find the paper that proposed Synapse and identify which other concurrent work performs the best according to that paper. Additionally, I need to find out how many tasks are there in the dataset that both papers applied. I will start by retrieving the metadata and content of the paper with the given paper_id.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT title, abstract, page_number, page_content FROM metadata JOIN pages ON metadata.paper_id = pages.ref_paper_id WHERE metadata.paper_id = '3ae0bebe-bf9c-5ff2-9721-620c3f53f5e9';\")"}
{"role": "user", "content": "[Observation]:\n{\"title\":\"Synapse: Trajectory-as-Exemplar Prompting with Memory for Computer Control\",\"abstract\":\"Building agents with large language models (LLMs) for computer control is a burgeoning research area, where the agent receives computer states and performs actions to complete complex tasks. Previous computer agents have demonstrated the benefits of in-context learning (ICL); however, their performance is hindered by several issues. First, the limited context length of LLMs and complex computer states restrict the number of exemplars, as a single webpage can consume the entire context. Second, the exemplars in current methods, such as high-level plans and multi-choice questions, cannot represent complete trajectories, leading to suboptimal performance in long-horizon tasks. Third, existing computer agents rely on task-specific exemplars and overlook the similarity among tasks, resulting in poor generalization to novel tasks. To address these challenges, we introduce Synapse, a computer agent featuring three key components: i) state abstraction, which filters out task-irrelevant information from raw states, allowing more exemplars within the limited context, ii) trajectory-as-exemplar prompting, which prompts the LLM with complete trajectories of the abstracted states and actions for improved multi-step decision-making, and iii) exemplar memory, which stores the embeddings of exemplars and retrieves them via similarity search for generalization to novel tasks. We evaluate Synapse on MiniWoB++, a standard task suite, and Mind2Web, a real-world website benchmark. In MiniWoB++, Synapse achieves a 99.2% average success rate (a 10% relative improvement) across 64 tasks using demonstrations from only 48 tasks. Notably, Synapse is the first ICL method to solve the book-flight task in MiniWoB++. Synapse also exhibits a 56% relative improvement in average step success rate over the previous state-of-the-art prompting scheme in Mind2Web.\",\"page_number\":1,\"page_content\":\"Foundation Models for Decision Making Workshop at NeurIPS 2023\\nSYNAPSE:\\nTRAJECTORY-AS-EXEMPLAR PROMPTING\\nWITH MEMORY FOR COMPUTER CONTROL\\nLongtao Zheng\\nRundong Wang\\nXinrun Wang\\nBo An\\nNanyang Technological University, Singapore\\nlongtao001@e.ntu.edu.sg\\nABSTRACT\\nBuilding agents with large language models (LLMs) for computer control is a\\nburgeoning research area, where the agent receives computer states and performs\\nactions to complete complex tasks. Previous computer agents have demonstrated\\nthe benefits of in-context learning (ICL); however, their performance is hindered\\nby several issues. First, the limited context length of LLMs and complex com-\\nputer states restrict the number of exemplars, as a single webpage can consume\\nthe entire context. Second, the exemplars in current methods, such as high-level\\nplans and multi-choice questions, cannot represent complete trajectories, lead-\\ning to suboptimal performance in long-horizon tasks. Third, existing computer\\nagents rely on task-specific exemplars and overlook the similarity among tasks,\\nresulting in poor generalization to novel tasks. To address these challenges, we\\nintroduce SYNAPSE, a computer agent featuring three key components: i) state\\nabstraction, which filters out task-irrelevant information from raw states, allowing\\nmore exemplars within the limited context, ii) trajectory-as-exemplar prompting,\\nwhich prompts the LLM with complete trajectories of the abstracted states and\\nactions to improve multi-step decision-making, and iii) exemplar memory, which\\nstores the embeddings of exemplars and retrieves them via similarity search for\\ngeneralization to novel tasks. We evaluate SYNAPSE on MiniWoB++, a standard\\ntask suite, and Mind2Web, a real-world website benchmark. In MiniWoB++,\\nSYNAPSE achieves a 99.2% average success rate (a 10% relative improvement)\\nacross 64 tasks using demonstrations from only 48 tasks. Notably, SYNAPSE is\\nthe first ICL method to solve the book-flight task in MiniWoB++. SYNAPSE also\\nexhibits a 56% relative improvement in average step success rate over the previous\\nstate-of-the-art prompting scheme in Mind2Web.1\\n1\\nINTRODUCTION\\nCreating agents capable of performing complex tasks to reduce human effort in routine operations is\\na long-standing goal in artificial intelligence (DeepMind Interactive Agents Team, 2021). A critical\\nand pragmatic step towards this ambitious vision is to develop agents that are proficient in computer\\ncontrol (Shi et al., 2017; Liu et al., 2018). Such an agent perceives states of the computer, e.g.,\\nscreenshots or webpage HTML, and performs actions via keyboard and mouse to complete tasks\\nspecified in natural language, such as flight booking and email management. Different from training-\\nbased methods (Humphreys et al., 2022) that rely on large-scale behavioral cloning (BC) (Pomer-\\nleau, 1989) and deep reinforcement learning (RL) (Sutton and Barto, 2018), recent studies highlight\\nthe advantages of in-context learning (ICL) (Brown et al., 2020; Wei et al., 2022a;b) in achiev-\\ning general and data-efficient computer control (Yao et al., 2022a; Kim et al., 2023; Deng et al.,\\n2023). Specifically, these computer agents utilize few-shot demonstrations, also termed exemplars,\\nto prompt large language models (LLMs) (Brown et al., 2020; Chowdhery et al., 2022; OpenAI,\\n2023, inter alia) to generate actions. For example, RCI (Kim et al., 2023) prompts LLMs to gener-\\nate a high-level plan and grounds each action based on the plan. Concurrent with our work, Deng\\net al. (2023) introduce Mind2Web as a benchmark for real-world web navigation and a computer\\nagent, MindAct. It prompts LLMs to predict the next action using multi-choice questions (MCQ),\\nwith candidate choices generated by an element-ranking model.\\n1Code available at https:\\/\\/ltzheng.github.io\\/Synapse.\\n1\\n\"}\n{\"title\":\"Synapse: Trajectory-as-Exemplar Prompting with Memory for Computer Control\",\"abstract\":\"Building agents with large language models (LLMs) for computer control is a burgeoning research area, where the agent receives computer states and performs actions to complete complex tasks. Previous computer agents have demonstrated the benefits of in-context learning (ICL); however, their performance is hindered by several issues. First, the limited context length of LLMs and complex computer states restrict the number of exemplars, as a single webpage can consume the entire context. Second, the exemplars in current methods, such as high-level plans and multi-choice questions, cannot represent complete trajectories, leading to suboptimal performance in long-horizon tasks. Third, existing computer agents rely on task-specific exemplars and overlook the similarity among tasks, resulting in poor generalization to novel tasks. To address these challenges, we introduce Synapse, a computer agent featuring three key components: i) state abstraction, which filters out task-irrelevant information from raw states, allowing more exemplars within the limited context, ii) trajectory-as-exemplar prompting, which prompts the LLM with complete trajectories of the abstracted states and actions for improved multi-step decision-making, and iii) exemplar memory, which stores the embeddings of exemplars and retrieves them via similarity search for generalization to novel tasks. We evaluate Synapse on MiniWoB++, a standard task suite, and Mind2Web, a real-world website benchmark. In MiniWoB++, Synapse achieves a 99.2% average success rate (a 10% relative improvement) across 64 tasks using demonstrations from only 48 tasks. Notably, Synapse is the first ICL method to solve the book-flight task in MiniWoB++. Synapse also exhibits a 56% relative improvement in average step success rate over the previous state-of-the-art prompting scheme in Mind2Web.\",\"page_number\":2,\"page_content\":\"Foundation Models for Decision Making Workshop at NeurIPS 2023\\nEnvironment\\nExemplary Trajectories\\nSimilarity\\nIII. Exemplar Memory\\nHistory\\nTask: Book a flight from ...\\nObservation: <html> \\u2026 <\\/html>\\nAction: agent.click(...)\\nObservation: <html> \\u2026 <\\/html>\\nNext Action Action: agent.type(...)\\nRaw State\\nTask: Book a flight from ...\\n<html>\\n<head>\\n<title>Airbnb<\\/title>\\n<\\/head>\\n<body><h1>...<\\/h1><\\/body>\\n<\\/html>\\nClean State\\nTask: Book a flight from ...\\n<html>\\n<head>\\n<title>Airbnb<\\/title>\\n<\\/head>  \\n<input id=\\\"where\\\" type=\\\"text\\\">\\n<\\/html>\\nState Abstraction Prompts\\nI. State Abstraction\\nII. Trajectory-as-Exemplar\\nTask\\nMetadata\\nEmbedding\\nModels\\nbook-flight\\n[1.1, 2.8, \\u2026]\\nemail-inbox\\n[2.4, 0.6, \\u2026]\\nLarge Language Models\\nSearch\\nFigure 1: SYNAPSE consists of three main components. The process begins with state abstraction,\\nwhere raw computer states (e.g., the HTML of webpages) are processed into concise task-relevant\\nobservations via few-shot learning of the LLM. This step reduces the number of tokens needed for\\neach state, a prerequisite for the second component: trajectory-as-exemplar (TaE) prompting. In\\nTaE prompting, the LLM is prompted with exemplary trajectories (a sequence of abstracted states\\nand actions) and the current history to determine the next action. These prompts are retrieved from\\nthe exemplar memory using similarity search. The retrieval process utilizes the embeddings of\\ntask metadata, with each metadata mapped to the corresponding exemplars. Fig. 2 further shows an\\nillustrative comparison of TaE prompting with the prompting schemes of other computer agents.\\nDespite the promising results of previous LLM-based computer agents, they still fail to solve some\\ntasks within MiniWoB++ (Shi et al., 2017; Liu et al., 2018), a relatively simplified computer control\\ntask suite, mainly due to the following issues. First, the limited context length of LLMs, combined\\nwith complex computer states, poses challenges for few-shot learning. For example, the book-flight\\ntask in MiniWoB++ is particularly challenging due to the extensive length of the webpage dis-\\nplaying flight details. Also, the task-irrelevant information in raw states can distract LLMs from\\ngenerating correct actions. Second, the exemplar structures used by existing computer agents can\\nlead to error accumulation in multi-round LLM queries and struggle to capture the complete tra-\\njectory information. Specifically, existing computer agents query LLMs at each step, and neither\\nhigh-level plans nor MCQs can represent full trajectories. For example, even when prompted with a\\ncorrect step-by-step plan and previous actions, RCI may still incorrectly predict the next action. As\\na result, existing ICL methods struggle to solve long-horizon tasks. Even for simplified tasks, they\\nstill rely on self-correction. Third, current computer agents require task-specific exemplars within\\na predefined scope. For example, in MiniWoB++, both email-inbox and email-inbox-nl handle\\nemail-related tasks. Similarly, multi-orderings and multi-layouts share similar interfaces. However,\\nexisting methods overlook this task similarity and hard-code the mapping from tasks to exemplars.\\nTo address these challenges, we present SYNAPSE, an LLM-powered computer agent featuring a\\nnovel prompting scheme and a memory mechanism. As illustrated in Fig. 1, SYNAPSE has three\\ncore components: i) state abstraction, which extracts task-relevant observations from raw states to\\nreduce the token length per trajectory, ii) trajectory-as-exemplar (TaE) prompting, which utilizes full\\nsuccessful trajectories as few-shot exemplars to prompt the LLM for enhanced multi-step decision-\\nmaking, and iii) exemplar memory, which stores successful trajectories and retrieves relevant ones\\nvia similarity search for generalization to novel tasks.\\nWe thoroughly evaluate SYNAPSE on two benchmarks: MiniWoB++ (Shi et al., 2017; Liu et al.,\\n2018), a standard research task suite, and Mind2Web (Deng et al., 2023), a dataset across diverse\\ndomains of real-world web navigation. In MiniWoB++, SYNAPSE is the first ICL method that\\nachieves human-level performance (Fig. 3). Specifically, SYNAPSE solves 64 tasks with a success\\nrate of 99.2% using demonstrations from only 48 tasks without relying on self-correction. In com-\\nparison, the current ICL state-of-the-art (SOTA) approach (Kim et al., 2023) is limited to handling\\n54 tasks, requiring task-specific demonstrations for each. Compared to BC+RL and fine-tuning\\nSOTA baselines, SYNAPSE achieves superior performance while being simpler, more flexible, and\\n2\\n\"}\n{\"title\":\"Synapse: Trajectory-as-Exemplar Prompting with Memory for Computer Control\",\"abstract\":\"Building agents with large language models (LLMs) for computer control is a burgeoning research area, where the agent receives computer states and performs actions to complete complex tasks. Previous computer agents have demonstrated the benefits of in-context learning (ICL); however, their performance is hindered by several issues. First, the limited context length of LLMs and complex computer states restrict the number of exemplars, as a single webpage can consume the entire context. Second, the exemplars in current methods, such as high-level plans and multi-choice questions, cannot represent complete trajectories, leading to suboptimal performance in long-horizon tasks. Third, existing computer agents rely on task-specific exemplars and overlook the similarity among tasks, resulting in poor generalization to novel tasks. To address these challenges, we introduce Synapse, a computer agent featuring three key components: i) state abstraction, which filters out task-irrelevant information from raw states, allowing more exemplars within the limited context, ii) trajectory-as-exemplar prompting, which prompts the LLM with complete trajectories of the abstracted states and actions for improved multi-step decision-making, and iii) exemplar memory, which stores the embeddings of exemplars and retrieves them via similarity search for generalization to novel tasks. We evaluate Synapse on MiniWoB++, a standard task suite, and Mind2Web, a real-world website benchmark. In MiniWoB++, Synapse achieves a 99.2% average success rate (a 10% relative improvement) across 64 tasks using demonstrations from only 48 tasks. Notably, Synapse is the first ICL method to solve the book-flight task in MiniWoB++. Synapse also exhibits a 56% relative improvement in average step success rate over the previous state-of-the-art prompting scheme in Mind2Web.\",\"page_number\":3,\"page_content\":\"Foundation Models for Decision Making Workshop at NeurIPS 2023\\nmore sample-efficient. A notable achievement is its success on the book-flight task, which requires\\nlong-horizon decision-making under intricate states. We further demonstrate the effectiveness of our\\napproach in Mind2Web by incrementally augmenting the LLM with three components of SYNAPSE,\\ni.e., state abstraction, TaE prompting, and exemplar memory. When the underlying LLM is GPT-3.5,\\nwe achieve improvements of 32%, 50%, and 56% in the step success rate over MindAct, the SOTA\\nICL method in this domain. When we use CodeLlama-7B (Roziere et al., 2023), SYNAPSE also\\nachieves an average 2.5\\u00d7 step success rate compared to MindAct. These experiments showcase the\\nsuperiority of SYNAPSE over existing computer agents in both standard and real-world benchmarks.\\n2\\nRELATED WORK\\nBuilding Agents with LLMs.\\nThere has been increasing attention on building autonomous agents\\nwith LLMs (Yang et al., 2023; Mialon et al., 2023; Xi et al., 2023; Park et al., 2023). Huang et al.\\n(2022) and Brohan et al. (2023) combined the LLM-generated plan with an embedding and a value\\nfunction to determine robot policies, respectively. Inner Monologue (Huang et al., 2023) incorpo-\\nrated environment feedback into a closed-loop system. These methods focused on prompting for\\nbetter high-level semantic plans and relied on BC or RL for low-level motor control policies. Unlike\\nrobotics, low-level actions for computer control are highly semantic, and the effective prompting\\nscheme for directly grounding actions remains unexplored. To address this, SYNAPSE proposes\\ntrajectory-as-exemplar prompting for directly grounding these actions. Recent efforts to improve\\nthe capabilities of reasoning, planning, and coding of LLMs, such as chain-of-thought (Wei et al.,\\n2022a; Kojima et al., 2022), least-to-most (Zhou et al., 2022), ReAct (Yao et al., 2022a), tree-of-\\nthoughts (Yao et al., 2023), Reflexion (Shinn et al., 2023), and self-debugging (Chen et al., 2023),\\ncan be combined with SYNAPSE to improve decision-making. The methods that leveraged external\\ntools (Wu et al., 2023a; Shen et al., 2023; Schick et al., 2023; Lu et al., 2023; Xu et al., 2023) are\\nalso orthogonal to SYNAPSE. Code as Policies (Liang et al., 2023) and ProgPrompt (Singh et al.,\\n2023) formulated agent policies as code generation. Similarly, SYNAPSE can be strengthened using\\ncode for both state abstraction and action generation. Voyager (Wang et al., 2023a) used a skill\\nlibrary for life-long skill acquisition, which also complements our framework. Wu et al. (2023b)\\nalso identified the issue of limited context, using a pretrained question-answering language model\\nto filter states, similar to MindAct. In comparison, our state-abstraction principle can leverage both\\nLLMs (few-shot learning) and pretrained state abstraction models.\\nAgents for Computer Control.\\nIn the pursuit of creating agents capable of human-like com-\\nputer interactions, MiniWoB++ task suite (Shi et al., 2017; Liu et al., 2018) has become a standard\\nbenchmark. Early attempts to solve MiniWoB++ primarily used BC and RL (Shi et al., 2017; Liu\\net al., 2018; Gur et al., 2018; Jia et al., 2018; Gur et al., 2021), which were not sufficient to achieve\\nhuman-level performance. A notable breakthrough came with CC-Net (Humphreys et al., 2022),\\nwhich achieved human-level performance but required an extensive dataset of 2.4 million demon-\\nstrations, equivalent to 6,300 hours of human effort. However, it is challenging to generalize this\\napproach for new tasks and user customization. WebN-T5 (Gur et al., 2023a), a fine-tuned variant\\nof the pretrained T5 model (Raffel et al., 2020), was trained on 12,000 demonstrations across 56\\ntasks. Similarly, WebGUM used 346,827 demonstrations to solve them. However, these fine-tuned\\nLLMs still demanded a large amount of data and fell short of human performance in MiniWoB++.\\nWebGPT (Nakano et al., 2021) and WebShop (Yao et al., 2022b), which operated in web-browsing\\nenvironments, focused more on refining search queries rather than on general computer control.\\nRecently, RCI (Kim et al., 2023) employed recursive self-correction to solve MiniWoB++ with a\\nsuccess rate of 90.6% in 54 tasks. However, it relied on task-specific exemplars, which limited its\\ngeneralization to novel scenarios. In contrast, SYNAPSE achieves better performance in MiniWoB++\\nwithout relying on self-correction, using demonstrations from fewer tasks. There is also a lot of con-\\ncurrent work in building computer agents and benchmarks. AdaPlanner (Sun et al., 2023) utilized\\nenvironment feedback for self-correction and achieved a success rate of 92.9% in 53 tasks, but it\\nhad similar issues to RCI. Pix2Act (Shaw et al., 2023) solved 59 MiniWoB++ tasks with tree search\\nand BC on 1.3 million demonstrations. WebAgent (Gur et al., 2023b) employed a small element-\\nranking model for HTML state filtering and an LLM for few-shot action generation, but it did not\\ninvestigate the exemplar structure and memory. Among many sophisticated benchmarks, such as\\nMind2Web (Deng et al., 2023), AgentBench (Liu et al., 2023a), WebArena (Zhou et al., 2023), and\\nAndroid in the Wild (Rawles et al., 2023), we choose Mind2Web for the real-world evaluation.\\n3\\n\"}\n\n... # only display 3 rows in JSON format, more are truncated due to length constraint based on max_tokens (5000)"}
{"role": "assistant", "content": "[Thought]: The abstract and content of the paper indicate that Synapse is evaluated on two benchmarks: MiniWoB++ and Mind2Web. The paper mentions that Synapse outperformed other methods, particularly MindAct, on Mind2Web. To find the number of tasks in MiniWoB++, I will search for the specific section in the paper that discusses this.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT page_number, page_content FROM pages WHERE ref_paper_id = '3ae0bebe-bf9c-5ff2-9721-620c3f53f5e9' AND page_content LIKE '%MiniWoB++%' AND page_content LIKE '%tasks%';\")"}
{"role": "user", "content": "[Observation]:\n{\"page_number\":1,\"page_content\":\"Foundation Models for Decision Making Workshop at NeurIPS 2023\\nSYNAPSE:\\nTRAJECTORY-AS-EXEMPLAR PROMPTING\\nWITH MEMORY FOR COMPUTER CONTROL\\nLongtao Zheng\\nRundong Wang\\nXinrun Wang\\nBo An\\nNanyang Technological University, Singapore\\nlongtao001@e.ntu.edu.sg\\nABSTRACT\\nBuilding agents with large language models (LLMs) for computer control is a\\nburgeoning research area, where the agent receives computer states and performs\\nactions to complete complex tasks. Previous computer agents have demonstrated\\nthe benefits of in-context learning (ICL); however, their performance is hindered\\nby several issues. First, the limited context length of LLMs and complex com-\\nputer states restrict the number of exemplars, as a single webpage can consume\\nthe entire context. Second, the exemplars in current methods, such as high-level\\nplans and multi-choice questions, cannot represent complete trajectories, lead-\\ning to suboptimal performance in long-horizon tasks. Third, existing computer\\nagents rely on task-specific exemplars and overlook the similarity among tasks,\\nresulting in poor generalization to novel tasks. To address these challenges, we\\nintroduce SYNAPSE, a computer agent featuring three key components: i) state\\nabstraction, which filters out task-irrelevant information from raw states, allowing\\nmore exemplars within the limited context, ii) trajectory-as-exemplar prompting,\\nwhich prompts the LLM with complete trajectories of the abstracted states and\\nactions to improve multi-step decision-making, and iii) exemplar memory, which\\nstores the embeddings of exemplars and retrieves them via similarity search for\\ngeneralization to novel tasks. We evaluate SYNAPSE on MiniWoB++, a standard\\ntask suite, and Mind2Web, a real-world website benchmark. In MiniWoB++,\\nSYNAPSE achieves a 99.2% average success rate (a 10% relative improvement)\\nacross 64 tasks using demonstrations from only 48 tasks. Notably, SYNAPSE is\\nthe first ICL method to solve the book-flight task in MiniWoB++. SYNAPSE also\\nexhibits a 56% relative improvement in average step success rate over the previous\\nstate-of-the-art prompting scheme in Mind2Web.1\\n1\\nINTRODUCTION\\nCreating agents capable of performing complex tasks to reduce human effort in routine operations is\\na long-standing goal in artificial intelligence (DeepMind Interactive Agents Team, 2021). A critical\\nand pragmatic step towards this ambitious vision is to develop agents that are proficient in computer\\ncontrol (Shi et al., 2017; Liu et al., 2018). Such an agent perceives states of the computer, e.g.,\\nscreenshots or webpage HTML, and performs actions via keyboard and mouse to complete tasks\\nspecified in natural language, such as flight booking and email management. Different from training-\\nbased methods (Humphreys et al., 2022) that rely on large-scale behavioral cloning (BC) (Pomer-\\nleau, 1989) and deep reinforcement learning (RL) (Sutton and Barto, 2018), recent studies highlight\\nthe advantages of in-context learning (ICL) (Brown et al., 2020; Wei et al., 2022a;b) in achiev-\\ning general and data-efficient computer control (Yao et al., 2022a; Kim et al., 2023; Deng et al.,\\n2023). Specifically, these computer agents utilize few-shot demonstrations, also termed exemplars,\\nto prompt large language models (LLMs) (Brown et al., 2020; Chowdhery et al., 2022; OpenAI,\\n2023, inter alia) to generate actions. For example, RCI (Kim et al., 2023) prompts LLMs to gener-\\nate a high-level plan and grounds each action based on the plan. Concurrent with our work, Deng\\net al. (2023) introduce Mind2Web as a benchmark for real-world web navigation and a computer\\nagent, MindAct. It prompts LLMs to predict the next action using multi-choice questions (MCQ),\\nwith candidate choices generated by an element-ranking model.\\n1Code available at https:\\/\\/ltzheng.github.io\\/Synapse.\\n1\\n\"}\n{\"page_number\":2,\"page_content\":\"Foundation Models for Decision Making Workshop at NeurIPS 2023\\nEnvironment\\nExemplary Trajectories\\nSimilarity\\nIII. Exemplar Memory\\nHistory\\nTask: Book a flight from ...\\nObservation: <html> \\u2026 <\\/html>\\nAction: agent.click(...)\\nObservation: <html> \\u2026 <\\/html>\\nNext Action Action: agent.type(...)\\nRaw State\\nTask: Book a flight from ...\\n<html>\\n<head>\\n<title>Airbnb<\\/title>\\n<\\/head>\\n<body><h1>...<\\/h1><\\/body>\\n<\\/html>\\nClean State\\nTask: Book a flight from ...\\n<html>\\n<head>\\n<title>Airbnb<\\/title>\\n<\\/head>  \\n<input id=\\\"where\\\" type=\\\"text\\\">\\n<\\/html>\\nState Abstraction Prompts\\nI. State Abstraction\\nII. Trajectory-as-Exemplar\\nTask\\nMetadata\\nEmbedding\\nModels\\nbook-flight\\n[1.1, 2.8, \\u2026]\\nemail-inbox\\n[2.4, 0.6, \\u2026]\\nLarge Language Models\\nSearch\\nFigure 1: SYNAPSE consists of three main components. The process begins with state abstraction,\\nwhere raw computer states (e.g., the HTML of webpages) are processed into concise task-relevant\\nobservations via few-shot learning of the LLM. This step reduces the number of tokens needed for\\neach state, a prerequisite for the second component: trajectory-as-exemplar (TaE) prompting. In\\nTaE prompting, the LLM is prompted with exemplary trajectories (a sequence of abstracted states\\nand actions) and the current history to determine the next action. These prompts are retrieved from\\nthe exemplar memory using similarity search. The retrieval process utilizes the embeddings of\\ntask metadata, with each metadata mapped to the corresponding exemplars. Fig. 2 further shows an\\nillustrative comparison of TaE prompting with the prompting schemes of other computer agents.\\nDespite the promising results of previous LLM-based computer agents, they still fail to solve some\\ntasks within MiniWoB++ (Shi et al., 2017; Liu et al., 2018), a relatively simplified computer control\\ntask suite, mainly due to the following issues. First, the limited context length of LLMs, combined\\nwith complex computer states, poses challenges for few-shot learning. For example, the book-flight\\ntask in MiniWoB++ is particularly challenging due to the extensive length of the webpage dis-\\nplaying flight details. Also, the task-irrelevant information in raw states can distract LLMs from\\ngenerating correct actions. Second, the exemplar structures used by existing computer agents can\\nlead to error accumulation in multi-round LLM queries and struggle to capture the complete tra-\\njectory information. Specifically, existing computer agents query LLMs at each step, and neither\\nhigh-level plans nor MCQs can represent full trajectories. For example, even when prompted with a\\ncorrect step-by-step plan and previous actions, RCI may still incorrectly predict the next action. As\\na result, existing ICL methods struggle to solve long-horizon tasks. Even for simplified tasks, they\\nstill rely on self-correction. Third, current computer agents require task-specific exemplars within\\na predefined scope. For example, in MiniWoB++, both email-inbox and email-inbox-nl handle\\nemail-related tasks. Similarly, multi-orderings and multi-layouts share similar interfaces. However,\\nexisting methods overlook this task similarity and hard-code the mapping from tasks to exemplars.\\nTo address these challenges, we present SYNAPSE, an LLM-powered computer agent featuring a\\nnovel prompting scheme and a memory mechanism. As illustrated in Fig. 1, SYNAPSE has three\\ncore components: i) state abstraction, which extracts task-relevant observations from raw states to\\nreduce the token length per trajectory, ii) trajectory-as-exemplar (TaE) prompting, which utilizes full\\nsuccessful trajectories as few-shot exemplars to prompt the LLM for enhanced multi-step decision-\\nmaking, and iii) exemplar memory, which stores successful trajectories and retrieves relevant ones\\nvia similarity search for generalization to novel tasks.\\nWe thoroughly evaluate SYNAPSE on two benchmarks: MiniWoB++ (Shi et al., 2017; Liu et al.,\\n2018), a standard research task suite, and Mind2Web (Deng et al., 2023), a dataset across diverse\\ndomains of real-world web navigation. In MiniWoB++, SYNAPSE is the first ICL method that\\nachieves human-level performance (Fig. 3). Specifically, SYNAPSE solves 64 tasks with a success\\nrate of 99.2% using demonstrations from only 48 tasks without relying on self-correction. In com-\\nparison, the current ICL state-of-the-art (SOTA) approach (Kim et al., 2023) is limited to handling\\n54 tasks, requiring task-specific demonstrations for each. Compared to BC+RL and fine-tuning\\nSOTA baselines, SYNAPSE achieves superior performance while being simpler, more flexible, and\\n2\\n\"}\n{\"page_number\":3,\"page_content\":\"Foundation Models for Decision Making Workshop at NeurIPS 2023\\nmore sample-efficient. A notable achievement is its success on the book-flight task, which requires\\nlong-horizon decision-making under intricate states. We further demonstrate the effectiveness of our\\napproach in Mind2Web by incrementally augmenting the LLM with three components of SYNAPSE,\\ni.e., state abstraction, TaE prompting, and exemplar memory. When the underlying LLM is GPT-3.5,\\nwe achieve improvements of 32%, 50%, and 56% in the step success rate over MindAct, the SOTA\\nICL method in this domain. When we use CodeLlama-7B (Roziere et al., 2023), SYNAPSE also\\nachieves an average 2.5\\u00d7 step success rate compared to MindAct. These experiments showcase the\\nsuperiority of SYNAPSE over existing computer agents in both standard and real-world benchmarks.\\n2\\nRELATED WORK\\nBuilding Agents with LLMs.\\nThere has been increasing attention on building autonomous agents\\nwith LLMs (Yang et al., 2023; Mialon et al., 2023; Xi et al., 2023; Park et al., 2023). Huang et al.\\n(2022) and Brohan et al. (2023) combined the LLM-generated plan with an embedding and a value\\nfunction to determine robot policies, respectively. Inner Monologue (Huang et al., 2023) incorpo-\\nrated environment feedback into a closed-loop system. These methods focused on prompting for\\nbetter high-level semantic plans and relied on BC or RL for low-level motor control policies. Unlike\\nrobotics, low-level actions for computer control are highly semantic, and the effective prompting\\nscheme for directly grounding actions remains unexplored. To address this, SYNAPSE proposes\\ntrajectory-as-exemplar prompting for directly grounding these actions. Recent efforts to improve\\nthe capabilities of reasoning, planning, and coding of LLMs, such as chain-of-thought (Wei et al.,\\n2022a; Kojima et al., 2022), least-to-most (Zhou et al., 2022), ReAct (Yao et al., 2022a), tree-of-\\nthoughts (Yao et al., 2023), Reflexion (Shinn et al., 2023), and self-debugging (Chen et al., 2023),\\ncan be combined with SYNAPSE to improve decision-making. The methods that leveraged external\\ntools (Wu et al., 2023a; Shen et al., 2023; Schick et al., 2023; Lu et al., 2023; Xu et al., 2023) are\\nalso orthogonal to SYNAPSE. Code as Policies (Liang et al., 2023) and ProgPrompt (Singh et al.,\\n2023) formulated agent policies as code generation. Similarly, SYNAPSE can be strengthened using\\ncode for both state abstraction and action generation. Voyager (Wang et al., 2023a) used a skill\\nlibrary for life-long skill acquisition, which also complements our framework. Wu et al. (2023b)\\nalso identified the issue of limited context, using a pretrained question-answering language model\\nto filter states, similar to MindAct. In comparison, our state-abstraction principle can leverage both\\nLLMs (few-shot learning) and pretrained state abstraction models.\\nAgents for Computer Control.\\nIn the pursuit of creating agents capable of human-like com-\\nputer interactions, MiniWoB++ task suite (Shi et al., 2017; Liu et al., 2018) has become a standard\\nbenchmark. Early attempts to solve MiniWoB++ primarily used BC and RL (Shi et al., 2017; Liu\\net al., 2018; Gur et al., 2018; Jia et al., 2018; Gur et al., 2021), which were not sufficient to achieve\\nhuman-level performance. A notable breakthrough came with CC-Net (Humphreys et al., 2022),\\nwhich achieved human-level performance but required an extensive dataset of 2.4 million demon-\\nstrations, equivalent to 6,300 hours of human effort. However, it is challenging to generalize this\\napproach for new tasks and user customization. WebN-T5 (Gur et al., 2023a), a fine-tuned variant\\nof the pretrained T5 model (Raffel et al., 2020), was trained on 12,000 demonstrations across 56\\ntasks. Similarly, WebGUM used 346,827 demonstrations to solve them. However, these fine-tuned\\nLLMs still demanded a large amount of data and fell short of human performance in MiniWoB++.\\nWebGPT (Nakano et al., 2021) and WebShop (Yao et al., 2022b), which operated in web-browsing\\nenvironments, focused more on refining search queries rather than on general computer control.\\nRecently, RCI (Kim et al., 2023) employed recursive self-correction to solve MiniWoB++ with a\\nsuccess rate of 90.6% in 54 tasks. However, it relied on task-specific exemplars, which limited its\\ngeneralization to novel scenarios. In contrast, SYNAPSE achieves better performance in MiniWoB++\\nwithout relying on self-correction, using demonstrations from fewer tasks. There is also a lot of con-\\ncurrent work in building computer agents and benchmarks. AdaPlanner (Sun et al., 2023) utilized\\nenvironment feedback for self-correction and achieved a success rate of 92.9% in 53 tasks, but it\\nhad similar issues to RCI. Pix2Act (Shaw et al., 2023) solved 59 MiniWoB++ tasks with tree search\\nand BC on 1.3 million demonstrations. WebAgent (Gur et al., 2023b) employed a small element-\\nranking model for HTML state filtering and an LLM for few-shot action generation, but it did not\\ninvestigate the exemplar structure and memory. Among many sophisticated benchmarks, such as\\nMind2Web (Deng et al., 2023), AgentBench (Liu et al., 2023a), WebArena (Zhou et al., 2023), and\\nAndroid in the Wild (Rawles et al., 2023), we choose Mind2Web for the real-world evaluation.\\n3\\n\"}\n{\"page_number\":4,\"page_content\":\"Foundation Models for Decision Making Workshop at NeurIPS 2023\\n3\\nSYNAPSE\\nAs illustrated in Fig. 1, SYNAPSE consists of three main components: state abstraction, trajectory-\\nas-exemplar prompting, and exemplar memory. Here is the general pipeline of SYNAPSE: when a\\ntask occurs, SYNAPSE first retrieves relevant few-shot exemplars from memory by similarity search\\nover the embedding space of task metadata, e.g., task descriptions and initial states. At each step,\\nSYNAPSE first prompts the LLM to convert raw states into clean, task-relevant observations. Exem-\\nplary trajectories and the current trajectory (a task description and a sequence of observation-action\\npairs) are subsequently fed into the LLM to generate the next action.\\n3.1\\nPROBLEM SETTING\\nIn this work, we focus on computer control tasks, where an agent interacts with the environment to\\naccomplish a task specified by natural language. The state and action space for a computer agent\\nare consistent with how humans interact with computers. At each step, it receives a computer state,\\nsuch as HTML of webpages or screenshots, and performs actions via keyboard and mouse. The\\nactions can be either code or natural language, depending on the benchmarks. As the decision-\\nmaking engine, LLMs are fed with few-shot exemplars to process raw states into clean observations\\nand generate actions. When the task is completed, the trajectory is considered successful.\\n3.2\\nSTATE ABSTRACTION\\nThe number of exemplars in few-shot learning can drastically influence the performance of LLM-\\npowered computer agents (Wang et al., 2023b; Kim et al., 2023). However, the context limits of\\nLLMs, combined with the intricacy of computer states, often restrict the number of exemplars. To\\nillustrate, directly processing long HTML documents of real-world websites can be prohibitively\\ncostly because of many task-irrelevant elements. As a result, the performance of existing computer\\nagents is hindered by the limited number of exemplars, and they often incorporate self-correction\\nas a remedy. Moreover, many task-irrelevant elements in raw HTML states can potentially distract\\nLLMs from accurate action generation. Even though some LLMs can handle longer inputs, their\\nperformance becomes worse as the input context grows longer (Liu et al., 2023b).\\nTo reduce the length of each state, SYNAPSE takes advantage of the few-shot learning ability of\\nLLMs to extract task-relevant information from raw states and form clean observations for subse-\\nquent action generation, as shown in Fig. 1. Specifically, we propose few-shot state abstraction\\nprompts in both explicit and implicit forms. For scenarios where the context can handle multiple\\nstates, such as email-inbox in MiniWoB++, we apply explicit abstraction through state-observation\\npairs, denoted as \\u27e8state, observation\\u27e9. In this case, the LLM is prompted with these pairs as few-\\nshot exemplars, followed by the current raw state, to generate the clean observation. Alternatively,\\nin scenarios with complex states where explicit abstraction is not applicable, such as book-flight\\nin MiniWoB++, we adopt implicit abstraction by pairing task descriptions and state-parsing code,\\ndenoted as \\u27e8task, code\\u27e9. We feed these pairs as few-shot exemplars to the LLM, along with the cur-\\nrent task, to produce the code. This code takes the task and the raw state as parameters and returns\\nthe clean observation. If the code execution raises an error, we ask the LLM to perform zero-shot\\nstate abstraction. Within Mind2Web, we further demonstrate that the state abstraction principle can\\naid in effectively utilizing existing state abstraction tools. Specifically, Mind2Web has a pretrained\\nelement-ranking model that ranks and filters HTML elements to obtain a clean observation com-\\nprising the top-k elements. As a simplified implementation of state abstraction, we set k to 3 and\\n5 for the previous and current observations, respectively. In comparison, the SOTA method set k\\nto 50. Although this reduces the recall from 86% to 53%, i.e., only 53% of the clean observations\\ncontain the target element, it achieves a higher step success rate (Sec. 4.4). State abstraction shrinks\\nlong-winded raw states into concise and shorter ones, enabling trajectory-as-exemplar prompting\\n(Sec. 3.3), which is impossible for previous methods due to context limits.\\n3.3\\nTRAJECTORY-AS-EXEMPLAR PROMPTING\\nThe prompts for action generation in previous computer agents often overlook the sequential nature\\nof decision-making. For example, each RCI exemplar consists of a high-level plan, while Min-\\ndAct formulates exemplars as step-by-step MCQs, as illustrated in Fig. 2. Without considering the\\n4\\n\"}\n\n... # only display 4 rows in JSON format, more are truncated due to length constraint based on max_tokens (5000)"}
{"role": "assistant", "content": "[Thought]: From the retrieved content, it is clear that Synapse outperformed other methods, particularly MindAct, on the Mind2Web dataset. The paper mentions that Synapse solves 64 tasks in MiniWoB++ using demonstrations from only 48 tasks. This indicates that the number of tasks in the MiniWoB++ dataset is 64. The concurrent work that performs the best is MindAct. I will now generate the final answer.\n[Action]:\nGenerateAnswer(answer=['MindAct', 64])"}
{"role": "user", "content": "[Observation]: ['MindAct', 64]"}
