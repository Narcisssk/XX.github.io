{"role": "system", "content": "You are an intelligent agent with expertise in **retrieving useful context from both the DuckDB database and the Milvus vectorstore through SQL execution and similarity search** and **answering user questions**. You will be given a natural language question concerning PDF files, along with the schema of both the database and the vectorstore. Your ultimate goal is to answer the input question with pre-defined answer format. The DuckDB database contains all parsed content of raw PDF files, while the Milvus vectorstore encodes specific column cells from the database as vectors. You can predict executable actions, interact with the hybrid environment (including database and vectorstore) across multiple turns, and retrieve necessary context until you are confident in resolving the question.\n\n--------\n\n## Task Description\nEach task consists of the following parts:\n\n[Question]: User question regarding the PDF, e.g., Is there any ...?\n[Answer Format]: it describes the format of the final answer, e.g., the answer is \"Yes\" or \"No\" without punctuation.\n[Anchor PDF]: Optional, a python str or list, the PDF(s) you must use to answer the question.\n[Reference PDF]: Optional, a python str or list, the PDF(s) you may use to answer the question.\n[Conference]: Optional, a python str or list, the conference(s) and year(s) of the relevant papers for retrieval.\n[Database Schema]: A detailed serialized schema of the DuckDB database for reference when generating SQL queries. It includes 1) tables, 2) columns and their data types, 3) descriptions for these schema items, and 4) primary key and foreign key constraints.\n[Vectorstore Schema]: A detailed serialized schema of the Milvus vectorstore for reference when generating executable retrieval actions with specific parameters. It includes 1) collections, 2) fields, 3) encodable (table, column) pairs in the relational database where the vectorized content originates, and 4) grammar for valid filter rules.\n\n\n--------\n\n## Action and Observation Space\nAll allowable action types include ['RetrieveFromDatabase', 'ClassicRetrieve', 'GenerateAnswer']. Here is the detailed specification in MARKDOWN format:\n\n### Action Type\nRetrieveFromDatabase\n\n### Description\nGenerate an SQL query to retrieve the desired information from the DuckDB database. Please refer to the concrete database schema to produce a valid and executable SQL.\n\n### Observation\nThe observation space is the execution result of the SQL query. You do not need to worry about the actual execution, we will perform it for you. If the SQL failed to execute, we will return the error message. Extremely long SQL output will be truncated.\n\n### Syntax and Parameters (MARKDOWN Format)\nRetrieveFromDatabase(sql: str)\n- sql: str, required. The concrete DuckDB SQL query to execute and retrieve results.\n\n### Use Cases\n\n#### Case 1\nGet the abstract of the paper with paper_id '12345678' from the metadata table in the DuckDB database.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT abstract FROM metadata WHERE paper_id = '12345678';\")\n\n\n#### Case 2\nFind which page in the paper with paper_id '12345678' contains Figure 3.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT pages.page_number FROM images JOIN pages JOIN metadata ON images.ref_page_id = pages.page_id AND pages.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '12345678' AND images.image_caption LIKE '%Figure 3%';\")\n\n\n----\n\n### Action Type\nClassicRetrieve\n\n### Description\nGiven a query text, retrieve relevant context from the Milvus vectorstore.\n\n### Observation\nThe observation space is the retrieved top-ranked entries from the Milvus vectorstore based on queries.\n\n### Syntax and Parameters (MARKDOWN Format)\nClassicRetrieve(query: str, limit: int = 5)\n- query: str, required. The query text will be encoded and used to search for relevant context. You can rephrase the original user question to obtain a more clear and structured query requirement.\n- limit: int, optional, default to 5. The number of top-ranked context to retrieve. Please set it to a positive integer to limit the number of returned results. Extremely large limit values may be truncated.\n\n### Use Cases\n\n#### Case 1\nRetrieve top 5 pieces about a certain topic.\n\n[Action]: ClassicRetrieve(query='Is there any work about the topic structured RAG?')\n\n\n#### Case 2\nRetrieve detailed information about the learning rate for training the ResNet model. The top 4 most relevant entries will be returned based on the query.\n\n[Action]: ClassicRetrieve(query=\"What's the learning rate for training the ResNet model?\", limit=4)\n\n\n----\n\n### Action Type\nGenerateAnswer\n\n### Description\nWhen you take this action, the retrieved results suffice to answer the user question. PLEASE STRICTLY ADHERE TO THE ANSWER FORMAT FOR THE CURRENT QUESTION.\n\n### Observation\nThere is no observation for this terminal action, since it indicates the completion of the task and end of the interaction.\n\n### Syntax and Parameters (MARKDOWN Format)\nGenerateAnswer(answer: Any)\n- answer: Any, required. The final answer to the user question. Please adhere to the answer format for the current question.\n\n### Use Cases\n\n#### Case 1\nThe answer to the user question is 42.\n\n[Action]: GenerateAnswer(answer=42)\n\n\n#### Case 2\nThe answer to the user question is a list of strings: ['Results', 'Discussion'].\n\n[Action]: GenerateAnswer(answer=['Results', 'Discussion'])\n\n\n\n--------\n\n## Interaction Framework\n\nThe main interaction procedure proceeds like this:\n\n----\n\n[Thought]: ... reasoning process, why to take this action ...\n[Action]: ... which action to take, please strictly conform to the action specification ...\n[Observation]: ... execution results or error message after taking the action ...\n\n... # more interleaved triplets of ([Thought], [Action], [Observation])\n\n[Thought]: ... reasoning process to produce the final answer ...\n[Action]: ... the terminate action `GenerateAnswer`, there is no further observation ...\n\n----\n\nIn general, the main interaction loop consists of an interleaved of triplets ([Thought], [Action], [Observation]), except the last `GenerateAnswer` action which does not have \"[Observation]:\". You need to predict the \"[Thought]: ...\" followed by the \"[Action]: ...\" for each turn, and we will execute your action in the environment and provide the \"[Observation]: ...\" for the previous action.\n\n--------\n\n## Suggestions or Hints for Agent Interaction\n\n1. Explore multiple retrieval strategies. For example:\n- Experiment with different (table, column) pairs to extract diverse types of information.\n- Query various embedding models (collections) to find the most relevant context.\n\n2. Combine both structured and unstructured data. Concretely:\n- Use SQL queries to retrieve precise facts and structured data. Pay special attention to morphological variations in cell values.\n- Perform similarity searches in the vectorstore to capture semantic relationships and hidden insights.\n\n3. Iterate and refine:\n- If SQL execution result is not satisfactory, try alternative SQL queries to explore the database content carefully.\n- If the vector-based neural retrieval is insufficient, try alternative approaches or parameter settings.\n- Use your findings to validate or enrich the final response.\n\n4. Ensure confidence. That is, only make a final decision when you are confident that the retrieved information fully addresses the userâ€™s query.\n\n\nRemember that, for each question, you only have 20 interaction turns at most. Now, let's start!\n"}
{"role": "user", "content": "[Question]: What is the method of prefix-tuning, mentioned as the PEFT module, in the method section of this paper?\n[Answer Format]: Your answer should be a python string about the method of prefix-tuning.\n[Anchor PDF]: '0905f55c-e8a3-5931-bd5a-dd9b69146ca1'\n[Database Schema]: The database schema for /home/htc981/workspace/project/HNS-RAG/data/database/ai_research/ai_research.sql is as follows:\n/* database ai_research: This database contains information about AI research papers. Each PDF file is represented or parsed via different views, e.g., pages, sections, figures, tables, and references. We also extract the concrete content inside each concrete element via OCR.\n*/\n/* table metadata: This table stores metadata about each paper, including the number of pages, paper path and paper id.\n*/\nCREATE TABLE IF NOT EXISTS metadata (\n\tpaper_id UUID, -- A unique identifier for this paper.\n\ttitle VARCHAR, -- The title of this paper.\n\tabstract VARCHAR, -- The abstract of this paper.\n\tnum_pages INTEGER, -- The number of pages in this paper.\n\tconference_full VARCHAR, -- The full name of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tconference_abbreviation VARCHAR, -- The abbreviation of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tpub_year INTEGER, -- The year when this paper was published.\n\tvolume VARCHAR, -- The volume of the conference where this paper was published. e.g. findings.\n\tdownload_url VARCHAR, -- The url from which the paper can be downloaded.\n\tbibtex VARCHAR, -- The bibtex of this paper.\n\tauthors VARCHAR[], -- The full names of authors of this paper.\n\tpdf_path VARCHAR, -- The path to the PDF file of this paper.\n\ttldr VARCHAR, -- A brief summary of the paper's main idea or findings generated by LLM based on title and abstract.\n\ttags VARCHAR[], -- Keywords representing the paper's topics, methods, or applications generated by LLM based on title and abstract.,\n\tPRIMARY KEY (paper_id)\n);\n/* table pages: This table stores information of the pages in the papers, including their content, size and their order within the paper. The pagesare extracted using PyMuPDF.\n*/\nCREATE TABLE IF NOT EXISTS pages (\n\tpage_id UUID, -- A unique identifier for each page.\n\tpage_number INTEGER, -- The page number in the current paper, starting from 1.\n\tpage_width INTEGER, -- The pixel width of the current page.\n\tpage_height INTEGER, -- The pixel height of the current page.\n\tpage_content VARCHAR, -- The content of the page.\n\tpage_summary VARCHAR, -- A brief summary of the page content, generated by LLM, focusing on key information and describing the page content.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (page_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table images: This table stores the information about images in each paper. The images are extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS images (\n\timage_id UUID, -- The unique identifier of the image.\n\timage_caption VARCHAR, -- The caption of this image, \"\" if it doesn't have one.\n\timage_summary VARCHAR, -- A brief summary of the image, generated by LLM, focusing on key information and describing the image.\n\tbounding_box INTEGER[4], -- The bounding box of the figure in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height which are used to determine the shape of the rectangle.\n\tordinal INTEGER, -- Each figure is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (image_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table chunks: This table contains the information of each chunk of text (chunk size = 512 tokens with no overlapping) in each page of the paper. A chunk is a sub-text that is extracted from the main text using langchain, such as a sentence or a paragraph.\n*/\nCREATE TABLE IF NOT EXISTS chunks (\n\tchunk_id UUID, -- A unique identifier for each chunk of text.\n\ttext_content VARCHAR, -- The text content of the current chunk.\n\tordinal INTEGER, -- Each chunk is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (chunk_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table tables: This table stores information about tables extracted from pages using MinerU, including content (in html format), bounding box and summary of each table generated by LLM.\n*/\nCREATE TABLE IF NOT EXISTS tables (\n\ttable_id UUID, -- A unique identifier for each table.\n\ttable_caption VARCHAR, -- Caption of the table, showing key information of the table.\n\ttable_content VARCHAR, -- The content of the table in html format.\n\ttable_summary VARCHAR, -- A brief summary of the table content generated by LLM, focusing on key information and describing the table content.\n\tbounding_box INTEGER[4], -- The bounding box of the table in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height.\n\tordinal INTEGER, -- Each table is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this table is located.,\n\tPRIMARY KEY (table_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table sections: This table contains the text content of each section in the paper, e.g. `Introduction`, `Experiment`, `Conclusion`, `Reference`. The sections are extracted using PyMuPDF or MinerU.\n*/\nCREATE TABLE IF NOT EXISTS sections (\n\tsection_id UUID, -- A unique identifier for each section of text.\n\tsection_title VARCHAR, -- The title of the current section.\n\tsection_content VARCHAR, -- The text content of the current section.\n\tsection_summary VARCHAR, -- A brief summary of the section content generated by LLM, focusing on key information and describing the section content.\n\tordinal INTEGER, -- Each section is labeled with one distinct integer number in the paper, which starts from 0.\n\tpage_numbers INTEGER[], -- A list of page numbers where current section is located in the relevant paper.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (section_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table equations: This table stores information about equations extracted from pages using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS equations (\n\tequation_id UUID, -- A unique identifier for each equation.\n\tequation_content VARCHAR, -- Content of the equation in latex format.\n\tordinal INTEGER, -- Each equation is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the paper ID in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the page ID in the `pages` table where this equation is located.,\n\tPRIMARY KEY (equation_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table reference: This table stores information about references extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS reference (\n\treference_id UUID, -- A unique identifier for each reference.\n\treference_content VARCHAR, -- Content of the reference.\n\tordinal INTEGER, -- Each reference is labeled with one distinct integer number according to its order in the paper, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this reference is located.,\n\tPRIMARY KEY (reference_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n[Vectorstore Schema]: The vectorstore schema for ai_research is as follows. You can try collections with different encoding models or modalities:\n[\n    {\n        \"collection_name\": \"text_bm25_en\",\n        \"modality\": \"text\",\n        \"embed_type\": \"bm25\",\n        \"embed_model\": \"en\",\n        \"description\": \"This collection is used to store the sparse embeddings generated by the BM25 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric inner-product (IP).\",\n        \"fields\": [\n            {\n                \"name\": \"id\",\n                \"dtype\": \"INT64\",\n                \"is_primary\": true,\n                \"description\": \"The unique id for each encoded text vector in this collection.\"\n            },\n            {\n                \"name\": \"vector\",\n                \"dtype\": \"SPARSE_FLOAT_VECTOR\",\n                \"description\": \"The encoded sparse vector of the text content generated by the BM25 model. Note that, the raw text content can be uniquely identified by the triplet fields below: `table_name`, `column_name`, `primary_key`.\"\n            },\n            {\n                \"name\": \"pdf_id\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The unique id of the PDF file stored in the relational database that the encoded text belongs to. This field can be used to quickly filter the search space.\"\n            },\n            {\n                \"name\": \"page_number\",\n                \"dtype\": \"INT16\",\n                \"description\": \"The page number in the PDF file that the encoded text belongs to (starting from 1). This field can be used to quickly filter the search space. Value -1 means unknown.\"\n            },\n            {\n                \"name\": \"table_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which table in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"column_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which column under `table_name` in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"primary_key\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The primary key value of `table_name` (or which row) in the relational database that the text content belongs to. Note that, the triplet (`table_name`, `column_name`, `primary_key`) can be used to construct a one-to-one mapping between the `text` field in the current vectorstore and the cell entry in the relational database.\"\n            }\n        ]\n    },\n    {\n        \"collection_name\": \"text_sentence_transformers_all_minilm_l6_v2\",\n        \"modality\": \"text\",\n        \"embed_type\": \"sentence_transformers\",\n        \"embed_model\": \"all-MiniLM-L6-v2\",\n        \"description\": \"This collection is used to store the embeddings generated by the all-MiniLM-L6-v2 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric COSINE.\",\n        \"fields\": \"The fields of this collection are similar to the `text_bm25_en` collection.\"\n    }\n]\n\nThe following lists all encodable (table_name, column_name, encode_modality) information from the corresponding DuckDB database, where the encoded vector entries are sourced. Note that, for text modality, we directly encode cell values from the `table_name.column_name`; for image modality, we encode the cropped images for `page_number` in `pdf_id` with bounding boxes from `table_name.column_name`. You can leverage them for filter condition during similarity search:\n[\n    [\n        \"metadata\",\n        \"title\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"abstract\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"bibtex\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"tldr\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_content\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_summary\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_caption\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_summary\",\n        \"text\"\n    ],\n    [\n        \"chunks\",\n        \"text_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_caption\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_summary\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_title\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_content\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_summary\",\n        \"text\"\n    ],\n    [\n        \"equations\",\n        \"equation_content\",\n        \"text\"\n    ],\n    [\n        \"reference\",\n        \"reference_content\",\n        \"text\"\n    ]\n]\n\nHere are the operators that you can use in the filtering condition for the vectorstore:\n{\n    \"operators\": {\n        \"logical\": [\n            {\n                \"symbol\": \"not\",\n                \"example\": \"not expr\",\n                \"description\": \"True if expr is false.\"\n            },\n            {\n                \"symbol\": \"and\",\n                \"example\": \"expr1 and expr2\",\n                \"description\": \"True if both expr1 and expr2 are true.\"\n            },\n            {\n                \"symbol\": \"or\",\n                \"example\": \"expr1 or expr2\",\n                \"description\": \"True if either expr1 or expr2 are true.\"\n            }\n        ],\n        \"binary arithmetic\": [\n            {\n                \"symbol\": \"+\",\n                \"example\": \"a + b\",\n                \"description\": \"Add the two operands.\"\n            },\n            {\n                \"symbol\": \"-\",\n                \"example\": \"a - b\",\n                \"description\": \"Subtract the second operand from the first operand.\"\n            },\n            {\n                \"symbol\": \"*\",\n                \"example\": \"a * b\",\n                \"description\": \"Multiply the two operands.\"\n            },\n            {\n                \"symbol\": \"/\",\n                \"example\": \"a / b\",\n                \"description\": \"Divide the first operand by the second operand.\"\n            },\n            {\n                \"symbol\": \"**\",\n                \"example\": \"a ** b\",\n                \"description\": \"Raise the first operand to the power of the second operand.\"\n            },\n            {\n                \"symbol\": \"%\",\n                \"example\": \"a % b\",\n                \"description\": \"Divide the first operand by the second operand and yield the remainder portion.\"\n            }\n        ],\n        \"relational\": [\n            {\n                \"symbol\": \"<\",\n                \"example\": \"a < b\",\n                \"description\": \"True if a is less than b.\"\n            },\n            {\n                \"symbol\": \">\",\n                \"example\": \"a > b\",\n                \"description\": \"True if a is greater than b.\"\n            },\n            {\n                \"symbol\": \"==\",\n                \"example\": \"a == b\",\n                \"description\": \"True if a is equal to b. Please use **two** equal signs for equality comparison.\"\n            },\n            {\n                \"symbol\": \"!=\",\n                \"example\": \"a != b\",\n                \"description\": \"True if a is not equal to b.\"\n            },\n            {\n                \"symbol\": \"<=\",\n                \"example\": \"a <= b\",\n                \"description\": \"True if a is less than or equal to b.\"\n            },\n            {\n                \"symbol\": \">=\",\n                \"example\": \"a >= b\",\n                \"description\": \"True if a is greater than or equal to b.\"\n            },\n            {\n                \"symbol\": \"in\",\n                \"example\": \"a in [b, c, ...]\",\n                \"description\": \"True if a is equal to any of the values in the list.\"\n            }\n        ],\n        \"array operations\": [\n            {\n                \"symbol\": \"[]\",\n                \"example\": \"bbox[0]\",\n                \"description\": \"This expression gets the first element in array bbox. For example, 'bbox[0] < 50' evaluates to true if the value of bbox[0] is less than 50.\"\n            },\n            {\n                \"symbol\": \"array_contains\",\n                \"example\": \"array_contains(bbox, 100)\",\n                \"description\": \"This expression evaluates to true if array bbox contains element 100.\"\n            },\n            {\n                \"symbol\": \"array_length\",\n                \"example\": \"array_length(int_array) == 4\",\n                \"description\": \"This expression evaluates to true if int_array contains exactly 4 elements.\"\n            }\n        ]\n    },\n    \"use cases\": [\n        {\n            \"example\": \"table_name == 'chunks' and column_name == 'text_content'\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and column_name equal to 'text_content'.\"\n        },\n        {\n            \"example\": \"table_name == 'chunks' and primary_key in ['123', '456', '789']\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and primary_key equal to any of the values in the list ['123', '456', '789'].\"\n        },\n        {\n            \"example\": \"bbox[0] + bbox[2] <= 100 and bbox[1] + bbox[3] <= 300 and pdf_id == '123456' and page_number == 1\",\n            \"description\": \"For image modality, filter results to include only image regions that are entirely within the upper-left quadrant of page 1 in the PDF with ID '123456', assuming the page dimensions are 200 (width) x 600 (height).\"\n        }\n    ]\n}"}
{"role": "assistant", "content": "[Thought]: To answer the question about the method of prefix-tuning mentioned in the method section of the paper, I need to retrieve the relevant content from the `sections` table where the section title is \"Method\" or similar, and the paper_id is '0905f55c-e8a3-5931-bd5a-dd9b69146ca1'. Once I have the content, I can perform a similarity search in the vectorstore to find the specific mention of prefix-tuning.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_content FROM sections WHERE ref_paper_id = '0905f55c-e8a3-5931-bd5a-dd9b69146ca1' AND (section_title LIKE '%Method%' OR section_title LIKE '%Methodology%');\")"}
{"role": "user", "content": "[Observation]:\n{\"section_content\":\"In this section, we describe MOCL-P, our proposed CL approach for language models, as illustrated in Figure 1, which tackles catastrophic forgetting and enhances knowledge transfer with superior parameter effciency at the same time.\"}\n{\"section_content\":\"In Section 6, we evaluate MOCL-P and prior continual learning methods on different benchmark datasets. Here, we provide a more detailed description of the baseline methods used in this work.\\nProgPrompt (Razdaibiedina et al., 2022): A parameter isolation-based continual learning method that assigns task-specifc parameters to avoid catastrophic forgetting. During continual learning, ProgPrompt progressively concatenates all task-specifc modules to encourage forward transfer.\\nEPI (Wang et al., 2023e): A parameter isolationbased method applicable to the class-incremental learning setting (CIL), where task identities are not given during inference. EPI introduces a nonparametric task identifcation module that identifes tasks during testing. Given reliable task identifcation, the CIL performance of EPI could be comparable to TIL, where the ground truth task identities are given during inference.\\nO-LoRA (Wang et al., 2023d): A parameter isolation-based method that learns tasks in different low-rank vector spaces that are kept orthogonal to each other to minimize interference. It mitigates catastrophic forgetting by constraining the gradient update of the current task to be orthogonal to the gradient space of past tasks. However, the orthogonality of the gradient subspace for individual tasks also limits knowledge transfer between tasks.\\nMoCL (Wang et al., 2024): Introduces a modular and compositional continual learning framework to compose the new module with existing ones based on task module matching. This compositional strategy enables effective knowledge transfer by considering task interaction.\\nAs discussed in Section 2, we build on the idea of MoCL (Wang et al., 2024) by utilizing task representations for module composition, ensuring that the model effectively reuses relevant knowledge from previous tasks. Beyond that, we introduce an adaptive pruning strategy to keep the language model lightweight and effective throughout the continual learning process, making it scalable for continual learning scenarios with long task sequences.\"}\n\nIn total, 2 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved sections do not contain explicit details about prefix-tuning. I will perform a similarity search in the vectorstore using the content from the method section to find more specific information about prefix-tuning.\n[Action]:\nClassicRetrieve(query='prefix-tuning method in the method section', limit=5)"}
{"role": "user", "content": "[Observation]:\n{\"score\":0.6773,\"pdf_id\":\"1871627a-cab1-50d5-9c8a-6c834f40204a\",\"page_number\":3,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"3e3a6e1a-586a-564b-a1aa-a378fddbe93d\",\"text\":\"Method\\n% Tuned\\nWikiHop\\nArXiv\\n20-newsgroups\\nHyperpartisan\\nAcc\\nP\\nR\\nF1\\nP\\nR\\nF1\\nP\\nR\\nF1\\nRoBERTa PT\\n0.1\\n11.7\\n79.4\\n79.6\\n79.8\\n67.9\\n67.0\\n68.2\\n70.4\\n59.2\\n64.1\\nPrefix-Tuning\\n0.1\\n38.9\\n81.5\\n81.7\\n82.7\\n68.9\\n68.4\\n69.7\\n78.3\\n73.8\\n75.3\\nPrefix-Propagation\\n0.05\\n42.2\\n83.1\\n83.1\\n83.3\\n70.1\\n69.7\\n71.0\\n86.4\\n77.7\\n81.8\\nFine-Tuning\\n100\\n74.0\\n83.1\\n82.9\\n83.3\\n71.8\\n71.2\\n72.3\\n87.8\\n76.2\\n81.5\\nTable 2: Main results of prefix-propagation compared to prefix-tuning and traditional fine-tuning on the validation\"}\n{\"score\":0.6438,\"pdf_id\":\"0d901d65-8044-5d51-9a77-1f36d596d3dc\",\"page_number\":1,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"9d4f2f9e-60dd-50c9-b938-7e3e0f1c016e\",\"text\":\"Parameter-Efficient Tuning methods (PETs) are\\nproposed (Houlsby et al., 2019; Hu et al., 2022; Za-\\nken et al., 2022; Lester et al., 2021). By only tuning\\na small number of additional parameters, PETs can\\nbe comparable to full-parameter fine-tuning.\\nDespite the success of PETs, their underlying\\nmechanism remains an open problem. Recently,\\nseveral works have proposed to interpret PETs with\\noptimal control theory. Yang and Liu (2022) first\\nshow that the optimization in Prefix Tuning (Li and\"}\n{\"score\":0.6374,\"pdf_id\":\"1e96299e-0c82-5331-a9d9-049a9c56e1f8\",\"page_number\":10,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"fb7f09ef-0c68-5a2e-9ca0-4e0452b38d1a\",\"text\":\"fine-tuning methods.\\n10\"}\n{\"score\":0.6207,\"pdf_id\":\"1871627a-cab1-50d5-9c8a-6c834f40204a\",\"page_number\":1,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"ae3768ca-f77a-5414-8095-07f772b9f133\",\"text\":\"quantities of resources. Parameter-efficient fine-\\ntuning (PEFT) methods such as prefix-tuning (Li\\nand Liang, 2021; He et al., 2021a; Liu et al., 2022)\\naddress these concerns by reducing the number\\n*Work done during a student internship at Ingenuity Labs.\\n\\u2020Corresponding author.\\n1Our code is publicly available at https:\\/\\/github.\\ncom\\/MonliH\\/prefix-propagation\\nMethod\\n20-newsgroups\\nHyperpartisan\\nPrefix-Tuning\\n69.7\\n75.3\\nFine-Tuning\\n72.3\\n81.5\\nTable 1: Mean F1-Scores of prefix-tuning and fine-\"}\n{\"score\":0.6053,\"pdf_id\":\"db0edbfd-0e3a-5654-8a84-935c3a0a58da\",\"page_number\":4,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"d1dc35ba-7bec-5432-b3f1-9c738c30575c\",\"text\":\"f({xi}) \\u2212(\\u03a0\\u22121\\u25e6hT \\u25e6\\u03a0)({xi})\\n\\u0003\\nk\\n\\r\\n\\r\\n2 \\u2264\\u03f5.\\nThis result is discussed in detail in Appendix C.\\n4\\nDISCUSSION AND CONCLUSIONS\\nJust like us, Wang et al. (2023) show that prefix-tuning can be a universal approximator. This\\napproach has several limitations: i) the model has exponential depth O(T\\u03f5\\u2212m); ii) reducing the\\napproximation error \\u03f5 requires increasing the model depth; iii) the prefix length is fixed, hence a\\nconstant function and a highly non-smooth function would have equal prefix lengths, and iv) it\"}\n\nIn total, 5 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved results from the vectorstore provide some context about prefix-tuning, but they are from different papers. I need to focus on the specific paper with the ID '0905f55c-e8a3-5931-bd5a-dd9b69146ca1' and find the relevant section that mentions prefix-tuning. I will perform a more targeted search in the vectorstore using the paper ID and the method section content.\n[Action]:\nClassicRetrieve(query='prefix-tuning method in the method section', limit=5, filter=\"pdf_id == '0905f55c-e8a3-5931-bd5a-dd9b69146ca1' and table_name == 'sections' and column_name == 'section_content'\")"}
{"role": "user", "content": "[Observation]: [Error]: Failed to parse the parameters for action ClassicRetrieve from the response. ClassicRetrieve.__init__() got an unexpected keyword argument 'filter'."}
{"role": "assistant", "content": "[Thought]: It seems that the `filter` parameter is not supported in the `ClassicRetrieve` action. I will try to retrieve the relevant content from the method section of the paper directly from the database and then perform a similarity search in the vectorstore using that content.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_content FROM sections WHERE ref_paper_id = '0905f55c-e8a3-5931-bd5a-dd9b69146ca1' AND (section_title LIKE '%Method%' OR section_title LIKE '%Methodology%');\")"}
{"role": "user", "content": "[Observation]:\n{\"section_content\":\"In this section, we describe MOCL-P, our proposed CL approach for language models, as illustrated in Figure 1, which tackles catastrophic forgetting and enhances knowledge transfer with superior parameter effciency at the same time.\"}\n{\"section_content\":\"In Section 6, we evaluate MOCL-P and prior continual learning methods on different benchmark datasets. Here, we provide a more detailed description of the baseline methods used in this work.\\nProgPrompt (Razdaibiedina et al., 2022): A parameter isolation-based continual learning method that assigns task-specifc parameters to avoid catastrophic forgetting. During continual learning, ProgPrompt progressively concatenates all task-specifc modules to encourage forward transfer.\\nEPI (Wang et al., 2023e): A parameter isolationbased method applicable to the class-incremental learning setting (CIL), where task identities are not given during inference. EPI introduces a nonparametric task identifcation module that identifes tasks during testing. Given reliable task identifcation, the CIL performance of EPI could be comparable to TIL, where the ground truth task identities are given during inference.\\nO-LoRA (Wang et al., 2023d): A parameter isolation-based method that learns tasks in different low-rank vector spaces that are kept orthogonal to each other to minimize interference. It mitigates catastrophic forgetting by constraining the gradient update of the current task to be orthogonal to the gradient space of past tasks. However, the orthogonality of the gradient subspace for individual tasks also limits knowledge transfer between tasks.\\nMoCL (Wang et al., 2024): Introduces a modular and compositional continual learning framework to compose the new module with existing ones based on task module matching. This compositional strategy enables effective knowledge transfer by considering task interaction.\\nAs discussed in Section 2, we build on the idea of MoCL (Wang et al., 2024) by utilizing task representations for module composition, ensuring that the model effectively reuses relevant knowledge from previous tasks. Beyond that, we introduce an adaptive pruning strategy to keep the language model lightweight and effective throughout the continual learning process, making it scalable for continual learning scenarios with long task sequences.\"}\n\nIn total, 2 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved method section content does not explicitly mention prefix-tuning. I will perform a similarity search in the vectorstore using the content from the method section to find more specific information about prefix-tuning, focusing on the paper with the ID '0905f55c-e8a3-5931-bd5a-dd9b69146ca1'.\n[Action]:\nClassicRetrieve(query='prefix-tuning method in the method section', limit=5, filter=\"pdf_id == '0905f55c-e8a3-5931-bd5a-dd9b69146ca1'\")"}
{"role": "user", "content": "[Observation]: [Error]: Failed to parse the parameters for action ClassicRetrieve from the response. ClassicRetrieve.__init__() got an unexpected keyword argument 'filter'."}
{"role": "assistant", "content": "[Thought]: The `filter` parameter is not supported in the `ClassicRetrieve` action. I will perform a similarity search without the filter and then manually filter the results to find the relevant content from the paper with the ID '0905f55c-e8a3-5931-bd5a-dd9b69146ca1'.\n[Action]:\nClassicRetrieve(query='prefix-tuning method in the method section', limit=5)"}
{"role": "user", "content": "[Observation]:\n{\"score\":0.6773,\"pdf_id\":\"1871627a-cab1-50d5-9c8a-6c834f40204a\",\"page_number\":3,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"3e3a6e1a-586a-564b-a1aa-a378fddbe93d\",\"text\":\"Method\\n% Tuned\\nWikiHop\\nArXiv\\n20-newsgroups\\nHyperpartisan\\nAcc\\nP\\nR\\nF1\\nP\\nR\\nF1\\nP\\nR\\nF1\\nRoBERTa PT\\n0.1\\n11.7\\n79.4\\n79.6\\n79.8\\n67.9\\n67.0\\n68.2\\n70.4\\n59.2\\n64.1\\nPrefix-Tuning\\n0.1\\n38.9\\n81.5\\n81.7\\n82.7\\n68.9\\n68.4\\n69.7\\n78.3\\n73.8\\n75.3\\nPrefix-Propagation\\n0.05\\n42.2\\n83.1\\n83.1\\n83.3\\n70.1\\n69.7\\n71.0\\n86.4\\n77.7\\n81.8\\nFine-Tuning\\n100\\n74.0\\n83.1\\n82.9\\n83.3\\n71.8\\n71.2\\n72.3\\n87.8\\n76.2\\n81.5\\nTable 2: Main results of prefix-propagation compared to prefix-tuning and traditional fine-tuning on the validation\"}\n{\"score\":0.6438,\"pdf_id\":\"0d901d65-8044-5d51-9a77-1f36d596d3dc\",\"page_number\":1,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"9d4f2f9e-60dd-50c9-b938-7e3e0f1c016e\",\"text\":\"Parameter-Efficient Tuning methods (PETs) are\\nproposed (Houlsby et al., 2019; Hu et al., 2022; Za-\\nken et al., 2022; Lester et al., 2021). By only tuning\\na small number of additional parameters, PETs can\\nbe comparable to full-parameter fine-tuning.\\nDespite the success of PETs, their underlying\\nmechanism remains an open problem. Recently,\\nseveral works have proposed to interpret PETs with\\noptimal control theory. Yang and Liu (2022) first\\nshow that the optimization in Prefix Tuning (Li and\"}\n{\"score\":0.6374,\"pdf_id\":\"1e96299e-0c82-5331-a9d9-049a9c56e1f8\",\"page_number\":10,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"fb7f09ef-0c68-5a2e-9ca0-4e0452b38d1a\",\"text\":\"fine-tuning methods.\\n10\"}\n{\"score\":0.6207,\"pdf_id\":\"1871627a-cab1-50d5-9c8a-6c834f40204a\",\"page_number\":1,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"ae3768ca-f77a-5414-8095-07f772b9f133\",\"text\":\"quantities of resources. Parameter-efficient fine-\\ntuning (PEFT) methods such as prefix-tuning (Li\\nand Liang, 2021; He et al., 2021a; Liu et al., 2022)\\naddress these concerns by reducing the number\\n*Work done during a student internship at Ingenuity Labs.\\n\\u2020Corresponding author.\\n1Our code is publicly available at https:\\/\\/github.\\ncom\\/MonliH\\/prefix-propagation\\nMethod\\n20-newsgroups\\nHyperpartisan\\nPrefix-Tuning\\n69.7\\n75.3\\nFine-Tuning\\n72.3\\n81.5\\nTable 1: Mean F1-Scores of prefix-tuning and fine-\"}\n{\"score\":0.6053,\"pdf_id\":\"db0edbfd-0e3a-5654-8a84-935c3a0a58da\",\"page_number\":4,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"d1dc35ba-7bec-5432-b3f1-9c738c30575c\",\"text\":\"f({xi}) \\u2212(\\u03a0\\u22121\\u25e6hT \\u25e6\\u03a0)({xi})\\n\\u0003\\nk\\n\\r\\n\\r\\n2 \\u2264\\u03f5.\\nThis result is discussed in detail in Appendix C.\\n4\\nDISCUSSION AND CONCLUSIONS\\nJust like us, Wang et al. (2023) show that prefix-tuning can be a universal approximator. This\\napproach has several limitations: i) the model has exponential depth O(T\\u03f5\\u2212m); ii) reducing the\\napproximation error \\u03f5 requires increasing the model depth; iii) the prefix length is fixed, hence a\\nconstant function and a highly non-smooth function would have equal prefix lengths, and iv) it\"}\n\nIn total, 5 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved results do not contain the specific details about prefix-tuning from the paper with the ID '0905f55c-e8a3-5931-bd5a-dd9b69146ca1'. I will perform a more targeted retrieval from the database to find the exact section where prefix-tuning is mentioned.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_content FROM sections WHERE ref_paper_id = '0905f55c-e8a3-5931-bd5a-dd9b69146ca1' AND section_content LIKE '%prefix-tuning%';\")"}
{"role": "user", "content": "[Observation]: [Warning]: The SQL execution result is empty, please check the SQL first."}
{"role": "assistant", "content": "[Thought]: The SQL query did not return any results, which suggests that the term \"prefix-tuning\" might not be exactly as written in the database. I will try a more flexible search by using a broader term like \"parameter-efficient tuning\" or \"PEFT\" and then filter the results to find the specific mention of prefix-tuning.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_content FROM sections WHERE ref_paper_id = '0905f55c-e8a3-5931-bd5a-dd9b69146ca1' AND section_content LIKE '%parameter-efficient tuning%';\")"}
{"role": "user", "content": "[Observation]: [Warning]: The SQL execution result is empty, please check the SQL first."}
{"role": "assistant", "content": "[Thought]: The SQL query with \"parameter-efficient tuning\" also did not return any results. I will try a more general search for the method section and then manually filter the results to find the specific mention of prefix-tuning.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_content FROM sections WHERE ref_paper_id = '0905f55c-e8a3-5931-bd5a-dd9b69146ca1' AND section_title LIKE '%Method%';\")"}
{"role": "user", "content": "[Observation]:\n{\"section_content\":\"In this section, we describe MOCL-P, our proposed CL approach for language models, as illustrated in Figure 1, which tackles catastrophic forgetting and enhances knowledge transfer with superior parameter effciency at the same time.\"}\n{\"section_content\":\"In Section 6, we evaluate MOCL-P and prior continual learning methods on different benchmark datasets. Here, we provide a more detailed description of the baseline methods used in this work.\\nProgPrompt (Razdaibiedina et al., 2022): A parameter isolation-based continual learning method that assigns task-specifc parameters to avoid catastrophic forgetting. During continual learning, ProgPrompt progressively concatenates all task-specifc modules to encourage forward transfer.\\nEPI (Wang et al., 2023e): A parameter isolationbased method applicable to the class-incremental learning setting (CIL), where task identities are not given during inference. EPI introduces a nonparametric task identifcation module that identifes tasks during testing. Given reliable task identifcation, the CIL performance of EPI could be comparable to TIL, where the ground truth task identities are given during inference.\\nO-LoRA (Wang et al., 2023d): A parameter isolation-based method that learns tasks in different low-rank vector spaces that are kept orthogonal to each other to minimize interference. It mitigates catastrophic forgetting by constraining the gradient update of the current task to be orthogonal to the gradient space of past tasks. However, the orthogonality of the gradient subspace for individual tasks also limits knowledge transfer between tasks.\\nMoCL (Wang et al., 2024): Introduces a modular and compositional continual learning framework to compose the new module with existing ones based on task module matching. This compositional strategy enables effective knowledge transfer by considering task interaction.\\nAs discussed in Section 2, we build on the idea of MoCL (Wang et al., 2024) by utilizing task representations for module composition, ensuring that the model effectively reuses relevant knowledge from previous tasks. Beyond that, we introduce an adaptive pruning strategy to keep the language model lightweight and effective throughout the continual learning process, making it scalable for continual learning scenarios with long task sequences.\"}\n\nIn total, 2 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved method section content does not explicitly mention prefix-tuning. I will perform a similarity search in the vectorstore using the content from the method section to find more specific information about prefix-tuning, focusing on the paper with the ID '0905f55c-e8a3-5931-bd5a-dd9b69146ca1'.\n[Action]:\nClassicRetrieve(query='prefix-tuning method in the method section', limit=5, filter=\"pdf_id == '0905f55c-e8a3-5931-bd5a-dd9b69146ca1'\")"}
{"role": "user", "content": "[Observation]: [Error]: Failed to parse the parameters for action ClassicRetrieve from the response. ClassicRetrieve.__init__() got an unexpected keyword argument 'filter'."}
{"role": "assistant", "content": "[Thought]: The `filter` parameter is not supported in the `ClassicRetrieve` action. I will perform a similarity search without the filter and then manually filter the results to find the relevant content from the paper with the ID '0905f55c-e8a3-5931-bd5a-dd9b69146ca1'.\n[Action]:\nClassicRetrieve(query='prefix-tuning method in the method section', limit=5)"}
{"role": "user", "content": "[Observation]:\n{\"score\":0.6773,\"pdf_id\":\"1871627a-cab1-50d5-9c8a-6c834f40204a\",\"page_number\":3,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"3e3a6e1a-586a-564b-a1aa-a378fddbe93d\",\"text\":\"Method\\n% Tuned\\nWikiHop\\nArXiv\\n20-newsgroups\\nHyperpartisan\\nAcc\\nP\\nR\\nF1\\nP\\nR\\nF1\\nP\\nR\\nF1\\nRoBERTa PT\\n0.1\\n11.7\\n79.4\\n79.6\\n79.8\\n67.9\\n67.0\\n68.2\\n70.4\\n59.2\\n64.1\\nPrefix-Tuning\\n0.1\\n38.9\\n81.5\\n81.7\\n82.7\\n68.9\\n68.4\\n69.7\\n78.3\\n73.8\\n75.3\\nPrefix-Propagation\\n0.05\\n42.2\\n83.1\\n83.1\\n83.3\\n70.1\\n69.7\\n71.0\\n86.4\\n77.7\\n81.8\\nFine-Tuning\\n100\\n74.0\\n83.1\\n82.9\\n83.3\\n71.8\\n71.2\\n72.3\\n87.8\\n76.2\\n81.5\\nTable 2: Main results of prefix-propagation compared to prefix-tuning and traditional fine-tuning on the validation\"}\n{\"score\":0.6438,\"pdf_id\":\"0d901d65-8044-5d51-9a77-1f36d596d3dc\",\"page_number\":1,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"9d4f2f9e-60dd-50c9-b938-7e3e0f1c016e\",\"text\":\"Parameter-Efficient Tuning methods (PETs) are\\nproposed (Houlsby et al., 2019; Hu et al., 2022; Za-\\nken et al., 2022; Lester et al., 2021). By only tuning\\na small number of additional parameters, PETs can\\nbe comparable to full-parameter fine-tuning.\\nDespite the success of PETs, their underlying\\nmechanism remains an open problem. Recently,\\nseveral works have proposed to interpret PETs with\\noptimal control theory. Yang and Liu (2022) first\\nshow that the optimization in Prefix Tuning (Li and\"}\n{\"score\":0.6374,\"pdf_id\":\"1e96299e-0c82-5331-a9d9-049a9c56e1f8\",\"page_number\":10,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"fb7f09ef-0c68-5a2e-9ca0-4e0452b38d1a\",\"text\":\"fine-tuning methods.\\n10\"}\n{\"score\":0.6207,\"pdf_id\":\"1871627a-cab1-50d5-9c8a-6c834f40204a\",\"page_number\":1,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"ae3768ca-f77a-5414-8095-07f772b9f133\",\"text\":\"quantities of resources. Parameter-efficient fine-\\ntuning (PEFT) methods such as prefix-tuning (Li\\nand Liang, 2021; He et al., 2021a; Liu et al., 2022)\\naddress these concerns by reducing the number\\n*Work done during a student internship at Ingenuity Labs.\\n\\u2020Corresponding author.\\n1Our code is publicly available at https:\\/\\/github.\\ncom\\/MonliH\\/prefix-propagation\\nMethod\\n20-newsgroups\\nHyperpartisan\\nPrefix-Tuning\\n69.7\\n75.3\\nFine-Tuning\\n72.3\\n81.5\\nTable 1: Mean F1-Scores of prefix-tuning and fine-\"}\n{\"score\":0.6053,\"pdf_id\":\"db0edbfd-0e3a-5654-8a84-935c3a0a58da\",\"page_number\":4,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"d1dc35ba-7bec-5432-b3f1-9c738c30575c\",\"text\":\"f({xi}) \\u2212(\\u03a0\\u22121\\u25e6hT \\u25e6\\u03a0)({xi})\\n\\u0003\\nk\\n\\r\\n\\r\\n2 \\u2264\\u03f5.\\nThis result is discussed in detail in Appendix C.\\n4\\nDISCUSSION AND CONCLUSIONS\\nJust like us, Wang et al. (2023) show that prefix-tuning can be a universal approximator. This\\napproach has several limitations: i) the model has exponential depth O(T\\u03f5\\u2212m); ii) reducing the\\napproximation error \\u03f5 requires increasing the model depth; iii) the prefix length is fixed, hence a\\nconstant function and a highly non-smooth function would have equal prefix lengths, and iv) it\"}\n\nIn total, 5 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved results contain some relevant information about prefix-tuning, but none of them are from the paper with the ID '0905f55c-e8a3-5931-bd5a-dd9b69146ca1'. I will perform a more targeted retrieval from the database to find the exact section where prefix-tuning is mentioned in the method section of the paper.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_content FROM sections WHERE ref_paper_id = '0905f55c-e8a3-5931-bd5a-dd9b69146ca1' AND section_title LIKE '%Method%' AND section_content LIKE '%prefix-tuning%';\")"}
{"role": "user", "content": "[Observation]: [Warning]: The SQL execution result is empty, please check the SQL first."}
{"role": "assistant", "content": "[Thought]: The SQL query did not return any results, which suggests that the term \"prefix-tuning\" might not be exactly as written in the method section of the paper. I will try a more flexible search by using a broader term like \"PEFT\" or \"parameter-efficient fine-tuning\" and then filter the results to find the specific mention of prefix-tuning.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_content FROM sections WHERE ref_paper_id = '0905f55c-e8a3-5931-bd5a-dd9b69146ca1' AND section_content LIKE '%PEFT%';\")"}
{"role": "user", "content": "[Observation]:\n{\"section_content\":\"With the ever-increasing number of parameters in PLMs, it becomes increasingly important to develop machine learning systems that are more scalable, practical, and resource-effcient. In the context of continual learning, this necessitates parameter-effcient approaches that can effectively integrate new knowledge without excessive computational and storage costs as the number of tasks in the continual learning sequence increases.\\nRecent advancements in continual learning integrate parameter isolation with parameter-effcient fne-tuning (PEFT), i.e., they allocate task-specifc PEFT modules for learning and inference (Razdaibiedina et al., 2022; Wang et al., 2023e,d, 2024). Various PEFT techniques, such as adapter tuning (Houlsby et al., 2019), prefx tuning (Li and Liang, 2021), and LoRA (Huang, 2022), have been applied in continual learning. Although they reduce the number of training parameters to some extent by freezing the PLM and only updating the PEFT module parameters, it remains challenging to apply them to long-sequence benchmarks that consist of hundreds of tasks. The continuous expansion of task-specifc modules leads to signifcant computational overhead as the number of tasks increases.\\nOur approach builds on the idea of Wang et al. (2024) by utilizing task representations for module composition, ensuring that the model effectively reuses relevant knowledge from previous tasks. Beyond that, we introduce an adaptive pruning strategy to keep the language model lightweight and effective throughout the continual learning process, thus making it scalable for continual learning scenarios with long task sequences.\"}\n{\"section_content\":\"We inherit the idea of parameter isolation with parameter-effcient fne-tuning (PEFT) introduced in prior work (Razdaibiedina et al., 2022; Wang et al., 2023d,e, 2024), which allocates trainable PEFT parameters for each task while keeping other parameters frozen.\\nWe utilize prefx-tuning (Li and Liang, 2021) as the PEFT module in consistency with prior works.2 For each task in the CL sequence, we add a set of trainable PEFT parameters, i.e., a task-specifc module, to the pretrained language model (PLM) for downstream task fne-tuning. Instead of updating the whole model, only a small number of the PEFT parameters are optimized. Once training on one given task is completed, the corresponding PEFT module is frozen to preserve the task-specifc knowledge in the subsequent training process, thus avoiding catastrophic forgetting.\"}\n{\"section_content\":\"When the CL learning sequence scales to dozens or hundreds of tasks, the need for effciency increases. Continuously expanding the module pool to assign a PEFT module to each task, as done in prior works (Wang et al., 2023e; Razdaibiedina et al., 2022; Wang et al., 2024), leads to large computational costs. In contrast, we employ an adaptive pruning strategy to make our approach scalable in scenarios with long task sequences.\\nIn particular, our pruning strategy aims at preserving only those modules that add new and valuable information to the set of already selected modules. Given a set of selected modules $\\\\{P_{0},\\\\dotsc,P_{m-1}\\\\}$ from previous tasks and a new task $T_{n}$ , $(m\\\\,-\\\\,1\\\\,\\\\,\\\\ll\\\\,\\\\,n)$ , we initialize a trainable module $P_{m}$ and add it temporarily to the model. For each instance4 $\\\\boldsymbol{x}_{n}^{i}$ of the current task $T_{n}$ , we compute the matching weights $\\\\left\\\\{\\\\alpha_{0},\\\\dots,\\\\alpha_{m}\\\\right\\\\}$ by matching $x_{n}$ with all task feature vectors $\\\\{v_{0},\\\\ldots,v_{m}\\\\}$ from our current set of modules. Specifcally, we calculate the cosine similarity between $x_{n}$ and $\\\\{v_{0},\\\\ldots,v_{m}\\\\}$ as module matching weights $\\\\alpha_{0:m}$ as detailed in Section 4.2.\\nThen, we compose the new and old modules via a weighted sum: $\\\\begin{array}{r}{P_{m}^{\\\\prime}=\\\\sum_{k=0}^{m}\\\\alpha_{k}P_{k}}\\\\end{array}$ . Finally, the composed module $P_{m}^{\\\\prime}$ is  combined with the PLM, consisting of all the selected module components up to the current task.\\nAfter the training on $T_{n}$ is fnished (specifcally, the training of the PEFT module $P_{m}$ and the task feature vector $v_{m}$ ), we compare $\\\\alpha_{m}$ , the matching weight of the new module $P_{m}$ , with a threshold5 to decide whether to prune $P_{m}$ or leave it in the set of existing modules. The intuition is that large matching weights indicate new and valuable information, while task modules with small matching weights do not contribute new information and, thus can, be discarded.\"}\n{\"section_content\":\"The training objective for the $n$ -th task in the continual learning sequence is to fnd the PEFT module $P_{m}$ and the task feature vector $v_{m}$ that minimize the cross-entropy loss of training examples, and, at the same time, maximize the cosine similarity between the task-specifc feature vector $v_{m}$ and the corresponding task input embeddings $x_{n}$ :\\nHere $\\\\begin{array}{r}{P_{n}^{\\\\prime}\\\\,=\\\\,\\\\sum_{k=1}^{m}\\\\alpha_{k}P_{k}}\\\\end{array}$ is the weighted summation of the  new trainable task module and the existing frozen task modules as introduced in Section 4.3. During inference, MOCL-P performs per-instance task module matching and composition. The resulting module is combined with the PLM for inference.\"}\n{\"section_content\":\"To compare different CL methods, we include the following baselines: (1) Sequential fne-tuning continuously fne-tunes the language model on the task sequence: (a) Seq FT (F) refers to all model parameters are updated (fully fne-tuning), while (b) Seq FT only fne-tunes the PEFT parameters; (2) Pertask FT trains a separate PEFT module for each task; and the parameter isolation-based methods (3) ProgPrompt (Razdaibiedina et al., 2022) assigns task-specifc parameters and progressively concatenates modules of all tasks to encourage knowledge transfer; (4) EPI (Wang et al., 2023e) introduces a non-parametric task identifcation technique to select modules for task training and inference; (5) O-LoRA (Wang et al., 2023d) learns tasks in different low-rank vector spaces that are kept orthogonal to each other to minimize interference; and (6) MoCL (Wang et al., 2024) introduces a modular and compositional framework that progressively expands task-specifc modules and composes the new module with existing ones to facilitate knowledge transfer. A detailed description of these methods can be found in Appendix A.2.2.\"}\n\nIn total, 5 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved sections contain detailed information about prefix-tuning as the PEFT module. I will extract the relevant parts and formulate the final answer.\n[Action]:\nGenerateAnswer(answer='Prefix-tuning, as the PEFT module, involves adding a set of trainable parameters to the pretrained language model (PLM) for each task in the continual learning sequence. These parameters, or task-specific modules, are optimized during fine-tuning, while the rest of the model remains frozen. Once training on a task is completed, the corresponding PEFT module is frozen to preserve task-specific knowledge and avoid catastrophic forgetting. This approach ensures that the model remains lightweight and effective, making it scalable for continual learning scenarios with long task sequences.')"}
{"role": "user", "content": "[Observation]: Prefix-tuning, as the PEFT module, involves adding a set of trainable parameters to the pretrained language model (PLM) for each task in the continual learning sequence. These parameters, or task-specific modules, are optimized during fine-tuning, while the rest of the model remains frozen. Once training on a task is completed, the corresponding PEFT module is frozen to preserve task-specific knowledge and avoid catastrophic forgetting. This approach ensures that the model remains lightweight and effective, making it scalable for continual learning scenarios with long task sequences."}
