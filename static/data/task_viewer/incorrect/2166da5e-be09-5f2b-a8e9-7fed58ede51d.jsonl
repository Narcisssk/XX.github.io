{"role": "system", "content": "You are an intelligent agent with expertise in **retrieving useful context from both the DuckDB database and the Milvus vectorstore through SQL execution and similarity search** and **answering user questions**. You will be given a natural language question concerning PDF files, along with the schema of both the database and the vectorstore. Your ultimate goal is to answer the input question with pre-defined answer format. The DuckDB database contains all parsed content of raw PDF files, while the Milvus vectorstore encodes specific column cells from the database as vectors. You can predict executable actions, interact with the hybrid environment (including database and vectorstore) across multiple turns, and retrieve necessary context until you are confident in resolving the question.\n\n--------\n\n## Task Description\nEach task consists of the following parts:\n\n[Question]: User question regarding the PDF, e.g., Is there any ...?\n[Answer Format]: it describes the format of the final answer, e.g., the answer is \"Yes\" or \"No\" without punctuation.\n[Anchor PDF]: Optional, a python str or list, the PDF(s) you must use to answer the question.\n[Reference PDF]: Optional, a python str or list, the PDF(s) you may use to answer the question.\n[Conference]: Optional, a python str or list, the conference(s) and year(s) of the relevant papers for retrieval.\n[Database Schema]: A detailed serialized schema of the DuckDB database for reference when generating SQL queries. It includes 1) tables, 2) columns and their data types, 3) descriptions for these schema items, and 4) primary key and foreign key constraints.\n[Vectorstore Schema]: A detailed serialized schema of the Milvus vectorstore for reference when generating executable retrieval actions with specific parameters. It includes 1) collections, 2) fields, 3) encodable (table, column) pairs in the relational database where the vectorized content originates, and 4) grammar for valid filter rules.\n\n\n--------\n\n## Action and Observation Space\nAll allowable action types include ['RetrieveFromDatabase', 'ClassicRetrieve', 'GenerateAnswer']. Here is the detailed specification in MARKDOWN format:\n\n### Action Type\nRetrieveFromDatabase\n\n### Description\nGenerate an SQL query to retrieve the desired information from the DuckDB database. Please refer to the concrete database schema to produce a valid and executable SQL.\n\n### Observation\nThe observation space is the execution result of the SQL query. You do not need to worry about the actual execution, we will perform it for you. If the SQL failed to execute, we will return the error message. Extremely long SQL output will be truncated.\n\n### Syntax and Parameters (MARKDOWN Format)\nRetrieveFromDatabase(sql: str)\n- sql: str, required. The concrete DuckDB SQL query to execute and retrieve results.\n\n### Use Cases\n\n#### Case 1\nGet the abstract of the paper with paper_id '12345678' from the metadata table in the DuckDB database.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT abstract FROM metadata WHERE paper_id = '12345678';\")\n\n\n#### Case 2\nFind which page in the paper with paper_id '12345678' contains Figure 3.\n\n[Action]: RetrieveFromDatabase(sql=\"SELECT pages.page_number FROM images JOIN pages JOIN metadata ON images.ref_page_id = pages.page_id AND pages.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '12345678' AND images.image_caption LIKE '%Figure 3%';\")\n\n\n----\n\n### Action Type\nClassicRetrieve\n\n### Description\nGiven a query text, retrieve relevant context from the Milvus vectorstore.\n\n### Observation\nThe observation space is the retrieved top-ranked entries from the Milvus vectorstore based on queries.\n\n### Syntax and Parameters (MARKDOWN Format)\nClassicRetrieve(query: str, limit: int = 5)\n- query: str, required. The query text will be encoded and used to search for relevant context. You can rephrase the original user question to obtain a more clear and structured query requirement.\n- limit: int, optional, default to 5. The number of top-ranked context to retrieve. Please set it to a positive integer to limit the number of returned results. Extremely large limit values may be truncated.\n\n### Use Cases\n\n#### Case 1\nRetrieve top 5 pieces about a certain topic.\n\n[Action]: ClassicRetrieve(query='Is there any work about the topic structured RAG?')\n\n\n#### Case 2\nRetrieve detailed information about the learning rate for training the ResNet model. The top 4 most relevant entries will be returned based on the query.\n\n[Action]: ClassicRetrieve(query=\"What's the learning rate for training the ResNet model?\", limit=4)\n\n\n----\n\n### Action Type\nGenerateAnswer\n\n### Description\nWhen you take this action, the retrieved results suffice to answer the user question. PLEASE STRICTLY ADHERE TO THE ANSWER FORMAT FOR THE CURRENT QUESTION.\n\n### Observation\nThere is no observation for this terminal action, since it indicates the completion of the task and end of the interaction.\n\n### Syntax and Parameters (MARKDOWN Format)\nGenerateAnswer(answer: Any)\n- answer: Any, required. The final answer to the user question. Please adhere to the answer format for the current question.\n\n### Use Cases\n\n#### Case 1\nThe answer to the user question is 42.\n\n[Action]: GenerateAnswer(answer=42)\n\n\n#### Case 2\nThe answer to the user question is a list of strings: ['Results', 'Discussion'].\n\n[Action]: GenerateAnswer(answer=['Results', 'Discussion'])\n\n\n\n--------\n\n## Interaction Framework\n\nThe main interaction procedure proceeds like this:\n\n----\n\n[Thought]: ... reasoning process, why to take this action ...\n[Action]: ... which action to take, please strictly conform to the action specification ...\n[Observation]: ... execution results or error message after taking the action ...\n\n... # more interleaved triplets of ([Thought], [Action], [Observation])\n\n[Thought]: ... reasoning process to produce the final answer ...\n[Action]: ... the terminate action `GenerateAnswer`, there is no further observation ...\n\n----\n\nIn general, the main interaction loop consists of an interleaved of triplets ([Thought], [Action], [Observation]), except the last `GenerateAnswer` action which does not have \"[Observation]:\". You need to predict the \"[Thought]: ...\" followed by the \"[Action]: ...\" for each turn, and we will execute your action in the environment and provide the \"[Observation]: ...\" for the previous action.\n\n--------\n\n## Suggestions or Hints for Agent Interaction\n\n1. Explore multiple retrieval strategies. For example:\n- Experiment with different (table, column) pairs to extract diverse types of information.\n- Query various embedding models (collections) to find the most relevant context.\n\n2. Combine both structured and unstructured data. Concretely:\n- Use SQL queries to retrieve precise facts and structured data. Pay special attention to morphological variations in cell values.\n- Perform similarity searches in the vectorstore to capture semantic relationships and hidden insights.\n\n3. Iterate and refine:\n- If SQL execution result is not satisfactory, try alternative SQL queries to explore the database content carefully.\n- If the vector-based neural retrieval is insufficient, try alternative approaches or parameter settings.\n- Use your findings to validate or enrich the final response.\n\n4. Ensure confidence. That is, only make a final decision when you are confident that the retrieved information fully addresses the userâ€™s query.\n\n\nRemember that, for each question, you only have 20 interaction turns at most. Now, let's start!\n"}
{"role": "user", "content": "[Question]: According to Table 2, which models perform the highest on each of the 8 tasks of GLUE?\n[Answer Format]: Your answer should a python list of the name of models reaching highest performance on MNLI, QQP, QNLI, SST-2, STS-B, MRPC, RTE, and CoLA respectively. If two models get the same score, you can use \"and\" to connect their names, e.g. A and B.\n[Anchor PDF]: '9b06b24b-0afc-5ccb-95fc-c662395d291d'\n[Database Schema]: The database schema for /home/htc981/workspace/project/HNS-RAG/data/database/ai_research/ai_research.sql is as follows:\n/* database ai_research: This database contains information about AI research papers. Each PDF file is represented or parsed via different views, e.g., pages, sections, figures, tables, and references. We also extract the concrete content inside each concrete element via OCR.\n*/\n/* table metadata: This table stores metadata about each paper, including the number of pages, paper path and paper id.\n*/\nCREATE TABLE IF NOT EXISTS metadata (\n\tpaper_id UUID, -- A unique identifier for this paper.\n\ttitle VARCHAR, -- The title of this paper.\n\tabstract VARCHAR, -- The abstract of this paper.\n\tnum_pages INTEGER, -- The number of pages in this paper.\n\tconference_full VARCHAR, -- The full name of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tconference_abbreviation VARCHAR, -- The abbreviation of the conference where this paper was published. `uncategorized` if the paper has not been published yet.\n\tpub_year INTEGER, -- The year when this paper was published.\n\tvolume VARCHAR, -- The volume of the conference where this paper was published. e.g. findings.\n\tdownload_url VARCHAR, -- The url from which the paper can be downloaded.\n\tbibtex VARCHAR, -- The bibtex of this paper.\n\tauthors VARCHAR[], -- The full names of authors of this paper.\n\tpdf_path VARCHAR, -- The path to the PDF file of this paper.\n\ttldr VARCHAR, -- A brief summary of the paper's main idea or findings generated by LLM based on title and abstract.\n\ttags VARCHAR[], -- Keywords representing the paper's topics, methods, or applications generated by LLM based on title and abstract.,\n\tPRIMARY KEY (paper_id)\n);\n/* table pages: This table stores information of the pages in the papers, including their content, size and their order within the paper. The pagesare extracted using PyMuPDF.\n*/\nCREATE TABLE IF NOT EXISTS pages (\n\tpage_id UUID, -- A unique identifier for each page.\n\tpage_number INTEGER, -- The page number in the current paper, starting from 1.\n\tpage_width INTEGER, -- The pixel width of the current page.\n\tpage_height INTEGER, -- The pixel height of the current page.\n\tpage_content VARCHAR, -- The content of the page.\n\tpage_summary VARCHAR, -- A brief summary of the page content, generated by LLM, focusing on key information and describing the page content.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (page_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table images: This table stores the information about images in each paper. The images are extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS images (\n\timage_id UUID, -- The unique identifier of the image.\n\timage_caption VARCHAR, -- The caption of this image, \"\" if it doesn't have one.\n\timage_summary VARCHAR, -- A brief summary of the image, generated by LLM, focusing on key information and describing the image.\n\tbounding_box INTEGER[4], -- The bounding box of the figure in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height which are used to determine the shape of the rectangle.\n\tordinal INTEGER, -- Each figure is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (image_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table chunks: This table contains the information of each chunk of text (chunk size = 512 tokens with no overlapping) in each page of the paper. A chunk is a sub-text that is extracted from the main text using langchain, such as a sentence or a paragraph.\n*/\nCREATE TABLE IF NOT EXISTS chunks (\n\tchunk_id UUID, -- A unique identifier for each chunk of text.\n\ttext_content VARCHAR, -- The text content of the current chunk.\n\tordinal INTEGER, -- Each chunk is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table.,\n\tPRIMARY KEY (chunk_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table tables: This table stores information about tables extracted from pages using MinerU, including content (in html format), bounding box and summary of each table generated by LLM.\n*/\nCREATE TABLE IF NOT EXISTS tables (\n\ttable_id UUID, -- A unique identifier for each table.\n\ttable_caption VARCHAR, -- Caption of the table, showing key information of the table.\n\ttable_content VARCHAR, -- The content of the table in html format.\n\ttable_summary VARCHAR, -- A brief summary of the table content generated by LLM, focusing on key information and describing the table content.\n\tbounding_box INTEGER[4], -- The bounding box of the table in the format [x0, y0, w, h], where (x0, y0) represents the coordinates of the top-left corner and (w, h) represents the width and height.\n\tordinal INTEGER, -- Each table is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this table is located.,\n\tPRIMARY KEY (table_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table sections: This table contains the text content of each section in the paper, e.g. `Introduction`, `Experiment`, `Conclusion`, `Reference`. The sections are extracted using PyMuPDF or MinerU.\n*/\nCREATE TABLE IF NOT EXISTS sections (\n\tsection_id UUID, -- A unique identifier for each section of text.\n\tsection_title VARCHAR, -- The title of the current section.\n\tsection_content VARCHAR, -- The text content of the current section.\n\tsection_summary VARCHAR, -- A brief summary of the section content generated by LLM, focusing on key information and describing the section content.\n\tordinal INTEGER, -- Each section is labeled with one distinct integer number in the paper, which starts from 0.\n\tpage_numbers INTEGER[], -- A list of page numbers where current section is located in the relevant paper.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.,\n\tPRIMARY KEY (section_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id)\n);\n/* table equations: This table stores information about equations extracted from pages using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS equations (\n\tequation_id UUID, -- A unique identifier for each equation.\n\tequation_content VARCHAR, -- Content of the equation in latex format.\n\tordinal INTEGER, -- Each equation is labeled with one distinct integer number in the current page, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the paper ID in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the page ID in the `pages` table where this equation is located.,\n\tPRIMARY KEY (equation_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n/* table reference: This table stores information about references extracted using MinerU.\n*/\nCREATE TABLE IF NOT EXISTS reference (\n\treference_id UUID, -- A unique identifier for each reference.\n\treference_content VARCHAR, -- Content of the reference.\n\tordinal INTEGER, -- Each reference is labeled with one distinct integer number according to its order in the paper, which starts from 0.\n\tref_paper_id UUID, -- A foreign key linking to the `paper_id` in the `metadata` table.\n\tref_page_id UUID, -- A foreign key linking to the `page_id` in the `pages` table where this reference is located.,\n\tPRIMARY KEY (reference_id),\n\tFOREIGN KEY (ref_paper_id) REFERENCES metadata(paper_id),\n\tFOREIGN KEY (ref_page_id) REFERENCES pages(page_id)\n);\n[Vectorstore Schema]: The vectorstore schema for ai_research is as follows. You can try collections with different encoding models or modalities:\n[\n    {\n        \"collection_name\": \"text_bm25_en\",\n        \"modality\": \"text\",\n        \"embed_type\": \"bm25\",\n        \"embed_model\": \"en\",\n        \"description\": \"This collection is used to store the sparse embeddings generated by the BM25 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric inner-product (IP).\",\n        \"fields\": [\n            {\n                \"name\": \"id\",\n                \"dtype\": \"INT64\",\n                \"is_primary\": true,\n                \"description\": \"The unique id for each encoded text vector in this collection.\"\n            },\n            {\n                \"name\": \"vector\",\n                \"dtype\": \"SPARSE_FLOAT_VECTOR\",\n                \"description\": \"The encoded sparse vector of the text content generated by the BM25 model. Note that, the raw text content can be uniquely identified by the triplet fields below: `table_name`, `column_name`, `primary_key`.\"\n            },\n            {\n                \"name\": \"pdf_id\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The unique id of the PDF file stored in the relational database that the encoded text belongs to. This field can be used to quickly filter the search space.\"\n            },\n            {\n                \"name\": \"page_number\",\n                \"dtype\": \"INT16\",\n                \"description\": \"The page number in the PDF file that the encoded text belongs to (starting from 1). This field can be used to quickly filter the search space. Value -1 means unknown.\"\n            },\n            {\n                \"name\": \"table_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which table in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"column_name\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"Which column under `table_name` in the relational database is the text content from.\"\n            },\n            {\n                \"name\": \"primary_key\",\n                \"dtype\": \"VARCHAR\",\n                \"description\": \"The primary key value of `table_name` (or which row) in the relational database that the text content belongs to. Note that, the triplet (`table_name`, `column_name`, `primary_key`) can be used to construct a one-to-one mapping between the `text` field in the current vectorstore and the cell entry in the relational database.\"\n            }\n        ]\n    },\n    {\n        \"collection_name\": \"text_sentence_transformers_all_minilm_l6_v2\",\n        \"modality\": \"text\",\n        \"embed_type\": \"sentence_transformers\",\n        \"embed_model\": \"all-MiniLM-L6-v2\",\n        \"description\": \"This collection is used to store the embeddings generated by the all-MiniLM-L6-v2 model for all encodable text content in another relational database. The similary search is based on field `vector` with metric COSINE.\",\n        \"fields\": \"The fields of this collection are similar to the `text_bm25_en` collection.\"\n    }\n]\n\nThe following lists all encodable (table_name, column_name, encode_modality) information from the corresponding DuckDB database, where the encoded vector entries are sourced. Note that, for text modality, we directly encode cell values from the `table_name.column_name`; for image modality, we encode the cropped images for `page_number` in `pdf_id` with bounding boxes from `table_name.column_name`. You can leverage them for filter condition during similarity search:\n[\n    [\n        \"metadata\",\n        \"title\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"abstract\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"bibtex\",\n        \"text\"\n    ],\n    [\n        \"metadata\",\n        \"tldr\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_content\",\n        \"text\"\n    ],\n    [\n        \"pages\",\n        \"page_summary\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_caption\",\n        \"text\"\n    ],\n    [\n        \"images\",\n        \"image_summary\",\n        \"text\"\n    ],\n    [\n        \"chunks\",\n        \"text_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_caption\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_content\",\n        \"text\"\n    ],\n    [\n        \"tables\",\n        \"table_summary\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_title\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_content\",\n        \"text\"\n    ],\n    [\n        \"sections\",\n        \"section_summary\",\n        \"text\"\n    ],\n    [\n        \"equations\",\n        \"equation_content\",\n        \"text\"\n    ],\n    [\n        \"reference\",\n        \"reference_content\",\n        \"text\"\n    ]\n]\n\nHere are the operators that you can use in the filtering condition for the vectorstore:\n{\n    \"operators\": {\n        \"logical\": [\n            {\n                \"symbol\": \"not\",\n                \"example\": \"not expr\",\n                \"description\": \"True if expr is false.\"\n            },\n            {\n                \"symbol\": \"and\",\n                \"example\": \"expr1 and expr2\",\n                \"description\": \"True if both expr1 and expr2 are true.\"\n            },\n            {\n                \"symbol\": \"or\",\n                \"example\": \"expr1 or expr2\",\n                \"description\": \"True if either expr1 or expr2 are true.\"\n            }\n        ],\n        \"binary arithmetic\": [\n            {\n                \"symbol\": \"+\",\n                \"example\": \"a + b\",\n                \"description\": \"Add the two operands.\"\n            },\n            {\n                \"symbol\": \"-\",\n                \"example\": \"a - b\",\n                \"description\": \"Subtract the second operand from the first operand.\"\n            },\n            {\n                \"symbol\": \"*\",\n                \"example\": \"a * b\",\n                \"description\": \"Multiply the two operands.\"\n            },\n            {\n                \"symbol\": \"/\",\n                \"example\": \"a / b\",\n                \"description\": \"Divide the first operand by the second operand.\"\n            },\n            {\n                \"symbol\": \"**\",\n                \"example\": \"a ** b\",\n                \"description\": \"Raise the first operand to the power of the second operand.\"\n            },\n            {\n                \"symbol\": \"%\",\n                \"example\": \"a % b\",\n                \"description\": \"Divide the first operand by the second operand and yield the remainder portion.\"\n            }\n        ],\n        \"relational\": [\n            {\n                \"symbol\": \"<\",\n                \"example\": \"a < b\",\n                \"description\": \"True if a is less than b.\"\n            },\n            {\n                \"symbol\": \">\",\n                \"example\": \"a > b\",\n                \"description\": \"True if a is greater than b.\"\n            },\n            {\n                \"symbol\": \"==\",\n                \"example\": \"a == b\",\n                \"description\": \"True if a is equal to b. Please use **two** equal signs for equality comparison.\"\n            },\n            {\n                \"symbol\": \"!=\",\n                \"example\": \"a != b\",\n                \"description\": \"True if a is not equal to b.\"\n            },\n            {\n                \"symbol\": \"<=\",\n                \"example\": \"a <= b\",\n                \"description\": \"True if a is less than or equal to b.\"\n            },\n            {\n                \"symbol\": \">=\",\n                \"example\": \"a >= b\",\n                \"description\": \"True if a is greater than or equal to b.\"\n            },\n            {\n                \"symbol\": \"in\",\n                \"example\": \"a in [b, c, ...]\",\n                \"description\": \"True if a is equal to any of the values in the list.\"\n            }\n        ],\n        \"array operations\": [\n            {\n                \"symbol\": \"[]\",\n                \"example\": \"bbox[0]\",\n                \"description\": \"This expression gets the first element in array bbox. For example, 'bbox[0] < 50' evaluates to true if the value of bbox[0] is less than 50.\"\n            },\n            {\n                \"symbol\": \"array_contains\",\n                \"example\": \"array_contains(bbox, 100)\",\n                \"description\": \"This expression evaluates to true if array bbox contains element 100.\"\n            },\n            {\n                \"symbol\": \"array_length\",\n                \"example\": \"array_length(int_array) == 4\",\n                \"description\": \"This expression evaluates to true if int_array contains exactly 4 elements.\"\n            }\n        ]\n    },\n    \"use cases\": [\n        {\n            \"example\": \"table_name == 'chunks' and column_name == 'text_content'\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and column_name equal to 'text_content'.\"\n        },\n        {\n            \"example\": \"table_name == 'chunks' and primary_key in ['123', '456', '789']\",\n            \"description\": \"Filter the results with table_name equal to 'chunks' and primary_key equal to any of the values in the list ['123', '456', '789'].\"\n        },\n        {\n            \"example\": \"bbox[0] + bbox[2] <= 100 and bbox[1] + bbox[3] <= 300 and pdf_id == '123456' and page_number == 1\",\n            \"description\": \"For image modality, filter results to include only image regions that are entirely within the upper-left quadrant of page 1 in the PDF with ID '123456', assuming the page dimensions are 200 (width) x 600 (height).\"\n        }\n    ]\n}"}
{"role": "assistant", "content": "[Thought]: To answer the question, we need to find the information about Table 2 in the paper with the given PDF ID. We can start by retrieving the content of Table 2 from the `tables` table in the database.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT table_content, table_summary FROM tables JOIN pages ON tables.ref_page_id = pages.page_id JOIN metadata ON pages.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '9b06b24b-0afc-5ccb-95fc-c662395d291d' AND tables.ordinal = 2;\")"}
{"role": "user", "content": "[Observation]: [Warning]: The SQL execution result is empty, please check the SQL first."}
{"role": "assistant", "content": "[Thought]: It seems that the SQL query did not return any results. This might be due to the ordinal number of Table 2 being incorrect or the table not existing in the specified paper. Let's try a different approach by searching for the table content using the vectorstore.\n[Action]:\nClassicRetrieve(query='Table 2 GLUE performance', limit=5)"}
{"role": "user", "content": "[Observation]:\n{\"score\":0.65,\"pdf_id\":\"ed5e94af-9c4d-53f0-8d06-68bab064784a\",\"page_number\":16,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"6076d548-1bf0-5af5-875a-ab4fe4b7c1a3\",\"text\":\"set. We conducted experiments by selecting two datasets from each GLUE benchmark based on their\\nsize scale. Additionally, specific details on the fine-tuning methods can be found in Table 5.\\n16\"}\n{\"score\":0.6312,\"pdf_id\":\"7dc0d16f-d19d-54fa-99d4-8c3c81424dca\",\"page_number\":17,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"2feb26f1-6e92-57d2-bc2f-3d87efb7fcc3\",\"text\":\"Table 8: Official GLUE benchmark results from the referenced papers [32, 13, 23].\\nMethod\\nSource #Params\\nGLUE Tasks\\nGLUE\\nAvg\\nMNLI QNLI QQP RTE SST2 MRPC COLA STS\\nBERT\\nOurs\\n110M\\n84.4\\n90.3\\n89.7\\n77.1\\n92.3\\n90.7\\n54.2\\n89.1\\n83.5\\n[32]\\n110M\\n84.1\\n89.8\\n91.2\\n77.2\\n91.2\\n87.5\\n54.6\\n88.9\\n83.2\\n[23]\\n110M\\n82.5\\n91.0\\n87.0\\n69.0\\n93.0\\n83.0\\n73.0\\n89.0\\n83.3\\n[13]\\n110M\\n-\\n-\\n-\\n-\\n-\\n-\\n-\\n-\\n79.6\\nMLP-Mixer\\nOurs\\n112M\\n77.2\\n82.4\\n87.6\\n67.3\\n90.5\\n86.5\\n43.0\\n85.2\\n77.5\\nFNet\\nOurs\\n112M\\n74.9\\n82.1\\n85.7\\n63.6\\n87.6\\n86.4\\n42.7\\n83.1\\n75.8\\n[23]\\n83M\\n72.5\\n80.0\\n83.0\"}\n{\"score\":0.6168,\"pdf_id\":\"adf9d5f3-c29d-5b08-ba46-c9971143980d\",\"page_number\":16,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"53dcff6b-d386-536b-983b-3d922db5a3ae\",\"text\":\"we conduct extensive experiments on 8 GLUE tasks, including CoLA, SST-2, MRPC, QQP, STS-B,\\nMNLI, QNLI, and RTE. We present the dataset statistics of GLUE (Wang et al., 2018) in Table 6.\\n16\"}\n{\"score\":0.6096,\"pdf_id\":\"3d3a4451-78f0-5fe3-a51f-ec58bcd24702\",\"page_number\":12,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"459d518d-43c2-55f1-bbfb-01739500f2aa\",\"text\":\"MNLI-mm\\n-\\n9.8k\\nAccuracy\\nTable 10: The summary statistics of GLUE benchmark.\\nThe summary statistics of GLUE and the re-\\nported evaluation metric is listed in Table 10. The\\nlicense for GLUE is CC-BY-4.0.\\nB.2\\nExperiment Settings\\nFor different fine-tuning techniques, we experiment\\nwith the same hyper-parameter setting, which are\\nlisted in Table 11.\\nB.3\\nGLUE Test Set Results\\nThe conventional evaluation procedures of the pre-\\nvious research (R3F, RDrop, ChildTuning, Noisy-\"}\n{\"score\":0.6041,\"pdf_id\":\"5ac99291-c8e6-5234-a464-e7967c51ce0a\",\"page_number\":7,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"a74678be-d391-5745-9af7-670e2c48e852\",\"text\":\"Table 2: Performance comparison of different methods on the dev set of the GLUE benchmark. CoDIR uses\\nRoBERTa-base as the teacher, and we report the median performance of this method copied from published paper.\\nThe results in bold indicate the best result, while the results underlined indicate the second-best result.\\nMethod\\n#Param\\nSpeed-up\\nGLUE\\nCoLA\\nMNLI\\nMRPC\\nQNLI\\nQQP\\nRTE\\nSST-2\\nSTS-B\\n(Matt.)\\n(Acc -m\\/-mm)\\n(F1\\/Acc)\\n(Acc)\\n(F1\\/Acc)\\n(Acc.)\\n(Acc.)\\n(Pear.\\/Spear.)\\nTeacher Network: BERT-Base\"}\n\nIn total, 5 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The retrieved context includes a table with GLUE benchmark results. We can extract the highest-performing models for each task from this table. Let's parse the relevant information from the retrieved chunks.\n[Action]:\nClassicRetrieve(query='Table 2 GLUE performance', limit=1)"}
{"role": "user", "content": "[Observation]:\n{\"score\":0.65,\"pdf_id\":\"ed5e94af-9c4d-53f0-8d06-68bab064784a\",\"page_number\":16,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"6076d548-1bf0-5af5-875a-ab4fe4b7c1a3\",\"text\":\"set. We conducted experiments by selecting two datasets from each GLUE benchmark based on their\\nsize scale. Additionally, specific details on the fine-tuning methods can be found in Table 5.\\n16\"}\n\nIn total, 1 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The top result does not contain the table content we need. Let's try another approach by retrieving the table content from the `tables` table in the database using a different filter.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT table_content, table_summary FROM tables JOIN pages ON tables.ref_page_id = pages.page_id JOIN metadata ON pages.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '9b06b24b-0afc-5ccb-95fc-c662395d291d' AND table_summary LIKE '%GLUE%';\")"}
{"role": "user", "content": "[Observation]:\n{\"table_content\":\"<html><body><table><tr><td>Model<\\/td><td>ReCoRD<\\/td><td>MultiRC<\\/td><td>BoolQ<\\/td><td>WiC<\\/td><td>WSC<\\/td><td>COPA<\\/td><td>CB<\\/td><td>RTE<\\/td><td>Avg.<\\/td><\\/tr><tr><td>FINETUNE<\\/td><td>71.610.84<\\/td><td>71.641.15<\\/td><td>76.801.34<\\/td><td>66.382.08<\\/td><td>63.460.00<\\/td><td>68.606.74<\\/td><td>81.964.33<\\/td><td>73.472.05<\\/td><td>71.742.32<\\/td><\\/tr><tr><td>ADAPTER<\\/td><td>79.020.62<\\/td><td>72.840.48<\\/td><td>76.711.38<\\/td><td>65.581.56<\\/td><td>63.460.00<\\/td><td>70.204.13<\\/td><td>84.823.18<\\/td><td>72.892.54<\\/td><td>73.191.74<\\/td><\\/tr><tr><td>PROPETL<\\/td><td>80.290.24<\\/td><td>73.070.49<\\/td><td>76.580.78<\\/td><td>66.601.65<\\/td><td>63.460.00<\\/td><td>70.603.44<\\/td><td>84.463.86<\\/td><td>74.192.03<\\/td><td>73.691.53<\\/td><\\/tr><tr><td>COMPACTER++<\\/td><td>77.692.67<\\/td><td>70.440.57<\\/td><td>75.880.96<\\/td><td>66.461.63<\\/td><td>63.460.00<\\/td><td>68.304.00<\\/td><td>87.683.62<\\/td><td>72.022.21<\\/td><td>72.741.96<\\/td><\\/tr><tr><td>(IA)3<\\/td><td>75.270.23<\\/td><td>70.320.49<\\/td><td>76.310.79<\\/td><td>67.071.68<\\/td><td>63.350.32<\\/td><td>69.303.37<\\/td><td>87.324.57<\\/td><td>72.562.23<\\/td><td>72.691.71<\\/td><\\/tr><tr><td>LORA<\\/td><td>79.600.46<\\/td><td>71.960.36<\\/td><td>76.580.74<\\/td><td>65.141.17<\\/td><td>63.460.00<\\/td><td>68.204.05<\\/td><td>86.433.17<\\/td><td>70.408.33<\\/td><td>72.722.28<\\/td><\\/tr><tr><td>FINETUNE-M<\\/td><td>72.210.28<\\/td><td>72.110.68<\\/td><td>76.393.07<\\/td><td>52.191.11<\\/td><td>63.460.00<\\/td><td>74.333.40<\\/td><td>84.520.84<\\/td><td>74.857.42<\\/td><td>71.262.10<\\/td><\\/tr><tr><td>ADAPTER-M<\\/td><td>72.430.64<\\/td><td>72.460.43<\\/td><td>75.322.78<\\/td><td>51.991.74<\\/td><td>59.942.97<\\/td><td>71.673.40<\\/td><td>86.311.68<\\/td><td>76.531.06<\\/td><td>70.831.84<\\/td><\\/tr><tr><td>PROPETL-M<\\/td><td>73.140.19<\\/td><td>72.070.58<\\/td><td>73.913.27<\\/td><td>50.730.99<\\/td><td>59.625.44<\\/td><td>74.003.27<\\/td><td>82.141.46<\\/td><td>73.653.83<\\/td><td>69.912.38<\\/td><\\/tr><tr><td>HYPERFORMER<\\/td><td>65.934.47<\\/td><td>33.5433.54<\\/td><td>74.011.10<\\/td><td>55.491.72<\\/td><td>52.8810.58<\\/td><td>55.502.50<\\/td><td>71.437.14<\\/td><td>61.739.03<\\/td><td>58.818.76<\\/td><\\/tr><tr><td>HYPERFORMER++<\\/td><td>24.508.13<\\/td><td>19.4727.53<\\/td><td>62.170.00<\\/td><td>50.000.00<\\/td><td>63.460.00<\\/td><td>54.333.30<\\/td><td>49.400.84<\\/td><td>49.092.56<\\/td><td>46.555.30<\\/td><\\/tr><tr><td>ADAPTERFUSION<\\/td><td>78.820.49<\\/td><td>71.791.67<\\/td><td>76.720.55<\\/td><td>66.571.24<\\/td><td>63.460.00<\\/td><td>73.104.51<\\/td><td>82.322.85<\\/td><td>76.032.38<\\/td><td>73.601.71<\\/td><\\/tr><tr><td>ADAPTERSOUP<\\/td><td>64.260.13<\\/td><td>33.624.28<\\/td><td>68.840.31<\\/td><td>58.530.60<\\/td><td>63.460.00<\\/td><td>52.402.41<\\/td><td>70.890.86<\\/td><td>57.830.93<\\/td><td>58.731.19<\\/td><\\/tr><tr><td>SCALEARN<\\/td><td>79.520.06<\\/td><td>73.220.44<\\/td><td>77.270.68<\\/td><td>66.351.20<\\/td><td>63.460.00<\\/td><td>74.802.15<\\/td><td>90.892.59<\\/td><td>78.882.14<\\/td><td>75.551.16<\\/td><\\/tr><tr><td>SCALEARNUNIFORM<\\/td><td>80.130.38<\\/td><td>71.910.60<\\/td><td>76.060.41<\\/td><td>67.371.22<\\/td><td>62.501.27<\\/td><td>71.201.23<\\/td><td>89.111.97<\\/td><td>75.310.90<\\/td><td>74.201.00<\\/td><\\/tr><tr><td>SCALEARN++<\\/td><td>80.130.09<\\/td><td>72.710.57<\\/td><td>76.440.53<\\/td><td>67.131.24<\\/td><td>62.262.28<\\/td><td>75.201.93<\\/td><td>93.042.14<\\/td><td>79.030.95<\\/td><td>75.741.22<\\/td><\\/tr><tr><td>SCALEARNUNIFORM++<\\/td><td>79.790.14<\\/td><td>71.750.38<\\/td><td>76.130.52<\\/td><td>67.870.89<\\/td><td>63.460.00<\\/td><td>74.001.70<\\/td><td>91.612.53<\\/td><td>74.841.58<\\/td><td>74.930.97<\\/td><\\/tr><\\/table><\\/body><\\/html>\",\"table_summary\":\"Table 3 evaluates RoBERTaBASE models on SuperGLUE tasks, showing performance metrics for ReCoRD, MultiRC, BoolQ, WiC, WSC, COPA, CB, RTE, and average scores. SCALEARN++ achieves the highest average score of 75.74.\"}\n{\"table_content\":\"<html><body><table><tr><td>Name<\\/td><td>Category<\\/td><td>Task<\\/td><td>Domain<\\/td><td>Metric<\\/td><\\/tr><tr><td>MNLI<\\/td><td>GLUE<\\/td><td>NLI<\\/td><td>various<\\/td><td>accuracy<\\/td><\\/tr><tr><td>QQP<\\/td><td>GLUE<\\/td><td>paraphrase detection<\\/td><td>social QA<\\/td><td>accuracy & F1<\\/td><\\/tr><tr><td>QNLI<\\/td><td>GLUE<\\/td><td>NLI<\\/td><td>Wikipedia<\\/td><td>accuracy<\\/td><\\/tr><tr><td>SST-2<\\/td><td>GLUE<\\/td><td>sentiment analysis<\\/td><td>Movie Reviews<\\/td><td>accuracy<\\/td><\\/tr><tr><td>STS-B<\\/td><td>GLUE<\\/td><td>sentence similarity<\\/td><td>various<\\/td><td>Pearson & Spearman corr.<\\/td><\\/tr><tr><td>MRPC<\\/td><td>GLUE<\\/td><td>paraphrase detection<\\/td><td>news<\\/td><td>accuracy & F1<\\/td><\\/tr><tr><td>RTE<\\/td><td>GLUE<\\/td><td>NLI<\\/td><td>News, Wikipedia<\\/td><td>accuracy<\\/td><\\/tr><tr><td>CoLA<\\/td><td>GLUE<\\/td><td>acceptability<\\/td><td>various<\\/td><td>Matthews\\u2019 corr.<\\/td><\\/tr><tr><td>ReCoRD<\\/td><td>SuperGLUE<\\/td><td>cloze-style QA<\\/td><td>news (CNN, Daily Mail)<\\/td><td>F1 &EM<\\/td><\\/tr><tr><td>MultiRC<\\/td><td>SuperGLUE<\\/td><td>QA<\\/td><td>various<\\/td><td>F1&EM<\\/td><\\/tr><tr><td>BoolQ<\\/td><td>SuperGLUE<\\/td><td>boolean QA<\\/td><td>Wikipedia<\\/td><td>accuracy<\\/td><\\/tr><tr><td>WiC<\\/td><td>SuperGLUE<\\/td><td>word sense disambiguation<\\/td><td>lexical databases<\\/td><td>accuracy<\\/td><\\/tr><tr><td>WSC<\\/td><td>SuperGLUE<\\/td><td>coreference \\/ commonsense<\\/td><td>fiction books<\\/td><td>accuracy<\\/td><\\/tr><tr><td>COPA<\\/td><td>SuperGLUE<\\/td><td>commonsense reasoning<\\/td><td>various<\\/td><td>accuracy<\\/td><\\/tr><tr><td>CB<\\/td><td>SuperGLUE<\\/td><td>NLI<\\/td><td>various<\\/td><td>accuracy<\\/td><\\/tr><tr><td>Sectors<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><tr><td>Pillars 1D<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><tr><td>Subpillars 1D<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><tr><td>Pillars 2D<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><tr><td>Subpillars 2D<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><\\/table><\\/body><\\/html>\",\"table_summary\":\"The table lists 15 datasets categorized under GLUE, SuperGLUE, and HumSet, detailing their tasks, domains, and evaluation metrics. GLUE and SuperGLUE tasks include NLI, sentiment analysis, and QA, while HumSet focuses on classification for humanitarian response.\"}\n\n... # only display 2 rows in JSON format, more are truncated due to length constraint based on max_tokens (5000)"}
{"role": "assistant", "content": "[Thought]: The retrieved tables do not contain the GLUE performance results for Table 2. Let's try another approach by searching for the specific table content using the vectorstore.\n[Action]:\nClassicRetrieve(query='Table 2 GLUE performance', limit=5)"}
{"role": "user", "content": "[Observation]:\n{\"score\":0.65,\"pdf_id\":\"ed5e94af-9c4d-53f0-8d06-68bab064784a\",\"page_number\":16,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"6076d548-1bf0-5af5-875a-ab4fe4b7c1a3\",\"text\":\"set. We conducted experiments by selecting two datasets from each GLUE benchmark based on their\\nsize scale. Additionally, specific details on the fine-tuning methods can be found in Table 5.\\n16\"}\n{\"score\":0.6312,\"pdf_id\":\"7dc0d16f-d19d-54fa-99d4-8c3c81424dca\",\"page_number\":17,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"2feb26f1-6e92-57d2-bc2f-3d87efb7fcc3\",\"text\":\"Table 8: Official GLUE benchmark results from the referenced papers [32, 13, 23].\\nMethod\\nSource #Params\\nGLUE Tasks\\nGLUE\\nAvg\\nMNLI QNLI QQP RTE SST2 MRPC COLA STS\\nBERT\\nOurs\\n110M\\n84.4\\n90.3\\n89.7\\n77.1\\n92.3\\n90.7\\n54.2\\n89.1\\n83.5\\n[32]\\n110M\\n84.1\\n89.8\\n91.2\\n77.2\\n91.2\\n87.5\\n54.6\\n88.9\\n83.2\\n[23]\\n110M\\n82.5\\n91.0\\n87.0\\n69.0\\n93.0\\n83.0\\n73.0\\n89.0\\n83.3\\n[13]\\n110M\\n-\\n-\\n-\\n-\\n-\\n-\\n-\\n-\\n79.6\\nMLP-Mixer\\nOurs\\n112M\\n77.2\\n82.4\\n87.6\\n67.3\\n90.5\\n86.5\\n43.0\\n85.2\\n77.5\\nFNet\\nOurs\\n112M\\n74.9\\n82.1\\n85.7\\n63.6\\n87.6\\n86.4\\n42.7\\n83.1\\n75.8\\n[23]\\n83M\\n72.5\\n80.0\\n83.0\"}\n{\"score\":0.6168,\"pdf_id\":\"adf9d5f3-c29d-5b08-ba46-c9971143980d\",\"page_number\":16,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"53dcff6b-d386-536b-983b-3d922db5a3ae\",\"text\":\"we conduct extensive experiments on 8 GLUE tasks, including CoLA, SST-2, MRPC, QQP, STS-B,\\nMNLI, QNLI, and RTE. We present the dataset statistics of GLUE (Wang et al., 2018) in Table 6.\\n16\"}\n{\"score\":0.6096,\"pdf_id\":\"3d3a4451-78f0-5fe3-a51f-ec58bcd24702\",\"page_number\":12,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"459d518d-43c2-55f1-bbfb-01739500f2aa\",\"text\":\"MNLI-mm\\n-\\n9.8k\\nAccuracy\\nTable 10: The summary statistics of GLUE benchmark.\\nThe summary statistics of GLUE and the re-\\nported evaluation metric is listed in Table 10. The\\nlicense for GLUE is CC-BY-4.0.\\nB.2\\nExperiment Settings\\nFor different fine-tuning techniques, we experiment\\nwith the same hyper-parameter setting, which are\\nlisted in Table 11.\\nB.3\\nGLUE Test Set Results\\nThe conventional evaluation procedures of the pre-\\nvious research (R3F, RDrop, ChildTuning, Noisy-\"}\n{\"score\":0.6041,\"pdf_id\":\"5ac99291-c8e6-5234-a464-e7967c51ce0a\",\"page_number\":7,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"a74678be-d391-5745-9af7-670e2c48e852\",\"text\":\"Table 2: Performance comparison of different methods on the dev set of the GLUE benchmark. CoDIR uses\\nRoBERTa-base as the teacher, and we report the median performance of this method copied from published paper.\\nThe results in bold indicate the best result, while the results underlined indicate the second-best result.\\nMethod\\n#Param\\nSpeed-up\\nGLUE\\nCoLA\\nMNLI\\nMRPC\\nQNLI\\nQQP\\nRTE\\nSST-2\\nSTS-B\\n(Matt.)\\n(Acc -m\\/-mm)\\n(F1\\/Acc)\\n(Acc)\\n(F1\\/Acc)\\n(Acc.)\\n(Acc.)\\n(Pear.\\/Spear.)\\nTeacher Network: BERT-Base\"}\n\nIn total, 5 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The top result from the vectorstore contains the relevant table content. Let's parse the table content to extract the highest-performing models for each GLUE task.\n[Action]:\nClassicRetrieve(query='Table 2 GLUE performance', limit=1)"}
{"role": "user", "content": "[Observation]:\n{\"score\":0.65,\"pdf_id\":\"ed5e94af-9c4d-53f0-8d06-68bab064784a\",\"page_number\":16,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"6076d548-1bf0-5af5-875a-ab4fe4b7c1a3\",\"text\":\"set. We conducted experiments by selecting two datasets from each GLUE benchmark based on their\\nsize scale. Additionally, specific details on the fine-tuning methods can be found in Table 5.\\n16\"}\n\nIn total, 1 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The top result does not contain the table content we need. Let's try a more specific query to retrieve the exact table content.\n[Action]:\nClassicRetrieve(query='Table 2 GLUE benchmark performance', limit=1)"}
{"role": "user", "content": "[Observation]:\n{\"score\":0.7222,\"pdf_id\":\"ed5e94af-9c4d-53f0-8d06-68bab064784a\",\"page_number\":16,\"table_name\":\"chunks\",\"column_name\":\"text_content\",\"primary_key\":\"6076d548-1bf0-5af5-875a-ab4fe4b7c1a3\",\"text\":\"set. We conducted experiments by selecting two datasets from each GLUE benchmark based on their\\nsize scale. Additionally, specific details on the fine-tuning methods can be found in Table 5.\\n16\"}\n\nIn total, 1 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The query did not return the expected table content. Let's try a more direct approach by retrieving the table content from the `tables` table in the database using a more specific filter.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT table_content, table_summary FROM tables JOIN pages ON tables.ref_page_id = pages.page_id JOIN metadata ON pages.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '9b06b24b-0afc-5ccb-95fc-c662395d291d' AND table_summary LIKE '%GLUE benchmark performance%';\")"}
{"role": "user", "content": "[Observation]: [Warning]: The SQL execution result is empty, please check the SQL first."}
{"role": "assistant", "content": "[Thought]: The SQL query did not return any results, so let's try a broader filter to see if we can find the relevant table.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT table_content, table_summary FROM tables JOIN pages ON tables.ref_page_id = pages.page_id JOIN metadata ON pages.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '9b06b24b-0afc-5ccb-95fc-c662395d291d' AND table_summary LIKE '%GLUE%';\")"}
{"role": "user", "content": "[Observation]:\n{\"table_content\":\"<html><body><table><tr><td>Model<\\/td><td>ReCoRD<\\/td><td>MultiRC<\\/td><td>BoolQ<\\/td><td>WiC<\\/td><td>WSC<\\/td><td>COPA<\\/td><td>CB<\\/td><td>RTE<\\/td><td>Avg.<\\/td><\\/tr><tr><td>FINETUNE<\\/td><td>71.610.84<\\/td><td>71.641.15<\\/td><td>76.801.34<\\/td><td>66.382.08<\\/td><td>63.460.00<\\/td><td>68.606.74<\\/td><td>81.964.33<\\/td><td>73.472.05<\\/td><td>71.742.32<\\/td><\\/tr><tr><td>ADAPTER<\\/td><td>79.020.62<\\/td><td>72.840.48<\\/td><td>76.711.38<\\/td><td>65.581.56<\\/td><td>63.460.00<\\/td><td>70.204.13<\\/td><td>84.823.18<\\/td><td>72.892.54<\\/td><td>73.191.74<\\/td><\\/tr><tr><td>PROPETL<\\/td><td>80.290.24<\\/td><td>73.070.49<\\/td><td>76.580.78<\\/td><td>66.601.65<\\/td><td>63.460.00<\\/td><td>70.603.44<\\/td><td>84.463.86<\\/td><td>74.192.03<\\/td><td>73.691.53<\\/td><\\/tr><tr><td>COMPACTER++<\\/td><td>77.692.67<\\/td><td>70.440.57<\\/td><td>75.880.96<\\/td><td>66.461.63<\\/td><td>63.460.00<\\/td><td>68.304.00<\\/td><td>87.683.62<\\/td><td>72.022.21<\\/td><td>72.741.96<\\/td><\\/tr><tr><td>(IA)3<\\/td><td>75.270.23<\\/td><td>70.320.49<\\/td><td>76.310.79<\\/td><td>67.071.68<\\/td><td>63.350.32<\\/td><td>69.303.37<\\/td><td>87.324.57<\\/td><td>72.562.23<\\/td><td>72.691.71<\\/td><\\/tr><tr><td>LORA<\\/td><td>79.600.46<\\/td><td>71.960.36<\\/td><td>76.580.74<\\/td><td>65.141.17<\\/td><td>63.460.00<\\/td><td>68.204.05<\\/td><td>86.433.17<\\/td><td>70.408.33<\\/td><td>72.722.28<\\/td><\\/tr><tr><td>FINETUNE-M<\\/td><td>72.210.28<\\/td><td>72.110.68<\\/td><td>76.393.07<\\/td><td>52.191.11<\\/td><td>63.460.00<\\/td><td>74.333.40<\\/td><td>84.520.84<\\/td><td>74.857.42<\\/td><td>71.262.10<\\/td><\\/tr><tr><td>ADAPTER-M<\\/td><td>72.430.64<\\/td><td>72.460.43<\\/td><td>75.322.78<\\/td><td>51.991.74<\\/td><td>59.942.97<\\/td><td>71.673.40<\\/td><td>86.311.68<\\/td><td>76.531.06<\\/td><td>70.831.84<\\/td><\\/tr><tr><td>PROPETL-M<\\/td><td>73.140.19<\\/td><td>72.070.58<\\/td><td>73.913.27<\\/td><td>50.730.99<\\/td><td>59.625.44<\\/td><td>74.003.27<\\/td><td>82.141.46<\\/td><td>73.653.83<\\/td><td>69.912.38<\\/td><\\/tr><tr><td>HYPERFORMER<\\/td><td>65.934.47<\\/td><td>33.5433.54<\\/td><td>74.011.10<\\/td><td>55.491.72<\\/td><td>52.8810.58<\\/td><td>55.502.50<\\/td><td>71.437.14<\\/td><td>61.739.03<\\/td><td>58.818.76<\\/td><\\/tr><tr><td>HYPERFORMER++<\\/td><td>24.508.13<\\/td><td>19.4727.53<\\/td><td>62.170.00<\\/td><td>50.000.00<\\/td><td>63.460.00<\\/td><td>54.333.30<\\/td><td>49.400.84<\\/td><td>49.092.56<\\/td><td>46.555.30<\\/td><\\/tr><tr><td>ADAPTERFUSION<\\/td><td>78.820.49<\\/td><td>71.791.67<\\/td><td>76.720.55<\\/td><td>66.571.24<\\/td><td>63.460.00<\\/td><td>73.104.51<\\/td><td>82.322.85<\\/td><td>76.032.38<\\/td><td>73.601.71<\\/td><\\/tr><tr><td>ADAPTERSOUP<\\/td><td>64.260.13<\\/td><td>33.624.28<\\/td><td>68.840.31<\\/td><td>58.530.60<\\/td><td>63.460.00<\\/td><td>52.402.41<\\/td><td>70.890.86<\\/td><td>57.830.93<\\/td><td>58.731.19<\\/td><\\/tr><tr><td>SCALEARN<\\/td><td>79.520.06<\\/td><td>73.220.44<\\/td><td>77.270.68<\\/td><td>66.351.20<\\/td><td>63.460.00<\\/td><td>74.802.15<\\/td><td>90.892.59<\\/td><td>78.882.14<\\/td><td>75.551.16<\\/td><\\/tr><tr><td>SCALEARNUNIFORM<\\/td><td>80.130.38<\\/td><td>71.910.60<\\/td><td>76.060.41<\\/td><td>67.371.22<\\/td><td>62.501.27<\\/td><td>71.201.23<\\/td><td>89.111.97<\\/td><td>75.310.90<\\/td><td>74.201.00<\\/td><\\/tr><tr><td>SCALEARN++<\\/td><td>80.130.09<\\/td><td>72.710.57<\\/td><td>76.440.53<\\/td><td>67.131.24<\\/td><td>62.262.28<\\/td><td>75.201.93<\\/td><td>93.042.14<\\/td><td>79.030.95<\\/td><td>75.741.22<\\/td><\\/tr><tr><td>SCALEARNUNIFORM++<\\/td><td>79.790.14<\\/td><td>71.750.38<\\/td><td>76.130.52<\\/td><td>67.870.89<\\/td><td>63.460.00<\\/td><td>74.001.70<\\/td><td>91.612.53<\\/td><td>74.841.58<\\/td><td>74.930.97<\\/td><\\/tr><\\/table><\\/body><\\/html>\",\"table_summary\":\"Table 3 evaluates RoBERTaBASE models on SuperGLUE tasks, showing performance metrics for ReCoRD, MultiRC, BoolQ, WiC, WSC, COPA, CB, RTE, and average scores. SCALEARN++ achieves the highest average score of 75.74.\"}\n{\"table_content\":\"<html><body><table><tr><td>Name<\\/td><td>Category<\\/td><td>Task<\\/td><td>Domain<\\/td><td>Metric<\\/td><\\/tr><tr><td>MNLI<\\/td><td>GLUE<\\/td><td>NLI<\\/td><td>various<\\/td><td>accuracy<\\/td><\\/tr><tr><td>QQP<\\/td><td>GLUE<\\/td><td>paraphrase detection<\\/td><td>social QA<\\/td><td>accuracy & F1<\\/td><\\/tr><tr><td>QNLI<\\/td><td>GLUE<\\/td><td>NLI<\\/td><td>Wikipedia<\\/td><td>accuracy<\\/td><\\/tr><tr><td>SST-2<\\/td><td>GLUE<\\/td><td>sentiment analysis<\\/td><td>Movie Reviews<\\/td><td>accuracy<\\/td><\\/tr><tr><td>STS-B<\\/td><td>GLUE<\\/td><td>sentence similarity<\\/td><td>various<\\/td><td>Pearson & Spearman corr.<\\/td><\\/tr><tr><td>MRPC<\\/td><td>GLUE<\\/td><td>paraphrase detection<\\/td><td>news<\\/td><td>accuracy & F1<\\/td><\\/tr><tr><td>RTE<\\/td><td>GLUE<\\/td><td>NLI<\\/td><td>News, Wikipedia<\\/td><td>accuracy<\\/td><\\/tr><tr><td>CoLA<\\/td><td>GLUE<\\/td><td>acceptability<\\/td><td>various<\\/td><td>Matthews\\u2019 corr.<\\/td><\\/tr><tr><td>ReCoRD<\\/td><td>SuperGLUE<\\/td><td>cloze-style QA<\\/td><td>news (CNN, Daily Mail)<\\/td><td>F1 &EM<\\/td><\\/tr><tr><td>MultiRC<\\/td><td>SuperGLUE<\\/td><td>QA<\\/td><td>various<\\/td><td>F1&EM<\\/td><\\/tr><tr><td>BoolQ<\\/td><td>SuperGLUE<\\/td><td>boolean QA<\\/td><td>Wikipedia<\\/td><td>accuracy<\\/td><\\/tr><tr><td>WiC<\\/td><td>SuperGLUE<\\/td><td>word sense disambiguation<\\/td><td>lexical databases<\\/td><td>accuracy<\\/td><\\/tr><tr><td>WSC<\\/td><td>SuperGLUE<\\/td><td>coreference \\/ commonsense<\\/td><td>fiction books<\\/td><td>accuracy<\\/td><\\/tr><tr><td>COPA<\\/td><td>SuperGLUE<\\/td><td>commonsense reasoning<\\/td><td>various<\\/td><td>accuracy<\\/td><\\/tr><tr><td>CB<\\/td><td>SuperGLUE<\\/td><td>NLI<\\/td><td>various<\\/td><td>accuracy<\\/td><\\/tr><tr><td>Sectors<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><tr><td>Pillars 1D<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><tr><td>Subpillars 1D<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><tr><td>Pillars 2D<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><tr><td>Subpillars 2D<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><\\/table><\\/body><\\/html>\",\"table_summary\":\"The table lists 15 datasets categorized under GLUE, SuperGLUE, and HumSet, detailing their tasks, domains, and evaluation metrics. GLUE and SuperGLUE tasks include NLI, sentiment analysis, and QA, while HumSet focuses on classification for humanitarian response.\"}\n\n... # only display 2 rows in JSON format, more are truncated due to length constraint based on max_tokens (5000)"}
{"role": "assistant", "content": "[Thought]: The retrieved table content does not match the expected GLUE performance table. Let's try a different approach by searching the `sections` table for the relevant section content.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_title, section_content FROM sections JOIN metadata ON sections.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '9b06b24b-0afc-5ccb-95fc-c662395d291d' AND section_title LIKE '%GLUE%';\")"}
{"role": "user", "content": "[Observation]: [Warning]: The SQL execution result is empty, please check the SQL first."}
{"role": "assistant", "content": "[Thought]: The SQL query did not return any results, so let's try a broader filter to see if we can find the relevant section.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_title, section_content FROM sections JOIN metadata ON sections.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '9b06b24b-0afc-5ccb-95fc-c662395d291d' AND section_content LIKE '%GLUE%';\")"}
{"role": "user", "content": "[Observation]:\n{\"section_title\":\"Abstract\",\"section_content\":\"Multi-task learning (MTL) has shown considerable practical benefts, particularly when using language models (LMs). While this is commonly achieved by learning $n$ tasks under a joint optimization procedure, some methods, such as AdapterFusion, divide the problem into two stages: (i) task learning, where knowledge specifc to a task is encapsulated within sets of parameters (e.g., adapters), and (ii) transfer, where this already learned knowledge is leveraged for a target task. This separation of concerns provides numerous benefts (e.g., promoting reusability). However, current twostage MTL introduces a substantial number of additional parameters. We address this issue by leveraging the usefulness of linearly scaling the output representations of source adapters for transfer learning. We introduce SCALEARN, a simple and highly parametereffcient two-stage MTL method that capitalizes on the knowledge of the source tasks by learning a minimal set of scaling parameters that enable effective transfer to a target task. Our experiments on three benchmarks (GLUE, SuperGLUE, and HumSet) and two encoder LMs show that SCALEARN consistently outperforms strong baselines with a small number of transfer parameters $\\\\langle\\\\sim0.35\\\\%$ of those of AdapterFusion). Remarkably, we observe that SCALEARN maintains its strong abilities even when further reducing parameters, achieving competitive results with only 8 transfer parameters per target task. Our proposed approach thus demonstrates the power of simple scaling as a promise for more effcient task transfer.1\"}\n{\"section_title\":\"1 Introduction\",\"section_content\":\"With the wide availability of pre-trained language models (LMs) as the backbone of language processing, multi-task learning (MTL) has shown signifcant benefts, especially for tasks with possible conceptual commonalities (Ruder, 2017; Zhang and Yang, 2022; Raffel et al., 2020). The traditional paradigm in MTL is to formulate a joint optimization objective based on a set of tasks and train a single model to simultaneously learn and transfer the knowledge relevant to the tasks. This joint MTL approach can be realized by fne-tuning an LM (Liu et al., 2019a; Stickland and Murray, 2019), or, more recently, by using parameter-effcient, often modularized, MTL approaches (Mahabadi et al., 2021b; Zeng et al., 2023; Pilault et al., 2021; Asai et al., 2022; Ponti et al., 2023; Caccia et al., 2022).\\n\\nAs an alternative to the joint MTL paradigm, some works, such as ADAPTERFUSION (Pfeiffer et al., 2021), clearly distinguish task training from transfer learning, assigning dedicated parameters to each of these aspects. In this paradigm, referred to as two-stage MTL, frst each source task is trained separately and stored into a separate module like an adapter (Houlsby et al., 2019), and then a task transfer layer is trained for a given target task using information from an arbitrary set of source tasks. This separation of concerns between task and transfer learning offers valuable benefts: (1) Learning a separate transfer layer for each target task in a two-stage MTL approach reduces the potentially destructive effects of transfer learning on specifc tasks, as the transfer layer parameters corresponding to each target task can independently decide what information should be used from the available source tasks. As shown in our experiments with encoder LMs, this supports the effectiveness of transfer learning, making it less sensitive to task selection. (2) Since the source tasks can simply be taken from already trained modules (no need for retraining), two-stage approaches promote reusability \\u2013 a principle of Green AI (Scells et al., 2022; Schwartz et al., 2020). Further, they provide a practical solution to cases involving issues such as data privacy and\\/or fairness constraints, as a pre-trained module can readily provide the (e.g., already debiased) functionality of the source task even without the need to have access to its training data (Lauscher et al., 2021; Kumar et al., 2023).\\n\\nDespite these benefts, current two-stage MTL solutions introduce signifcantly more learnable parameters compared to recent joint MTL ones, exacerbated by the linear increase in the number of parameters with the number of target tasks. In our experiment setup with eight target tasks using RoBERTaBASE (Liu et al., 2019b), ADAPTERFUSION introduces $\\\\sim\\\\!134\\\\%$ new parameters for transfer learning, while HYPERFORMER $^{++}$ (Mahabadi et al., 2021b) conducts joint MTL by adding $\\\\sim\\\\!4\\\\%$ $(\\\\approx\\\\,5\\\\mathrm{{M})}$ trainable parameters (details in Table 1 and $\\\\S5$ ). This high number of parameters is in stark contrast to the promise of Green AI given by the modularized nature of two-stage MTL.\\nContributions. We build on insights gained from analyzing the effects of scaling the output representations of adapters, and introduce SCALEARN, a novel two-stage MTL method that learns to transfer the knowledge of the source adapters using a small set of scaling parameters. For a given target task, SCALEARN introduces parameters that scale the output representation of each source adapter and combine the resulting scaled representations by simply taking the element-wise sum. This approach results in high parameter-effciency, such that \\u2013 following the mentioned experiment setting \\u2013 SCALEARN only adds $\\\\sim0.47\\\\%$ $(\\\\approx0.5\\\\mathsf{M})$ parameters. We further introduce an even more parameter-effcient variant via uniform scaling (SCALEARNUNIFORM), where each scaling vector is reduced to a single scaling parameter. Finally, by sharing parameters across layers, we achieve our most effcient variation (SCALEARNUNIFORM $^{++}$ ), only containing 64 parameters for transfer learning.\\n\\nWe conduct a large set of transfer learning experiments on the GLUE (Wang et al., 2019b), SuperGLUE (Wang et al., 2019a), and HumSet (Fekih et al., 2022) benchmarks using encoder LMs, namely the popular RoBERTa (Liu et al., 2019b) and XLM-R (Conneau et al., 2020) models, both in their base and large confgurations.\\nFigure 1 summarizes our results on GLUE and SuperGLUE, showing that SCALEARN, while providing high effciency and the benefts of the twostage MTL paradigm, consistently outperforms the baselines. The overall performance of SCALEARN remains highly competitive in its more parametereffcient variations. Our results also show the advantage of two-stage models in avoiding destructive effects during transfer learning. Overall, with SCALEARN we leverage the power of scaling as a viable, non-destructive, simple-to-implement, and highly parameter-effcient solution to the current shortcomings of existing MTL methods, paving the future for more effective and effcient task transfer.\"}\n{\"section_title\":\"4 Experiment Setup\",\"section_content\":\"Tasks and datasets. We conduct our experiments on the GLUE and SuperGLUE benchmarks, respectively, each consisting of 8 tasks, as well as on the HumSet benchmark (Fekih et al., 2022). HumSet is a multilingual classifcation dataset for humanitarian crisis response that consists of 5 tasks. Additionally, we use a combination of all GLUE and SuperGLUE tasks resulting in 15 datasets3. It has been shown that tasks from GLUE and SuperGLUE particularly beneft from multi-task learning, given their partially overlapping task formulations and highly varying dataset sizes (Devlin et al., 2019;\\nStickland and Murray, 2019; Asai et al., 2022; Wang et al., 2023). Complete details regarding the benchmarks including their train\\/validation\\/test splits are provided in Appendix A.1.\\nLM backbones. We use the encoder LMs RoBERTaBASE and RoBERTaLARGE (Liu et al., 2019b) on GLUE and SuperGLUE. For the experiments on HumSet, following Fekih et al. (2022) we utilize the commonly used multilingual encoder LMs XLM-RBASE and XLM-RLARGE (Conneau et al., 2020) as it consists of multiple languages.\\nWe put our focus on encoder LMs since they have been studied extensively and are still widely used for a variety of tasks, e.g., representation learning (Kusupati et al., 2022; Zhao et al., 2022; Xiao et al., 2023), sentence segmentation (Minixhofer et al., 2023), and as language encoder as part of multi-modal architectures (Saharia et al., 2022; Singh et al., 2022; Liu et al., 2023), inter alia, especially in real-time use cases due to their effciency and comparatively low computational demands.\\nModels and baselines. We conduct experiments on four variants of our model, namely SCALEARN, SCALEARNUNIFORM, SCALEA $\\\\mathbf{RN++}$ , and SCALEARNUNIFORM $^{++}$ . As a direct baseline, we compare our models with ADAPTERFUSION, a common two-stage MTL method that shares similar conceptual properties. We also compare our models with ADAPTERSOUP (Chronopoulou et al., 2023), performing weight-space averaging over adapter weights of the 5 most similar tasks according to their sentence similarity, adapted to our setup (cf. Appendix A.1). In all two-stage MTL methods, source and target tasks are the same, containing the tasks of the underlying benchmark. For each target task, they learn a transfer layer (except for ADAPTERSOUP) and a new task head.\\n\\nWe also select a set of strong STL baselines: FINETUNE, fully fne-tuning the LM, ADAPTER (Houlsby et al., 2019) learning an adapter module for each task, PROPETL (Zeng et al., 2023) a more memory-effcient variation based on parameter sparsifcation and COMPACTE $\\\\mathbf{R++}$ (Mahabadi et al., 2021a) a highly parameter-effcient variation using parametersharing between layers. In addition, we train $(\\\\mathbf{IA})^{3}$ (Liu et al., 2022), learning scaling vectors applied to the key and value matrices and intermediate activations in the LM\\u2019s feed-forward layer, and LORA (Hu et al., 2022), learning low-rank updates to the model\\u2019s weight matrices.\\nFurthermore, we conduct experiments on several joint MTL baselines, namely FINETUNE-M, ADAPTER-M, and PROPETL-M, the fully fnetuned, adapter-based, and ProPETL-based joint MTL variants, respectively; and, fnally, HYPERFORMER and HYPERFORMER $^{++}$ (Karimi Mahabadi et al., 2021). FINETUNE-M updates all LM parameters, ADAPTER-M adds a single adapter module shared for all tasks, and PROPETL-M combines sparse layer- and task-specifc masks through a logical OR operation. Based on task-specifc embeddings, HYPERFORMER and HYPERFORMER++ generate module parameters by a shared hypernetwork. In all adapter-based models, we use a reduction factor of 16, and, following Pfeiffer et al. (2021), insert the modules after the feed-forward layer of the LM. Furthermore, to allow a fair comparison, we adapt PROPETL-M, HYPERFORMER, and HYPERFORMER $^{++}$ to this setting by inserting the adapters only after each feed-forward block. To accommodate possible variations in performance, we train each model on multiple seeds, and report the mean and standard deviation over multiple runs.\\nThe full details of the experiment setup regarding the benchmarks and their splits, infrastructure, training, and hyperparameters are provided in $\\\\S\\\\,\\\\mathrm{A}.1$ . To further enable the reproducibility of our results, our code, including documentation, is available at https:\\/\\/github.com\\/CPJKU\\/ScaLearn under the MIT license.\"}\n{\"section_title\":\"5.1 Parameter-effciency analysis\",\"section_content\":\"Table 1 provides a comprehensive overview of the number of learnable parameters of the models in our experiment setting on GLUE and SuperGLUE: RoBERTaBASE as the backbone LM, 8 source tasks, and the same 8 tasks as target tasks $\\\\langle|S|\\\\!=\\\\!|T|\\\\!=\\\\!8)$ . Starting from the STL models, the left and right columns report the number of trainable parameters for one and all tasks, respectively. The joint MTL models learn all tasks simultaneously, and hence only contain values in the right column. For the two-stage MTL models, we report the number of trainable parameters of the transfer layer for one target task $\\\\left(\\\\Omega_{t}\\\\right)$ in the frst column and the same for all target tasks on the right $(\\\\Omega)$ . We deliberately organize the transfer parameters of the two-stage models $(\\\\Omega)$ under the corresponding numbers of other models in the right column since the two-stage paradigm benefts from already trained adapters and only needs to learn the transfer layer. If the adapters should also be trained, we provide an extra comparison with the corresponding additional parameters in Appendix A.1.\\n\\nWhen comparing the results of the two-stage MTL methods in the transfer layer, ADAPTERFUSION is expectedly far less parameter-effcient than SCALEARN models, where SCALEARNUNI$\\\\scriptstyle\\\\mathrm{FORM++}$ only requires 64 parameters. The variants of SCALEARN add considerably fewer transfer parameters compared to the overall parameters of the particularly effcient joint MTL methods. Moreover, the SCALEARN models still remain comparable when also taking into account the source adapter parameters. Considering these results, in the following we report and discuss the evaluation results in transfer learning and few-shot learning on the respective benchmarks.\"}\n{\"section_title\":\"5.2 Transfer Learning Performance\",\"section_content\":\"Results on GLUE. Table 2 shows the evaluation results on the GLUE benchmark using RoBERTaBASE. The evaluation metrics are Pearson\\u2019s correlation for STS-B, Matthews\\u2019 correlation for CoLA, and accuracy for the rest. We average the results over several runs and report the corresponding standard deviation in the subscripts. Overall, the two-stage models obtain strong gains, outperforming STL and joint MTL models. Remarkably, all variants of SCALEARN, including the highly parameter-effcient SCALEARNUNI$\\\\scriptstyle\\\\mathrm{FORM++}$ achieve similarly good results with only a fraction of the parameters of ADAPTERFUSION. Comparing the different variations of our method, while SCALEARN shows the best results, the other models also perform highly competitively.\\nResults on SuperGLUE. Table 3 shows the results on SuperGLUE for all methods considered. The evaluation metrics are F1 for MultiRC and ReCoRD and accuracy for the other tasks. We observe similar patterns on this benchmark: two-stage models generally outperform other baselines. In this benchmark, SCALEARN and SCALEA $_{\\\\mathrm{RN++}}$ improve upon ADAPTERFUSION by 2 percentage points of the average results. Notably, we observe performance drops for various joint MTL models in comparison to other models (up to $-27\\\\%$ when comparing HYPERFORMER $^{++}$ and ADAPTER). This may be a signal of the sensitivity of these models to the selection of tasks. Furthermore, the subpar performance of AdapterSoup suggests that calculating weights using sentence similarity is not appropriate for our specifc problem setup. In contrast, the other two-stage MTL models (and, in particular, our SCALEARN models) do not show any considerable performance decreases.\\n\\nResults on HumSet. Table 4 shows the results on HumSet using XLM-RBASE with the F1-score as the evaluation metric. Similarly, SCALEARN performs the best among all the methods, whereas the more parameter-effcient variants of SCALEARN are only marginally weaker in performance. On this benchmark, in particular, all joint MTL methods show poor performance, highlighting the sensitivity of these methods to task selection (up to $-27\\\\%$ for STL and MTL versions of FINETUNE).\\nWe conduct an ablation study on the effect on different combinatorial operators in SCALEARN, reported in Appendix A.3. In Appendix A.5, we provide further experiments and analyses of the results along with the results of GLUE and SuperGLUE using RoBERTaLARGE, HumSet using XLM-RLARGE, and for the combination of all tasks from GLUE and SuperGLUE. Finally, we provide an analysis of the scaling coeffcients of SCALEARNUNIFORM and SCALEARNUNIFORM $^{++}$ in Appendix A.4, revealing the effect of various source adapters on a target task.\"}\n{\"section_title\":\"5.3 Few-shot Transfer Learning\",\"section_content\":\"We further assess the applicability of SCALEARN in a few-shot setting, where we assume that only $k=\\\\{4,16,32,100\\\\}$ training samples are available for a given target task. For two-stage MTL methods, for a given benchmark, we use the source adapters of all tasks except the one corresponding to the target task, where we use a source adapter trained on only $k$ samples. On the basis of this set of source adapters, we then train a transfer layer on the target task using $k$ data points.\\nFigure 2 shows the performance of ADAPTER, ADAPTERFUSION, and SCALEARN on the GLUE, SuperGLUE, and HumSet benchmarks, averaged over 5 runs. We observe that SCALEARN consistently outperforms ADAPTER and ADAPTERFUSION in all benchmarks and values of $k$ (except for $k=4$ on HumSet) pointing to the strength of our method for data-lean settings. We provide the full results, including per-dataset ones, other variations of SCALEARN, and on RoBERTaLARGE in $\\\\S\\\\mathrm{A}.6$ .\"}\n{\"section_title\":\"7 Conclusion\",\"section_content\":\"We propose SCALEARN, a highly parametereffcient and effective two-stage MTL method leveraging simple scaling of output vectors. Our proposed approach directly learns the coeffcients that scale the representations of source adapters and combines them simply by taking the sum. We conduct transfer learning experiments using encoder LMs on the three benchmarks of GLUE, SuperGLUE, and HumSet, consisting of a diverse set of tasks, domains, and languages. Our results show that SCALEARN and even its extremely parametereffcient variants obtain strong improvement over existing MTL methods without any negative crosstask effects. We further show that these improvements are also present in few-shot transfer learning.\"}\n{\"section_title\":\"Limitations\",\"section_content\":\"The frst limitation of our work concerns the selection of benchmarks \\u2013 we conducted experiments only on the GLUE, SuperGLUE, and HumSet benchmarks. While these already cover a vast number of tasks and domains of varying sizes in different languages, they still do not fully represent the myriad of tasks, domains, and languages within the NLP domain. However, we strongly believe that our fndings also hold for other transfer learning corpora, including different tasks, domains, and languages, especially since SCALEARN \\\\* models are agnostic concerning this selection. Related to this aspect, we focused on transformer-based encoder LMs as the backbone for our experiments and did not experiment with other architectures, e.g., convolutional or recurrent networks, or transformerbased decoder LMs. Finally, we relied on adapters as arguably the most popular modularization technique (cf. Pfeiffer et al. (2021); Chronopoulou et al. (2023)). Due to the large number of additional experiments required and related environmental concerns, we did not experiment with other modularization methods (e.g., LoRA or $(I A)^{3}$ ). However, our method clearly shows the usefulness of simply scaling output representations of modules for transfer learning.\"}\n\n... # only display 8 rows in JSON format, more are truncated due to length constraint based on max_tokens (5000)"}
{"role": "assistant", "content": "[Thought]: The section content does not directly provide the table we need. Let's try a more specific search in the `tables` table again, but this time with a broader filter to capture any table that might contain GLUE performance data.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT table_content, table_summary FROM tables JOIN pages ON tables.ref_page_id = pages.page_id JOIN metadata ON pages.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '9b06b24b-0afc-5ccb-95fc-c662395d291d' AND (table_summary LIKE '%GLUE%' OR table_content LIKE '%GLUE%');\")"}
{"role": "user", "content": "[Observation]:\n{\"table_content\":\"<html><body><table><tr><td>Model<\\/td><td>ReCoRD<\\/td><td>MultiRC<\\/td><td>BoolQ<\\/td><td>WiC<\\/td><td>WSC<\\/td><td>COPA<\\/td><td>CB<\\/td><td>RTE<\\/td><td>Avg.<\\/td><\\/tr><tr><td>FINETUNE<\\/td><td>71.610.84<\\/td><td>71.641.15<\\/td><td>76.801.34<\\/td><td>66.382.08<\\/td><td>63.460.00<\\/td><td>68.606.74<\\/td><td>81.964.33<\\/td><td>73.472.05<\\/td><td>71.742.32<\\/td><\\/tr><tr><td>ADAPTER<\\/td><td>79.020.62<\\/td><td>72.840.48<\\/td><td>76.711.38<\\/td><td>65.581.56<\\/td><td>63.460.00<\\/td><td>70.204.13<\\/td><td>84.823.18<\\/td><td>72.892.54<\\/td><td>73.191.74<\\/td><\\/tr><tr><td>PROPETL<\\/td><td>80.290.24<\\/td><td>73.070.49<\\/td><td>76.580.78<\\/td><td>66.601.65<\\/td><td>63.460.00<\\/td><td>70.603.44<\\/td><td>84.463.86<\\/td><td>74.192.03<\\/td><td>73.691.53<\\/td><\\/tr><tr><td>COMPACTER++<\\/td><td>77.692.67<\\/td><td>70.440.57<\\/td><td>75.880.96<\\/td><td>66.461.63<\\/td><td>63.460.00<\\/td><td>68.304.00<\\/td><td>87.683.62<\\/td><td>72.022.21<\\/td><td>72.741.96<\\/td><\\/tr><tr><td>(IA)3<\\/td><td>75.270.23<\\/td><td>70.320.49<\\/td><td>76.310.79<\\/td><td>67.071.68<\\/td><td>63.350.32<\\/td><td>69.303.37<\\/td><td>87.324.57<\\/td><td>72.562.23<\\/td><td>72.691.71<\\/td><\\/tr><tr><td>LORA<\\/td><td>79.600.46<\\/td><td>71.960.36<\\/td><td>76.580.74<\\/td><td>65.141.17<\\/td><td>63.460.00<\\/td><td>68.204.05<\\/td><td>86.433.17<\\/td><td>70.408.33<\\/td><td>72.722.28<\\/td><\\/tr><tr><td>FINETUNE-M<\\/td><td>72.210.28<\\/td><td>72.110.68<\\/td><td>76.393.07<\\/td><td>52.191.11<\\/td><td>63.460.00<\\/td><td>74.333.40<\\/td><td>84.520.84<\\/td><td>74.857.42<\\/td><td>71.262.10<\\/td><\\/tr><tr><td>ADAPTER-M<\\/td><td>72.430.64<\\/td><td>72.460.43<\\/td><td>75.322.78<\\/td><td>51.991.74<\\/td><td>59.942.97<\\/td><td>71.673.40<\\/td><td>86.311.68<\\/td><td>76.531.06<\\/td><td>70.831.84<\\/td><\\/tr><tr><td>PROPETL-M<\\/td><td>73.140.19<\\/td><td>72.070.58<\\/td><td>73.913.27<\\/td><td>50.730.99<\\/td><td>59.625.44<\\/td><td>74.003.27<\\/td><td>82.141.46<\\/td><td>73.653.83<\\/td><td>69.912.38<\\/td><\\/tr><tr><td>HYPERFORMER<\\/td><td>65.934.47<\\/td><td>33.5433.54<\\/td><td>74.011.10<\\/td><td>55.491.72<\\/td><td>52.8810.58<\\/td><td>55.502.50<\\/td><td>71.437.14<\\/td><td>61.739.03<\\/td><td>58.818.76<\\/td><\\/tr><tr><td>HYPERFORMER++<\\/td><td>24.508.13<\\/td><td>19.4727.53<\\/td><td>62.170.00<\\/td><td>50.000.00<\\/td><td>63.460.00<\\/td><td>54.333.30<\\/td><td>49.400.84<\\/td><td>49.092.56<\\/td><td>46.555.30<\\/td><\\/tr><tr><td>ADAPTERFUSION<\\/td><td>78.820.49<\\/td><td>71.791.67<\\/td><td>76.720.55<\\/td><td>66.571.24<\\/td><td>63.460.00<\\/td><td>73.104.51<\\/td><td>82.322.85<\\/td><td>76.032.38<\\/td><td>73.601.71<\\/td><\\/tr><tr><td>ADAPTERSOUP<\\/td><td>64.260.13<\\/td><td>33.624.28<\\/td><td>68.840.31<\\/td><td>58.530.60<\\/td><td>63.460.00<\\/td><td>52.402.41<\\/td><td>70.890.86<\\/td><td>57.830.93<\\/td><td>58.731.19<\\/td><\\/tr><tr><td>SCALEARN<\\/td><td>79.520.06<\\/td><td>73.220.44<\\/td><td>77.270.68<\\/td><td>66.351.20<\\/td><td>63.460.00<\\/td><td>74.802.15<\\/td><td>90.892.59<\\/td><td>78.882.14<\\/td><td>75.551.16<\\/td><\\/tr><tr><td>SCALEARNUNIFORM<\\/td><td>80.130.38<\\/td><td>71.910.60<\\/td><td>76.060.41<\\/td><td>67.371.22<\\/td><td>62.501.27<\\/td><td>71.201.23<\\/td><td>89.111.97<\\/td><td>75.310.90<\\/td><td>74.201.00<\\/td><\\/tr><tr><td>SCALEARN++<\\/td><td>80.130.09<\\/td><td>72.710.57<\\/td><td>76.440.53<\\/td><td>67.131.24<\\/td><td>62.262.28<\\/td><td>75.201.93<\\/td><td>93.042.14<\\/td><td>79.030.95<\\/td><td>75.741.22<\\/td><\\/tr><tr><td>SCALEARNUNIFORM++<\\/td><td>79.790.14<\\/td><td>71.750.38<\\/td><td>76.130.52<\\/td><td>67.870.89<\\/td><td>63.460.00<\\/td><td>74.001.70<\\/td><td>91.612.53<\\/td><td>74.841.58<\\/td><td>74.930.97<\\/td><\\/tr><\\/table><\\/body><\\/html>\",\"table_summary\":\"Table 3 evaluates RoBERTaBASE models on SuperGLUE tasks, showing performance metrics for ReCoRD, MultiRC, BoolQ, WiC, WSC, COPA, CB, RTE, and average scores. SCALEARN++ achieves the highest average score of 75.74.\"}\n{\"table_content\":\"<html><body><table><tr><td>Name<\\/td><td>Category<\\/td><td>Task<\\/td><td>Domain<\\/td><td>Metric<\\/td><\\/tr><tr><td>MNLI<\\/td><td>GLUE<\\/td><td>NLI<\\/td><td>various<\\/td><td>accuracy<\\/td><\\/tr><tr><td>QQP<\\/td><td>GLUE<\\/td><td>paraphrase detection<\\/td><td>social QA<\\/td><td>accuracy & F1<\\/td><\\/tr><tr><td>QNLI<\\/td><td>GLUE<\\/td><td>NLI<\\/td><td>Wikipedia<\\/td><td>accuracy<\\/td><\\/tr><tr><td>SST-2<\\/td><td>GLUE<\\/td><td>sentiment analysis<\\/td><td>Movie Reviews<\\/td><td>accuracy<\\/td><\\/tr><tr><td>STS-B<\\/td><td>GLUE<\\/td><td>sentence similarity<\\/td><td>various<\\/td><td>Pearson & Spearman corr.<\\/td><\\/tr><tr><td>MRPC<\\/td><td>GLUE<\\/td><td>paraphrase detection<\\/td><td>news<\\/td><td>accuracy & F1<\\/td><\\/tr><tr><td>RTE<\\/td><td>GLUE<\\/td><td>NLI<\\/td><td>News, Wikipedia<\\/td><td>accuracy<\\/td><\\/tr><tr><td>CoLA<\\/td><td>GLUE<\\/td><td>acceptability<\\/td><td>various<\\/td><td>Matthews\\u2019 corr.<\\/td><\\/tr><tr><td>ReCoRD<\\/td><td>SuperGLUE<\\/td><td>cloze-style QA<\\/td><td>news (CNN, Daily Mail)<\\/td><td>F1 &EM<\\/td><\\/tr><tr><td>MultiRC<\\/td><td>SuperGLUE<\\/td><td>QA<\\/td><td>various<\\/td><td>F1&EM<\\/td><\\/tr><tr><td>BoolQ<\\/td><td>SuperGLUE<\\/td><td>boolean QA<\\/td><td>Wikipedia<\\/td><td>accuracy<\\/td><\\/tr><tr><td>WiC<\\/td><td>SuperGLUE<\\/td><td>word sense disambiguation<\\/td><td>lexical databases<\\/td><td>accuracy<\\/td><\\/tr><tr><td>WSC<\\/td><td>SuperGLUE<\\/td><td>coreference \\/ commonsense<\\/td><td>fiction books<\\/td><td>accuracy<\\/td><\\/tr><tr><td>COPA<\\/td><td>SuperGLUE<\\/td><td>commonsense reasoning<\\/td><td>various<\\/td><td>accuracy<\\/td><\\/tr><tr><td>CB<\\/td><td>SuperGLUE<\\/td><td>NLI<\\/td><td>various<\\/td><td>accuracy<\\/td><\\/tr><tr><td>Sectors<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><tr><td>Pillars 1D<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><tr><td>Subpillars 1D<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><tr><td>Pillars 2D<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><tr><td>Subpillars 2D<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><\\/table><\\/body><\\/html>\",\"table_summary\":\"The table lists 15 datasets categorized under GLUE, SuperGLUE, and HumSet, detailing their tasks, domains, and evaluation metrics. GLUE and SuperGLUE tasks include NLI, sentiment analysis, and QA, while HumSet focuses on classification for humanitarian response.\"}\n\n... # only display 2 rows in JSON format, more are truncated due to length constraint based on max_tokens (5000)"}
{"role": "assistant", "content": "[Thought]: The retrieved table content still does not contain the specific GLUE performance table. Let's try a more targeted retrieval from the `sections` table by searching for the section that discusses the GLUE benchmark results.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_title, section_content FROM sections JOIN metadata ON sections.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '9b06b24b-0afc-5ccb-95fc-c662395d291d' AND section_content LIKE '%GLUE%results%';\")"}
{"role": "user", "content": "[Observation]:\n{\"section_title\":\"Abstract\",\"section_content\":\"Multi-task learning (MTL) has shown considerable practical benefts, particularly when using language models (LMs). While this is commonly achieved by learning $n$ tasks under a joint optimization procedure, some methods, such as AdapterFusion, divide the problem into two stages: (i) task learning, where knowledge specifc to a task is encapsulated within sets of parameters (e.g., adapters), and (ii) transfer, where this already learned knowledge is leveraged for a target task. This separation of concerns provides numerous benefts (e.g., promoting reusability). However, current twostage MTL introduces a substantial number of additional parameters. We address this issue by leveraging the usefulness of linearly scaling the output representations of source adapters for transfer learning. We introduce SCALEARN, a simple and highly parametereffcient two-stage MTL method that capitalizes on the knowledge of the source tasks by learning a minimal set of scaling parameters that enable effective transfer to a target task. Our experiments on three benchmarks (GLUE, SuperGLUE, and HumSet) and two encoder LMs show that SCALEARN consistently outperforms strong baselines with a small number of transfer parameters $\\\\langle\\\\sim0.35\\\\%$ of those of AdapterFusion). Remarkably, we observe that SCALEARN maintains its strong abilities even when further reducing parameters, achieving competitive results with only 8 transfer parameters per target task. Our proposed approach thus demonstrates the power of simple scaling as a promise for more effcient task transfer.1\"}\n{\"section_title\":\"1 Introduction\",\"section_content\":\"With the wide availability of pre-trained language models (LMs) as the backbone of language processing, multi-task learning (MTL) has shown signifcant benefts, especially for tasks with possible conceptual commonalities (Ruder, 2017; Zhang and Yang, 2022; Raffel et al., 2020). The traditional paradigm in MTL is to formulate a joint optimization objective based on a set of tasks and train a single model to simultaneously learn and transfer the knowledge relevant to the tasks. This joint MTL approach can be realized by fne-tuning an LM (Liu et al., 2019a; Stickland and Murray, 2019), or, more recently, by using parameter-effcient, often modularized, MTL approaches (Mahabadi et al., 2021b; Zeng et al., 2023; Pilault et al., 2021; Asai et al., 2022; Ponti et al., 2023; Caccia et al., 2022).\\n\\nAs an alternative to the joint MTL paradigm, some works, such as ADAPTERFUSION (Pfeiffer et al., 2021), clearly distinguish task training from transfer learning, assigning dedicated parameters to each of these aspects. In this paradigm, referred to as two-stage MTL, frst each source task is trained separately and stored into a separate module like an adapter (Houlsby et al., 2019), and then a task transfer layer is trained for a given target task using information from an arbitrary set of source tasks. This separation of concerns between task and transfer learning offers valuable benefts: (1) Learning a separate transfer layer for each target task in a two-stage MTL approach reduces the potentially destructive effects of transfer learning on specifc tasks, as the transfer layer parameters corresponding to each target task can independently decide what information should be used from the available source tasks. As shown in our experiments with encoder LMs, this supports the effectiveness of transfer learning, making it less sensitive to task selection. (2) Since the source tasks can simply be taken from already trained modules (no need for retraining), two-stage approaches promote reusability \\u2013 a principle of Green AI (Scells et al., 2022; Schwartz et al., 2020). Further, they provide a practical solution to cases involving issues such as data privacy and\\/or fairness constraints, as a pre-trained module can readily provide the (e.g., already debiased) functionality of the source task even without the need to have access to its training data (Lauscher et al., 2021; Kumar et al., 2023).\\n\\nDespite these benefts, current two-stage MTL solutions introduce signifcantly more learnable parameters compared to recent joint MTL ones, exacerbated by the linear increase in the number of parameters with the number of target tasks. In our experiment setup with eight target tasks using RoBERTaBASE (Liu et al., 2019b), ADAPTERFUSION introduces $\\\\sim\\\\!134\\\\%$ new parameters for transfer learning, while HYPERFORMER $^{++}$ (Mahabadi et al., 2021b) conducts joint MTL by adding $\\\\sim\\\\!4\\\\%$ $(\\\\approx\\\\,5\\\\mathrm{{M})}$ trainable parameters (details in Table 1 and $\\\\S5$ ). This high number of parameters is in stark contrast to the promise of Green AI given by the modularized nature of two-stage MTL.\\nContributions. We build on insights gained from analyzing the effects of scaling the output representations of adapters, and introduce SCALEARN, a novel two-stage MTL method that learns to transfer the knowledge of the source adapters using a small set of scaling parameters. For a given target task, SCALEARN introduces parameters that scale the output representation of each source adapter and combine the resulting scaled representations by simply taking the element-wise sum. This approach results in high parameter-effciency, such that \\u2013 following the mentioned experiment setting \\u2013 SCALEARN only adds $\\\\sim0.47\\\\%$ $(\\\\approx0.5\\\\mathsf{M})$ parameters. We further introduce an even more parameter-effcient variant via uniform scaling (SCALEARNUNIFORM), where each scaling vector is reduced to a single scaling parameter. Finally, by sharing parameters across layers, we achieve our most effcient variation (SCALEARNUNIFORM $^{++}$ ), only containing 64 parameters for transfer learning.\\n\\nWe conduct a large set of transfer learning experiments on the GLUE (Wang et al., 2019b), SuperGLUE (Wang et al., 2019a), and HumSet (Fekih et al., 2022) benchmarks using encoder LMs, namely the popular RoBERTa (Liu et al., 2019b) and XLM-R (Conneau et al., 2020) models, both in their base and large confgurations.\\nFigure 1 summarizes our results on GLUE and SuperGLUE, showing that SCALEARN, while providing high effciency and the benefts of the twostage MTL paradigm, consistently outperforms the baselines. The overall performance of SCALEARN remains highly competitive in its more parametereffcient variations. Our results also show the advantage of two-stage models in avoiding destructive effects during transfer learning. Overall, with SCALEARN we leverage the power of scaling as a viable, non-destructive, simple-to-implement, and highly parameter-effcient solution to the current shortcomings of existing MTL methods, paving the future for more effective and effcient task transfer.\"}\n{\"section_title\":\"4 Experiment Setup\",\"section_content\":\"Tasks and datasets. We conduct our experiments on the GLUE and SuperGLUE benchmarks, respectively, each consisting of 8 tasks, as well as on the HumSet benchmark (Fekih et al., 2022). HumSet is a multilingual classifcation dataset for humanitarian crisis response that consists of 5 tasks. Additionally, we use a combination of all GLUE and SuperGLUE tasks resulting in 15 datasets3. It has been shown that tasks from GLUE and SuperGLUE particularly beneft from multi-task learning, given their partially overlapping task formulations and highly varying dataset sizes (Devlin et al., 2019;\\nStickland and Murray, 2019; Asai et al., 2022; Wang et al., 2023). Complete details regarding the benchmarks including their train\\/validation\\/test splits are provided in Appendix A.1.\\nLM backbones. We use the encoder LMs RoBERTaBASE and RoBERTaLARGE (Liu et al., 2019b) on GLUE and SuperGLUE. For the experiments on HumSet, following Fekih et al. (2022) we utilize the commonly used multilingual encoder LMs XLM-RBASE and XLM-RLARGE (Conneau et al., 2020) as it consists of multiple languages.\\nWe put our focus on encoder LMs since they have been studied extensively and are still widely used for a variety of tasks, e.g., representation learning (Kusupati et al., 2022; Zhao et al., 2022; Xiao et al., 2023), sentence segmentation (Minixhofer et al., 2023), and as language encoder as part of multi-modal architectures (Saharia et al., 2022; Singh et al., 2022; Liu et al., 2023), inter alia, especially in real-time use cases due to their effciency and comparatively low computational demands.\\nModels and baselines. We conduct experiments on four variants of our model, namely SCALEARN, SCALEARNUNIFORM, SCALEA $\\\\mathbf{RN++}$ , and SCALEARNUNIFORM $^{++}$ . As a direct baseline, we compare our models with ADAPTERFUSION, a common two-stage MTL method that shares similar conceptual properties. We also compare our models with ADAPTERSOUP (Chronopoulou et al., 2023), performing weight-space averaging over adapter weights of the 5 most similar tasks according to their sentence similarity, adapted to our setup (cf. Appendix A.1). In all two-stage MTL methods, source and target tasks are the same, containing the tasks of the underlying benchmark. For each target task, they learn a transfer layer (except for ADAPTERSOUP) and a new task head.\\n\\nWe also select a set of strong STL baselines: FINETUNE, fully fne-tuning the LM, ADAPTER (Houlsby et al., 2019) learning an adapter module for each task, PROPETL (Zeng et al., 2023) a more memory-effcient variation based on parameter sparsifcation and COMPACTE $\\\\mathbf{R++}$ (Mahabadi et al., 2021a) a highly parameter-effcient variation using parametersharing between layers. In addition, we train $(\\\\mathbf{IA})^{3}$ (Liu et al., 2022), learning scaling vectors applied to the key and value matrices and intermediate activations in the LM\\u2019s feed-forward layer, and LORA (Hu et al., 2022), learning low-rank updates to the model\\u2019s weight matrices.\\nFurthermore, we conduct experiments on several joint MTL baselines, namely FINETUNE-M, ADAPTER-M, and PROPETL-M, the fully fnetuned, adapter-based, and ProPETL-based joint MTL variants, respectively; and, fnally, HYPERFORMER and HYPERFORMER $^{++}$ (Karimi Mahabadi et al., 2021). FINETUNE-M updates all LM parameters, ADAPTER-M adds a single adapter module shared for all tasks, and PROPETL-M combines sparse layer- and task-specifc masks through a logical OR operation. Based on task-specifc embeddings, HYPERFORMER and HYPERFORMER++ generate module parameters by a shared hypernetwork. In all adapter-based models, we use a reduction factor of 16, and, following Pfeiffer et al. (2021), insert the modules after the feed-forward layer of the LM. Furthermore, to allow a fair comparison, we adapt PROPETL-M, HYPERFORMER, and HYPERFORMER $^{++}$ to this setting by inserting the adapters only after each feed-forward block. To accommodate possible variations in performance, we train each model on multiple seeds, and report the mean and standard deviation over multiple runs.\\nThe full details of the experiment setup regarding the benchmarks and their splits, infrastructure, training, and hyperparameters are provided in $\\\\S\\\\,\\\\mathrm{A}.1$ . To further enable the reproducibility of our results, our code, including documentation, is available at https:\\/\\/github.com\\/CPJKU\\/ScaLearn under the MIT license.\"}\n{\"section_title\":\"5.1 Parameter-effciency analysis\",\"section_content\":\"Table 1 provides a comprehensive overview of the number of learnable parameters of the models in our experiment setting on GLUE and SuperGLUE: RoBERTaBASE as the backbone LM, 8 source tasks, and the same 8 tasks as target tasks $\\\\langle|S|\\\\!=\\\\!|T|\\\\!=\\\\!8)$ . Starting from the STL models, the left and right columns report the number of trainable parameters for one and all tasks, respectively. The joint MTL models learn all tasks simultaneously, and hence only contain values in the right column. For the two-stage MTL models, we report the number of trainable parameters of the transfer layer for one target task $\\\\left(\\\\Omega_{t}\\\\right)$ in the frst column and the same for all target tasks on the right $(\\\\Omega)$ . We deliberately organize the transfer parameters of the two-stage models $(\\\\Omega)$ under the corresponding numbers of other models in the right column since the two-stage paradigm benefts from already trained adapters and only needs to learn the transfer layer. If the adapters should also be trained, we provide an extra comparison with the corresponding additional parameters in Appendix A.1.\\n\\nWhen comparing the results of the two-stage MTL methods in the transfer layer, ADAPTERFUSION is expectedly far less parameter-effcient than SCALEARN models, where SCALEARNUNI$\\\\scriptstyle\\\\mathrm{FORM++}$ only requires 64 parameters. The variants of SCALEARN add considerably fewer transfer parameters compared to the overall parameters of the particularly effcient joint MTL methods. Moreover, the SCALEARN models still remain comparable when also taking into account the source adapter parameters. Considering these results, in the following we report and discuss the evaluation results in transfer learning and few-shot learning on the respective benchmarks.\"}\n{\"section_title\":\"5.2 Transfer Learning Performance\",\"section_content\":\"Results on GLUE. Table 2 shows the evaluation results on the GLUE benchmark using RoBERTaBASE. The evaluation metrics are Pearson\\u2019s correlation for STS-B, Matthews\\u2019 correlation for CoLA, and accuracy for the rest. We average the results over several runs and report the corresponding standard deviation in the subscripts. Overall, the two-stage models obtain strong gains, outperforming STL and joint MTL models. Remarkably, all variants of SCALEARN, including the highly parameter-effcient SCALEARNUNI$\\\\scriptstyle\\\\mathrm{FORM++}$ achieve similarly good results with only a fraction of the parameters of ADAPTERFUSION. Comparing the different variations of our method, while SCALEARN shows the best results, the other models also perform highly competitively.\\nResults on SuperGLUE. Table 3 shows the results on SuperGLUE for all methods considered. The evaluation metrics are F1 for MultiRC and ReCoRD and accuracy for the other tasks. We observe similar patterns on this benchmark: two-stage models generally outperform other baselines. In this benchmark, SCALEARN and SCALEA $_{\\\\mathrm{RN++}}$ improve upon ADAPTERFUSION by 2 percentage points of the average results. Notably, we observe performance drops for various joint MTL models in comparison to other models (up to $-27\\\\%$ when comparing HYPERFORMER $^{++}$ and ADAPTER). This may be a signal of the sensitivity of these models to the selection of tasks. Furthermore, the subpar performance of AdapterSoup suggests that calculating weights using sentence similarity is not appropriate for our specifc problem setup. In contrast, the other two-stage MTL models (and, in particular, our SCALEARN models) do not show any considerable performance decreases.\\n\\nResults on HumSet. Table 4 shows the results on HumSet using XLM-RBASE with the F1-score as the evaluation metric. Similarly, SCALEARN performs the best among all the methods, whereas the more parameter-effcient variants of SCALEARN are only marginally weaker in performance. On this benchmark, in particular, all joint MTL methods show poor performance, highlighting the sensitivity of these methods to task selection (up to $-27\\\\%$ for STL and MTL versions of FINETUNE).\\nWe conduct an ablation study on the effect on different combinatorial operators in SCALEARN, reported in Appendix A.3. In Appendix A.5, we provide further experiments and analyses of the results along with the results of GLUE and SuperGLUE using RoBERTaLARGE, HumSet using XLM-RLARGE, and for the combination of all tasks from GLUE and SuperGLUE. Finally, we provide an analysis of the scaling coeffcients of SCALEARNUNIFORM and SCALEARNUNIFORM $^{++}$ in Appendix A.4, revealing the effect of various source adapters on a target task.\"}\n{\"section_title\":\"5.3 Few-shot Transfer Learning\",\"section_content\":\"We further assess the applicability of SCALEARN in a few-shot setting, where we assume that only $k=\\\\{4,16,32,100\\\\}$ training samples are available for a given target task. For two-stage MTL methods, for a given benchmark, we use the source adapters of all tasks except the one corresponding to the target task, where we use a source adapter trained on only $k$ samples. On the basis of this set of source adapters, we then train a transfer layer on the target task using $k$ data points.\\nFigure 2 shows the performance of ADAPTER, ADAPTERFUSION, and SCALEARN on the GLUE, SuperGLUE, and HumSet benchmarks, averaged over 5 runs. We observe that SCALEARN consistently outperforms ADAPTER and ADAPTERFUSION in all benchmarks and values of $k$ (except for $k=4$ on HumSet) pointing to the strength of our method for data-lean settings. We provide the full results, including per-dataset ones, other variations of SCALEARN, and on RoBERTaLARGE in $\\\\S\\\\mathrm{A}.6$ .\"}\n{\"section_title\":\"7 Conclusion\",\"section_content\":\"We propose SCALEARN, a highly parametereffcient and effective two-stage MTL method leveraging simple scaling of output vectors. Our proposed approach directly learns the coeffcients that scale the representations of source adapters and combines them simply by taking the sum. We conduct transfer learning experiments using encoder LMs on the three benchmarks of GLUE, SuperGLUE, and HumSet, consisting of a diverse set of tasks, domains, and languages. Our results show that SCALEARN and even its extremely parametereffcient variants obtain strong improvement over existing MTL methods without any negative crosstask effects. We further show that these improvements are also present in few-shot transfer learning.\"}\n{\"section_title\":\"A.2 Analysis on Scaling Output Representations\",\"section_content\":\"As mentioned in $\\\\S\\\\ 3$ , we conducted preliminary experiments in which we scaled the output representations of adapters \\u2013 in isolation and combining two of them each. We use the GLUE (Wang et al., 2019b) and SuperGLUE (Wang et al., 2019a) benchmarks (cf. Appendix A.1) and train a Pfeiffer adapter (Pfeiffer et al., 2021) on each task using the encoder LM RoBERTaBASE (Liu et al., 2019b). In our probing-like setup (Tenney et al., 2019), we freeze both the backbone and adapter weights and train a new task head on target task $t$ each time we change the scaling factor. For full clarity, we frst show the effect of scaling output representations of adapters on a subset of tasks from GLUE and SuperGLUE in Figure 3, and then show the remaining ones in Figure 5 as well as Figure 6. Complete descriptions of the datasets, hyperparameters, and training procedure are provided in $\\\\S\\\\ 4$ and Appendix A.1.\\nWe start by analyzing the performance change of a target task when scaling the output representations of the adapter of one given source task. We defne $\\\\omega_{s}$ as the scaling value in the range of $[0,1]$ , multiplied by the output representations $o_{s}^{l}$ of the source task $s$ in all layers, such that $o_{t}^{l}=\\\\omega_{s}o_{s}^{l}$ . Figure 3 (Top) shows the probing results on four target tasks (each column), given various scaling weights applied to four source tasks (one of which is the respective target task). The results show that, while increasing the scaling weights generally improves the performance, the optimal value is not necessarily at $\\\\omega_{s}=1$ . In particular, there exist instances with $0<\\\\omega_{s}<1$ reaching better performance than $\\\\omega_{s}=1$ . This suggests that partial knowledge transfer of tasks may be more benefcial. Notably, and as also reported in previous studies (Poth et al., 2021; Pruksachatkun et al., 2020), some source tasks such as MNLI show strong transfer learning abilities.\\nNext, we go one step further by assessing the scaled combination of the output vectors of two adapters. We focus on MNLI as one of the source tasks given its observed beneft in transfer learning, and set the second source adapter (denoted by $s$ ) to the one corresponding to the target task. We use two scaling parameters $\\\\omega_{\\\\mathrm{MNLI}}$ and $\\\\omega_{s}$ to scale $o_{\\\\mathrm{MNLI}}^{l}$ and $o_{s}^{l}$ , respectively. The resulting output vector is defned as: ${\\\\pmb{o}}_{t}^{l}=\\\\omega_{s}{\\\\pmb{o}}_{s}^{l}{+}\\\\omega_{\\\\mathrm{MNLI}}{\\\\pmb{o}}_{\\\\mathrm{MNLI}}^{l}$ . Figure 3 (Bottom) shows the results for various values of $\\\\omega_{\\\\mathrm{MNLI}}$ and $\\\\omega_{s}$ . Combining the information encapsulated within multiple adapters through scaling can result in improved performance. Interestingly, in some cases, the best combination of $\\\\omega_{\\\\mathrm{MNLI}}$ and $\\\\omega_{s}$ does not add up to 1, i.e., $\\\\omega_{t}+\\\\omega_{s}\\\\neq1$ . These initial experiments \\u2013 while only covering a simple combination of up to two source tasks \\u2013 provide insights into the benefts of scaling representations for transfer learning.\"}\n{\"section_title\":\"A.3 Ablation Study\",\"section_content\":\"Table 8 shows the effect of adding constraints on the distributional values of scaling coeffcient in SCALEARN, evaluated on GLUE using RoBERTaBASE. In particular, we change the original SCALEARN model by adding the constraints mean and softmax over the source task dimension, thus enforcing |sS=|1 $\\\\begin{array}{r}{\\\\sum_{s=1}^{|S|}\\\\omega_{s}^{l}=1}\\\\end{array}$ . The results indicate that both const raints reduce average performance compared to those having no constraints, confrming our choice of directly learning the scaling coeffcients without imposing any restrictions.\"}\n\n... # only display 9 rows in JSON format, more are truncated due to length constraint based on max_tokens (5000)"}
{"role": "assistant", "content": "[Thought]: The section content still does not contain the specific GLUE performance table. Let's try a more targeted retrieval from the `tables` table by searching for the table that discusses the GLUE benchmark results.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT table_content, table_summary FROM tables JOIN pages ON tables.ref_page_id = pages.page_id JOIN metadata ON pages.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '9b06b24b-0afc-5ccb-95fc-c662395d291d' AND table_summary LIKE '%GLUE%results%';\")"}
{"role": "user", "content": "[Observation]: [Warning]: The SQL execution result is empty, please check the SQL first."}
{"role": "assistant", "content": "[Thought]: The SQL query did not return any results, so let's try a broader filter to see if we can find the relevant table.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT table_content, table_summary FROM tables JOIN pages ON tables.ref_page_id = pages.page_id JOIN metadata ON pages.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '9b06b24b-0afc-5ccb-95fc-c662395d291d' AND table_summary LIKE '%GLUE%';\")"}
{"role": "user", "content": "[Observation]:\n{\"table_content\":\"<html><body><table><tr><td>Model<\\/td><td>ReCoRD<\\/td><td>MultiRC<\\/td><td>BoolQ<\\/td><td>WiC<\\/td><td>WSC<\\/td><td>COPA<\\/td><td>CB<\\/td><td>RTE<\\/td><td>Avg.<\\/td><\\/tr><tr><td>FINETUNE<\\/td><td>71.610.84<\\/td><td>71.641.15<\\/td><td>76.801.34<\\/td><td>66.382.08<\\/td><td>63.460.00<\\/td><td>68.606.74<\\/td><td>81.964.33<\\/td><td>73.472.05<\\/td><td>71.742.32<\\/td><\\/tr><tr><td>ADAPTER<\\/td><td>79.020.62<\\/td><td>72.840.48<\\/td><td>76.711.38<\\/td><td>65.581.56<\\/td><td>63.460.00<\\/td><td>70.204.13<\\/td><td>84.823.18<\\/td><td>72.892.54<\\/td><td>73.191.74<\\/td><\\/tr><tr><td>PROPETL<\\/td><td>80.290.24<\\/td><td>73.070.49<\\/td><td>76.580.78<\\/td><td>66.601.65<\\/td><td>63.460.00<\\/td><td>70.603.44<\\/td><td>84.463.86<\\/td><td>74.192.03<\\/td><td>73.691.53<\\/td><\\/tr><tr><td>COMPACTER++<\\/td><td>77.692.67<\\/td><td>70.440.57<\\/td><td>75.880.96<\\/td><td>66.461.63<\\/td><td>63.460.00<\\/td><td>68.304.00<\\/td><td>87.683.62<\\/td><td>72.022.21<\\/td><td>72.741.96<\\/td><\\/tr><tr><td>(IA)3<\\/td><td>75.270.23<\\/td><td>70.320.49<\\/td><td>76.310.79<\\/td><td>67.071.68<\\/td><td>63.350.32<\\/td><td>69.303.37<\\/td><td>87.324.57<\\/td><td>72.562.23<\\/td><td>72.691.71<\\/td><\\/tr><tr><td>LORA<\\/td><td>79.600.46<\\/td><td>71.960.36<\\/td><td>76.580.74<\\/td><td>65.141.17<\\/td><td>63.460.00<\\/td><td>68.204.05<\\/td><td>86.433.17<\\/td><td>70.408.33<\\/td><td>72.722.28<\\/td><\\/tr><tr><td>FINETUNE-M<\\/td><td>72.210.28<\\/td><td>72.110.68<\\/td><td>76.393.07<\\/td><td>52.191.11<\\/td><td>63.460.00<\\/td><td>74.333.40<\\/td><td>84.520.84<\\/td><td>74.857.42<\\/td><td>71.262.10<\\/td><\\/tr><tr><td>ADAPTER-M<\\/td><td>72.430.64<\\/td><td>72.460.43<\\/td><td>75.322.78<\\/td><td>51.991.74<\\/td><td>59.942.97<\\/td><td>71.673.40<\\/td><td>86.311.68<\\/td><td>76.531.06<\\/td><td>70.831.84<\\/td><\\/tr><tr><td>PROPETL-M<\\/td><td>73.140.19<\\/td><td>72.070.58<\\/td><td>73.913.27<\\/td><td>50.730.99<\\/td><td>59.625.44<\\/td><td>74.003.27<\\/td><td>82.141.46<\\/td><td>73.653.83<\\/td><td>69.912.38<\\/td><\\/tr><tr><td>HYPERFORMER<\\/td><td>65.934.47<\\/td><td>33.5433.54<\\/td><td>74.011.10<\\/td><td>55.491.72<\\/td><td>52.8810.58<\\/td><td>55.502.50<\\/td><td>71.437.14<\\/td><td>61.739.03<\\/td><td>58.818.76<\\/td><\\/tr><tr><td>HYPERFORMER++<\\/td><td>24.508.13<\\/td><td>19.4727.53<\\/td><td>62.170.00<\\/td><td>50.000.00<\\/td><td>63.460.00<\\/td><td>54.333.30<\\/td><td>49.400.84<\\/td><td>49.092.56<\\/td><td>46.555.30<\\/td><\\/tr><tr><td>ADAPTERFUSION<\\/td><td>78.820.49<\\/td><td>71.791.67<\\/td><td>76.720.55<\\/td><td>66.571.24<\\/td><td>63.460.00<\\/td><td>73.104.51<\\/td><td>82.322.85<\\/td><td>76.032.38<\\/td><td>73.601.71<\\/td><\\/tr><tr><td>ADAPTERSOUP<\\/td><td>64.260.13<\\/td><td>33.624.28<\\/td><td>68.840.31<\\/td><td>58.530.60<\\/td><td>63.460.00<\\/td><td>52.402.41<\\/td><td>70.890.86<\\/td><td>57.830.93<\\/td><td>58.731.19<\\/td><\\/tr><tr><td>SCALEARN<\\/td><td>79.520.06<\\/td><td>73.220.44<\\/td><td>77.270.68<\\/td><td>66.351.20<\\/td><td>63.460.00<\\/td><td>74.802.15<\\/td><td>90.892.59<\\/td><td>78.882.14<\\/td><td>75.551.16<\\/td><\\/tr><tr><td>SCALEARNUNIFORM<\\/td><td>80.130.38<\\/td><td>71.910.60<\\/td><td>76.060.41<\\/td><td>67.371.22<\\/td><td>62.501.27<\\/td><td>71.201.23<\\/td><td>89.111.97<\\/td><td>75.310.90<\\/td><td>74.201.00<\\/td><\\/tr><tr><td>SCALEARN++<\\/td><td>80.130.09<\\/td><td>72.710.57<\\/td><td>76.440.53<\\/td><td>67.131.24<\\/td><td>62.262.28<\\/td><td>75.201.93<\\/td><td>93.042.14<\\/td><td>79.030.95<\\/td><td>75.741.22<\\/td><\\/tr><tr><td>SCALEARNUNIFORM++<\\/td><td>79.790.14<\\/td><td>71.750.38<\\/td><td>76.130.52<\\/td><td>67.870.89<\\/td><td>63.460.00<\\/td><td>74.001.70<\\/td><td>91.612.53<\\/td><td>74.841.58<\\/td><td>74.930.97<\\/td><\\/tr><\\/table><\\/body><\\/html>\",\"table_summary\":\"Table 3 evaluates RoBERTaBASE models on SuperGLUE tasks, showing performance metrics for ReCoRD, MultiRC, BoolQ, WiC, WSC, COPA, CB, RTE, and average scores. SCALEARN++ achieves the highest average score of 75.74.\"}\n{\"table_content\":\"<html><body><table><tr><td>Name<\\/td><td>Category<\\/td><td>Task<\\/td><td>Domain<\\/td><td>Metric<\\/td><\\/tr><tr><td>MNLI<\\/td><td>GLUE<\\/td><td>NLI<\\/td><td>various<\\/td><td>accuracy<\\/td><\\/tr><tr><td>QQP<\\/td><td>GLUE<\\/td><td>paraphrase detection<\\/td><td>social QA<\\/td><td>accuracy & F1<\\/td><\\/tr><tr><td>QNLI<\\/td><td>GLUE<\\/td><td>NLI<\\/td><td>Wikipedia<\\/td><td>accuracy<\\/td><\\/tr><tr><td>SST-2<\\/td><td>GLUE<\\/td><td>sentiment analysis<\\/td><td>Movie Reviews<\\/td><td>accuracy<\\/td><\\/tr><tr><td>STS-B<\\/td><td>GLUE<\\/td><td>sentence similarity<\\/td><td>various<\\/td><td>Pearson & Spearman corr.<\\/td><\\/tr><tr><td>MRPC<\\/td><td>GLUE<\\/td><td>paraphrase detection<\\/td><td>news<\\/td><td>accuracy & F1<\\/td><\\/tr><tr><td>RTE<\\/td><td>GLUE<\\/td><td>NLI<\\/td><td>News, Wikipedia<\\/td><td>accuracy<\\/td><\\/tr><tr><td>CoLA<\\/td><td>GLUE<\\/td><td>acceptability<\\/td><td>various<\\/td><td>Matthews\\u2019 corr.<\\/td><\\/tr><tr><td>ReCoRD<\\/td><td>SuperGLUE<\\/td><td>cloze-style QA<\\/td><td>news (CNN, Daily Mail)<\\/td><td>F1 &EM<\\/td><\\/tr><tr><td>MultiRC<\\/td><td>SuperGLUE<\\/td><td>QA<\\/td><td>various<\\/td><td>F1&EM<\\/td><\\/tr><tr><td>BoolQ<\\/td><td>SuperGLUE<\\/td><td>boolean QA<\\/td><td>Wikipedia<\\/td><td>accuracy<\\/td><\\/tr><tr><td>WiC<\\/td><td>SuperGLUE<\\/td><td>word sense disambiguation<\\/td><td>lexical databases<\\/td><td>accuracy<\\/td><\\/tr><tr><td>WSC<\\/td><td>SuperGLUE<\\/td><td>coreference \\/ commonsense<\\/td><td>fiction books<\\/td><td>accuracy<\\/td><\\/tr><tr><td>COPA<\\/td><td>SuperGLUE<\\/td><td>commonsense reasoning<\\/td><td>various<\\/td><td>accuracy<\\/td><\\/tr><tr><td>CB<\\/td><td>SuperGLUE<\\/td><td>NLI<\\/td><td>various<\\/td><td>accuracy<\\/td><\\/tr><tr><td>Sectors<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><tr><td>Pillars 1D<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><tr><td>Subpillars 1D<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><tr><td>Pillars 2D<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><tr><td>Subpillars 2D<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><\\/table><\\/body><\\/html>\",\"table_summary\":\"The table lists 15 datasets categorized under GLUE, SuperGLUE, and HumSet, detailing their tasks, domains, and evaluation metrics. GLUE and SuperGLUE tasks include NLI, sentiment analysis, and QA, while HumSet focuses on classification for humanitarian response.\"}\n\n... # only display 2 rows in JSON format, more are truncated due to length constraint based on max_tokens (5000)"}
{"role": "assistant", "content": "[Thought]: The retrieved tables do not contain the specific GLUE performance table. Let's try a more targeted retrieval from the `sections` table by searching for the section that discusses the GLUE benchmark results in more detail.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_title, section_content FROM sections JOIN metadata ON sections.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '9b06b24b-0afc-5ccb-95fc-c662395d291d' AND section_content LIKE '%GLUE%results%' AND section_title LIKE '%5.2%';\")"}
{"role": "user", "content": "[Observation]:\n{\"section_title\":\"5.2 Transfer Learning Performance\",\"section_content\":\"Results on GLUE. Table 2 shows the evaluation results on the GLUE benchmark using RoBERTaBASE. The evaluation metrics are Pearson\\u2019s correlation for STS-B, Matthews\\u2019 correlation for CoLA, and accuracy for the rest. We average the results over several runs and report the corresponding standard deviation in the subscripts. Overall, the two-stage models obtain strong gains, outperforming STL and joint MTL models. Remarkably, all variants of SCALEARN, including the highly parameter-effcient SCALEARNUNI$\\\\scriptstyle\\\\mathrm{FORM++}$ achieve similarly good results with only a fraction of the parameters of ADAPTERFUSION. Comparing the different variations of our method, while SCALEARN shows the best results, the other models also perform highly competitively.\\nResults on SuperGLUE. Table 3 shows the results on SuperGLUE for all methods considered. The evaluation metrics are F1 for MultiRC and ReCoRD and accuracy for the other tasks. We observe similar patterns on this benchmark: two-stage models generally outperform other baselines. In this benchmark, SCALEARN and SCALEA $_{\\\\mathrm{RN++}}$ improve upon ADAPTERFUSION by 2 percentage points of the average results. Notably, we observe performance drops for various joint MTL models in comparison to other models (up to $-27\\\\%$ when comparing HYPERFORMER $^{++}$ and ADAPTER). This may be a signal of the sensitivity of these models to the selection of tasks. Furthermore, the subpar performance of AdapterSoup suggests that calculating weights using sentence similarity is not appropriate for our specifc problem setup. In contrast, the other two-stage MTL models (and, in particular, our SCALEARN models) do not show any considerable performance decreases.\\n\\nResults on HumSet. Table 4 shows the results on HumSet using XLM-RBASE with the F1-score as the evaluation metric. Similarly, SCALEARN performs the best among all the methods, whereas the more parameter-effcient variants of SCALEARN are only marginally weaker in performance. On this benchmark, in particular, all joint MTL methods show poor performance, highlighting the sensitivity of these methods to task selection (up to $-27\\\\%$ for STL and MTL versions of FINETUNE).\\nWe conduct an ablation study on the effect on different combinatorial operators in SCALEARN, reported in Appendix A.3. In Appendix A.5, we provide further experiments and analyses of the results along with the results of GLUE and SuperGLUE using RoBERTaLARGE, HumSet using XLM-RLARGE, and for the combination of all tasks from GLUE and SuperGLUE. Finally, we provide an analysis of the scaling coeffcients of SCALEARNUNIFORM and SCALEARNUNIFORM $^{++}$ in Appendix A.4, revealing the effect of various source adapters on a target task.\"}\n\nIn total, 1 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The section content mentions that Table 2 contains the evaluation results on the GLUE benchmark. Let's retrieve the specific content of Table 2.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT table_content, table_summary FROM tables JOIN pages ON tables.ref_page_id = pages.page_id JOIN metadata ON pages.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '9b06b24b-0afc-5ccb-95fc-c662395d291d' AND table_summary LIKE '%GLUE%';\")"}
{"role": "user", "content": "[Observation]:\n{\"table_content\":\"<html><body><table><tr><td>Model<\\/td><td>ReCoRD<\\/td><td>MultiRC<\\/td><td>BoolQ<\\/td><td>WiC<\\/td><td>WSC<\\/td><td>COPA<\\/td><td>CB<\\/td><td>RTE<\\/td><td>Avg.<\\/td><\\/tr><tr><td>FINETUNE<\\/td><td>71.610.84<\\/td><td>71.641.15<\\/td><td>76.801.34<\\/td><td>66.382.08<\\/td><td>63.460.00<\\/td><td>68.606.74<\\/td><td>81.964.33<\\/td><td>73.472.05<\\/td><td>71.742.32<\\/td><\\/tr><tr><td>ADAPTER<\\/td><td>79.020.62<\\/td><td>72.840.48<\\/td><td>76.711.38<\\/td><td>65.581.56<\\/td><td>63.460.00<\\/td><td>70.204.13<\\/td><td>84.823.18<\\/td><td>72.892.54<\\/td><td>73.191.74<\\/td><\\/tr><tr><td>PROPETL<\\/td><td>80.290.24<\\/td><td>73.070.49<\\/td><td>76.580.78<\\/td><td>66.601.65<\\/td><td>63.460.00<\\/td><td>70.603.44<\\/td><td>84.463.86<\\/td><td>74.192.03<\\/td><td>73.691.53<\\/td><\\/tr><tr><td>COMPACTER++<\\/td><td>77.692.67<\\/td><td>70.440.57<\\/td><td>75.880.96<\\/td><td>66.461.63<\\/td><td>63.460.00<\\/td><td>68.304.00<\\/td><td>87.683.62<\\/td><td>72.022.21<\\/td><td>72.741.96<\\/td><\\/tr><tr><td>(IA)3<\\/td><td>75.270.23<\\/td><td>70.320.49<\\/td><td>76.310.79<\\/td><td>67.071.68<\\/td><td>63.350.32<\\/td><td>69.303.37<\\/td><td>87.324.57<\\/td><td>72.562.23<\\/td><td>72.691.71<\\/td><\\/tr><tr><td>LORA<\\/td><td>79.600.46<\\/td><td>71.960.36<\\/td><td>76.580.74<\\/td><td>65.141.17<\\/td><td>63.460.00<\\/td><td>68.204.05<\\/td><td>86.433.17<\\/td><td>70.408.33<\\/td><td>72.722.28<\\/td><\\/tr><tr><td>FINETUNE-M<\\/td><td>72.210.28<\\/td><td>72.110.68<\\/td><td>76.393.07<\\/td><td>52.191.11<\\/td><td>63.460.00<\\/td><td>74.333.40<\\/td><td>84.520.84<\\/td><td>74.857.42<\\/td><td>71.262.10<\\/td><\\/tr><tr><td>ADAPTER-M<\\/td><td>72.430.64<\\/td><td>72.460.43<\\/td><td>75.322.78<\\/td><td>51.991.74<\\/td><td>59.942.97<\\/td><td>71.673.40<\\/td><td>86.311.68<\\/td><td>76.531.06<\\/td><td>70.831.84<\\/td><\\/tr><tr><td>PROPETL-M<\\/td><td>73.140.19<\\/td><td>72.070.58<\\/td><td>73.913.27<\\/td><td>50.730.99<\\/td><td>59.625.44<\\/td><td>74.003.27<\\/td><td>82.141.46<\\/td><td>73.653.83<\\/td><td>69.912.38<\\/td><\\/tr><tr><td>HYPERFORMER<\\/td><td>65.934.47<\\/td><td>33.5433.54<\\/td><td>74.011.10<\\/td><td>55.491.72<\\/td><td>52.8810.58<\\/td><td>55.502.50<\\/td><td>71.437.14<\\/td><td>61.739.03<\\/td><td>58.818.76<\\/td><\\/tr><tr><td>HYPERFORMER++<\\/td><td>24.508.13<\\/td><td>19.4727.53<\\/td><td>62.170.00<\\/td><td>50.000.00<\\/td><td>63.460.00<\\/td><td>54.333.30<\\/td><td>49.400.84<\\/td><td>49.092.56<\\/td><td>46.555.30<\\/td><\\/tr><tr><td>ADAPTERFUSION<\\/td><td>78.820.49<\\/td><td>71.791.67<\\/td><td>76.720.55<\\/td><td>66.571.24<\\/td><td>63.460.00<\\/td><td>73.104.51<\\/td><td>82.322.85<\\/td><td>76.032.38<\\/td><td>73.601.71<\\/td><\\/tr><tr><td>ADAPTERSOUP<\\/td><td>64.260.13<\\/td><td>33.624.28<\\/td><td>68.840.31<\\/td><td>58.530.60<\\/td><td>63.460.00<\\/td><td>52.402.41<\\/td><td>70.890.86<\\/td><td>57.830.93<\\/td><td>58.731.19<\\/td><\\/tr><tr><td>SCALEARN<\\/td><td>79.520.06<\\/td><td>73.220.44<\\/td><td>77.270.68<\\/td><td>66.351.20<\\/td><td>63.460.00<\\/td><td>74.802.15<\\/td><td>90.892.59<\\/td><td>78.882.14<\\/td><td>75.551.16<\\/td><\\/tr><tr><td>SCALEARNUNIFORM<\\/td><td>80.130.38<\\/td><td>71.910.60<\\/td><td>76.060.41<\\/td><td>67.371.22<\\/td><td>62.501.27<\\/td><td>71.201.23<\\/td><td>89.111.97<\\/td><td>75.310.90<\\/td><td>74.201.00<\\/td><\\/tr><tr><td>SCALEARN++<\\/td><td>80.130.09<\\/td><td>72.710.57<\\/td><td>76.440.53<\\/td><td>67.131.24<\\/td><td>62.262.28<\\/td><td>75.201.93<\\/td><td>93.042.14<\\/td><td>79.030.95<\\/td><td>75.741.22<\\/td><\\/tr><tr><td>SCALEARNUNIFORM++<\\/td><td>79.790.14<\\/td><td>71.750.38<\\/td><td>76.130.52<\\/td><td>67.870.89<\\/td><td>63.460.00<\\/td><td>74.001.70<\\/td><td>91.612.53<\\/td><td>74.841.58<\\/td><td>74.930.97<\\/td><\\/tr><\\/table><\\/body><\\/html>\",\"table_summary\":\"Table 3 evaluates RoBERTaBASE models on SuperGLUE tasks, showing performance metrics for ReCoRD, MultiRC, BoolQ, WiC, WSC, COPA, CB, RTE, and average scores. SCALEARN++ achieves the highest average score of 75.74.\"}\n{\"table_content\":\"<html><body><table><tr><td>Name<\\/td><td>Category<\\/td><td>Task<\\/td><td>Domain<\\/td><td>Metric<\\/td><\\/tr><tr><td>MNLI<\\/td><td>GLUE<\\/td><td>NLI<\\/td><td>various<\\/td><td>accuracy<\\/td><\\/tr><tr><td>QQP<\\/td><td>GLUE<\\/td><td>paraphrase detection<\\/td><td>social QA<\\/td><td>accuracy & F1<\\/td><\\/tr><tr><td>QNLI<\\/td><td>GLUE<\\/td><td>NLI<\\/td><td>Wikipedia<\\/td><td>accuracy<\\/td><\\/tr><tr><td>SST-2<\\/td><td>GLUE<\\/td><td>sentiment analysis<\\/td><td>Movie Reviews<\\/td><td>accuracy<\\/td><\\/tr><tr><td>STS-B<\\/td><td>GLUE<\\/td><td>sentence similarity<\\/td><td>various<\\/td><td>Pearson & Spearman corr.<\\/td><\\/tr><tr><td>MRPC<\\/td><td>GLUE<\\/td><td>paraphrase detection<\\/td><td>news<\\/td><td>accuracy & F1<\\/td><\\/tr><tr><td>RTE<\\/td><td>GLUE<\\/td><td>NLI<\\/td><td>News, Wikipedia<\\/td><td>accuracy<\\/td><\\/tr><tr><td>CoLA<\\/td><td>GLUE<\\/td><td>acceptability<\\/td><td>various<\\/td><td>Matthews\\u2019 corr.<\\/td><\\/tr><tr><td>ReCoRD<\\/td><td>SuperGLUE<\\/td><td>cloze-style QA<\\/td><td>news (CNN, Daily Mail)<\\/td><td>F1 &EM<\\/td><\\/tr><tr><td>MultiRC<\\/td><td>SuperGLUE<\\/td><td>QA<\\/td><td>various<\\/td><td>F1&EM<\\/td><\\/tr><tr><td>BoolQ<\\/td><td>SuperGLUE<\\/td><td>boolean QA<\\/td><td>Wikipedia<\\/td><td>accuracy<\\/td><\\/tr><tr><td>WiC<\\/td><td>SuperGLUE<\\/td><td>word sense disambiguation<\\/td><td>lexical databases<\\/td><td>accuracy<\\/td><\\/tr><tr><td>WSC<\\/td><td>SuperGLUE<\\/td><td>coreference \\/ commonsense<\\/td><td>fiction books<\\/td><td>accuracy<\\/td><\\/tr><tr><td>COPA<\\/td><td>SuperGLUE<\\/td><td>commonsense reasoning<\\/td><td>various<\\/td><td>accuracy<\\/td><\\/tr><tr><td>CB<\\/td><td>SuperGLUE<\\/td><td>NLI<\\/td><td>various<\\/td><td>accuracy<\\/td><\\/tr><tr><td>Sectors<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><tr><td>Pillars 1D<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><tr><td>Subpillars 1D<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><tr><td>Pillars 2D<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><tr><td>Subpillars 2D<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><\\/table><\\/body><\\/html>\",\"table_summary\":\"The table lists 15 datasets categorized under GLUE, SuperGLUE, and HumSet, detailing their tasks, domains, and evaluation metrics. GLUE and SuperGLUE tasks include NLI, sentiment analysis, and QA, while HumSet focuses on classification for humanitarian response.\"}\n\n... # only display 2 rows in JSON format, more are truncated due to length constraint based on max_tokens (5000)"}
{"role": "assistant", "content": "[Thought]: The retrieved tables do not contain the specific GLUE performance table. Let's try a more targeted retrieval from the `sections` table by searching for the section that discusses the GLUE benchmark results in more detail, specifically Table 2.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT section_title, section_content FROM sections JOIN metadata ON sections.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '9b06b24b-0afc-5ccb-95fc-c662395d291d' AND section_content LIKE '%Table 2%GLUE%';\")"}
{"role": "user", "content": "[Observation]:\n{\"section_title\":\"5.2 Transfer Learning Performance\",\"section_content\":\"Results on GLUE. Table 2 shows the evaluation results on the GLUE benchmark using RoBERTaBASE. The evaluation metrics are Pearson\\u2019s correlation for STS-B, Matthews\\u2019 correlation for CoLA, and accuracy for the rest. We average the results over several runs and report the corresponding standard deviation in the subscripts. Overall, the two-stage models obtain strong gains, outperforming STL and joint MTL models. Remarkably, all variants of SCALEARN, including the highly parameter-effcient SCALEARNUNI$\\\\scriptstyle\\\\mathrm{FORM++}$ achieve similarly good results with only a fraction of the parameters of ADAPTERFUSION. Comparing the different variations of our method, while SCALEARN shows the best results, the other models also perform highly competitively.\\nResults on SuperGLUE. Table 3 shows the results on SuperGLUE for all methods considered. The evaluation metrics are F1 for MultiRC and ReCoRD and accuracy for the other tasks. We observe similar patterns on this benchmark: two-stage models generally outperform other baselines. In this benchmark, SCALEARN and SCALEA $_{\\\\mathrm{RN++}}$ improve upon ADAPTERFUSION by 2 percentage points of the average results. Notably, we observe performance drops for various joint MTL models in comparison to other models (up to $-27\\\\%$ when comparing HYPERFORMER $^{++}$ and ADAPTER). This may be a signal of the sensitivity of these models to the selection of tasks. Furthermore, the subpar performance of AdapterSoup suggests that calculating weights using sentence similarity is not appropriate for our specifc problem setup. In contrast, the other two-stage MTL models (and, in particular, our SCALEARN models) do not show any considerable performance decreases.\\n\\nResults on HumSet. Table 4 shows the results on HumSet using XLM-RBASE with the F1-score as the evaluation metric. Similarly, SCALEARN performs the best among all the methods, whereas the more parameter-effcient variants of SCALEARN are only marginally weaker in performance. On this benchmark, in particular, all joint MTL methods show poor performance, highlighting the sensitivity of these methods to task selection (up to $-27\\\\%$ for STL and MTL versions of FINETUNE).\\nWe conduct an ablation study on the effect on different combinatorial operators in SCALEARN, reported in Appendix A.3. In Appendix A.5, we provide further experiments and analyses of the results along with the results of GLUE and SuperGLUE using RoBERTaLARGE, HumSet using XLM-RLARGE, and for the combination of all tasks from GLUE and SuperGLUE. Finally, we provide an analysis of the scaling coeffcients of SCALEARNUNIFORM and SCALEARNUNIFORM $^{++}$ in Appendix A.4, revealing the effect of various source adapters on a target task.\"}\n{\"section_title\":\"A.6 Complete Few-Shot Results\",\"section_content\":\"To obtain a more complete understanding of the few-shot capabilities of ADAPTER, ADAPTERFUSION, and SCALEARN, we show few-shot transfer learning results for each dataset, as well as for every variant of SCALEARN (cf. $\\\\S\\\\ 5.3\\\\rangle$ .\\nFew-shot results using RoBERTaBASE. Table 14 shows the few-shot transfer learning performance of the methods on the GLUE benchmark using $k~=~\\\\{4,16,32,100\\\\}$ samples. Table 15 shows the performance of the methods on SuperGLUE. Table 16 shows the performance of the methods on HumSet (on XLM-R)BASE. Finally, Table 17 shows the results when training on the combination of all GLUE and SuperGLUE tasks, resulting in $|S|=15$ source tasks.\\nFew-shot results using RoBERTaLARGE. Figure 4 provides an overview, comparing the few-shot learning capabilities of ADAPTER, ADAPTERFUSION, and SCALEARN when using RoBERTaLARGE. Moreover, Table 18 shows the few-shot learning performance of the methods on the GLUE benchmark using $k\\\\,=\\\\,\\\\{4{,}16{,}32{,}100\\\\}$ samples. Table 19 shows the performance of the methods on SuperGLUE. Table 20 shows the performance of the methods on HumSet (on XLM-RLARGE). Finally, Table 21 shows the results when training on the combination of all GLUE and SuperGLUE tasks.\\n\\nFigure 10: SCALEARNUNIFORM $^{++}$ scaling coeffcients on GLUE, SuperGLUE, and HumSet using RoBERTaBASE for GLUE and SuperGLUE and XLM-RBASE for HumSet on seed 0.\\nTable 9: Evaluation results on GLUE using RoBERTaLARGE. (Top) STL models, only learning a single task at a time. (Middle) Joint MTL methods, learning all tasks simultaneously. (Bottom) Two-stage MTL methods, composing the knowledge of several source adapters. The overall best results are underlined, and the best results among the two-stage MTL models are shown in bold.\\nTable 19: Complete few-shot transfer learning results on SuperGLUE with $k=\\\\{4,\\\\!16,\\\\!32,\\\\!100\\\\}$ training samples for each target task using RoBERTaLARGE.\"}\n\nIn total, 2 rows are displayed in JSON format."}
{"role": "assistant", "content": "[Thought]: The section content mentions that Table 2 contains the evaluation results on the GLUE benchmark. Let's extract the specific content of Table 2 from the `tables` table.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT table_content FROM tables JOIN pages ON tables.ref_page_id = pages.page_id JOIN metadata ON pages.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '9b06b24b-0afc-5ccb-95fc-c662395d291d' AND table_summary LIKE '%Table 2%GLUE%';\")"}
{"role": "user", "content": "[Observation]: [Warning]: The SQL execution result is empty, please check the SQL first."}
{"role": "assistant", "content": "[Thought]: The SQL query did not return any results, so let's try a broader filter to see if we can find the relevant table.\n[Action]:\nRetrieveFromDatabase(sql=\"SELECT table_content, table_summary FROM tables JOIN pages ON tables.ref_page_id = pages.page_id JOIN metadata ON pages.ref_paper_id = metadata.paper_id WHERE metadata.paper_id = '9b06b24b-0afc-5ccb-95fc-c662395d291d' AND table_summary LIKE '%GLUE%';\")"}
{"role": "user", "content": "[Observation]:\n{\"table_content\":\"<html><body><table><tr><td>Model<\\/td><td>ReCoRD<\\/td><td>MultiRC<\\/td><td>BoolQ<\\/td><td>WiC<\\/td><td>WSC<\\/td><td>COPA<\\/td><td>CB<\\/td><td>RTE<\\/td><td>Avg.<\\/td><\\/tr><tr><td>FINETUNE<\\/td><td>71.610.84<\\/td><td>71.641.15<\\/td><td>76.801.34<\\/td><td>66.382.08<\\/td><td>63.460.00<\\/td><td>68.606.74<\\/td><td>81.964.33<\\/td><td>73.472.05<\\/td><td>71.742.32<\\/td><\\/tr><tr><td>ADAPTER<\\/td><td>79.020.62<\\/td><td>72.840.48<\\/td><td>76.711.38<\\/td><td>65.581.56<\\/td><td>63.460.00<\\/td><td>70.204.13<\\/td><td>84.823.18<\\/td><td>72.892.54<\\/td><td>73.191.74<\\/td><\\/tr><tr><td>PROPETL<\\/td><td>80.290.24<\\/td><td>73.070.49<\\/td><td>76.580.78<\\/td><td>66.601.65<\\/td><td>63.460.00<\\/td><td>70.603.44<\\/td><td>84.463.86<\\/td><td>74.192.03<\\/td><td>73.691.53<\\/td><\\/tr><tr><td>COMPACTER++<\\/td><td>77.692.67<\\/td><td>70.440.57<\\/td><td>75.880.96<\\/td><td>66.461.63<\\/td><td>63.460.00<\\/td><td>68.304.00<\\/td><td>87.683.62<\\/td><td>72.022.21<\\/td><td>72.741.96<\\/td><\\/tr><tr><td>(IA)3<\\/td><td>75.270.23<\\/td><td>70.320.49<\\/td><td>76.310.79<\\/td><td>67.071.68<\\/td><td>63.350.32<\\/td><td>69.303.37<\\/td><td>87.324.57<\\/td><td>72.562.23<\\/td><td>72.691.71<\\/td><\\/tr><tr><td>LORA<\\/td><td>79.600.46<\\/td><td>71.960.36<\\/td><td>76.580.74<\\/td><td>65.141.17<\\/td><td>63.460.00<\\/td><td>68.204.05<\\/td><td>86.433.17<\\/td><td>70.408.33<\\/td><td>72.722.28<\\/td><\\/tr><tr><td>FINETUNE-M<\\/td><td>72.210.28<\\/td><td>72.110.68<\\/td><td>76.393.07<\\/td><td>52.191.11<\\/td><td>63.460.00<\\/td><td>74.333.40<\\/td><td>84.520.84<\\/td><td>74.857.42<\\/td><td>71.262.10<\\/td><\\/tr><tr><td>ADAPTER-M<\\/td><td>72.430.64<\\/td><td>72.460.43<\\/td><td>75.322.78<\\/td><td>51.991.74<\\/td><td>59.942.97<\\/td><td>71.673.40<\\/td><td>86.311.68<\\/td><td>76.531.06<\\/td><td>70.831.84<\\/td><\\/tr><tr><td>PROPETL-M<\\/td><td>73.140.19<\\/td><td>72.070.58<\\/td><td>73.913.27<\\/td><td>50.730.99<\\/td><td>59.625.44<\\/td><td>74.003.27<\\/td><td>82.141.46<\\/td><td>73.653.83<\\/td><td>69.912.38<\\/td><\\/tr><tr><td>HYPERFORMER<\\/td><td>65.934.47<\\/td><td>33.5433.54<\\/td><td>74.011.10<\\/td><td>55.491.72<\\/td><td>52.8810.58<\\/td><td>55.502.50<\\/td><td>71.437.14<\\/td><td>61.739.03<\\/td><td>58.818.76<\\/td><\\/tr><tr><td>HYPERFORMER++<\\/td><td>24.508.13<\\/td><td>19.4727.53<\\/td><td>62.170.00<\\/td><td>50.000.00<\\/td><td>63.460.00<\\/td><td>54.333.30<\\/td><td>49.400.84<\\/td><td>49.092.56<\\/td><td>46.555.30<\\/td><\\/tr><tr><td>ADAPTERFUSION<\\/td><td>78.820.49<\\/td><td>71.791.67<\\/td><td>76.720.55<\\/td><td>66.571.24<\\/td><td>63.460.00<\\/td><td>73.104.51<\\/td><td>82.322.85<\\/td><td>76.032.38<\\/td><td>73.601.71<\\/td><\\/tr><tr><td>ADAPTERSOUP<\\/td><td>64.260.13<\\/td><td>33.624.28<\\/td><td>68.840.31<\\/td><td>58.530.60<\\/td><td>63.460.00<\\/td><td>52.402.41<\\/td><td>70.890.86<\\/td><td>57.830.93<\\/td><td>58.731.19<\\/td><\\/tr><tr><td>SCALEARN<\\/td><td>79.520.06<\\/td><td>73.220.44<\\/td><td>77.270.68<\\/td><td>66.351.20<\\/td><td>63.460.00<\\/td><td>74.802.15<\\/td><td>90.892.59<\\/td><td>78.882.14<\\/td><td>75.551.16<\\/td><\\/tr><tr><td>SCALEARNUNIFORM<\\/td><td>80.130.38<\\/td><td>71.910.60<\\/td><td>76.060.41<\\/td><td>67.371.22<\\/td><td>62.501.27<\\/td><td>71.201.23<\\/td><td>89.111.97<\\/td><td>75.310.90<\\/td><td>74.201.00<\\/td><\\/tr><tr><td>SCALEARN++<\\/td><td>80.130.09<\\/td><td>72.710.57<\\/td><td>76.440.53<\\/td><td>67.131.24<\\/td><td>62.262.28<\\/td><td>75.201.93<\\/td><td>93.042.14<\\/td><td>79.030.95<\\/td><td>75.741.22<\\/td><\\/tr><tr><td>SCALEARNUNIFORM++<\\/td><td>79.790.14<\\/td><td>71.750.38<\\/td><td>76.130.52<\\/td><td>67.870.89<\\/td><td>63.460.00<\\/td><td>74.001.70<\\/td><td>91.612.53<\\/td><td>74.841.58<\\/td><td>74.930.97<\\/td><\\/tr><\\/table><\\/body><\\/html>\",\"table_summary\":\"Table 3 evaluates RoBERTaBASE models on SuperGLUE tasks, showing performance metrics for ReCoRD, MultiRC, BoolQ, WiC, WSC, COPA, CB, RTE, and average scores. SCALEARN++ achieves the highest average score of 75.74.\"}\n{\"table_content\":\"<html><body><table><tr><td>Name<\\/td><td>Category<\\/td><td>Task<\\/td><td>Domain<\\/td><td>Metric<\\/td><\\/tr><tr><td>MNLI<\\/td><td>GLUE<\\/td><td>NLI<\\/td><td>various<\\/td><td>accuracy<\\/td><\\/tr><tr><td>QQP<\\/td><td>GLUE<\\/td><td>paraphrase detection<\\/td><td>social QA<\\/td><td>accuracy & F1<\\/td><\\/tr><tr><td>QNLI<\\/td><td>GLUE<\\/td><td>NLI<\\/td><td>Wikipedia<\\/td><td>accuracy<\\/td><\\/tr><tr><td>SST-2<\\/td><td>GLUE<\\/td><td>sentiment analysis<\\/td><td>Movie Reviews<\\/td><td>accuracy<\\/td><\\/tr><tr><td>STS-B<\\/td><td>GLUE<\\/td><td>sentence similarity<\\/td><td>various<\\/td><td>Pearson & Spearman corr.<\\/td><\\/tr><tr><td>MRPC<\\/td><td>GLUE<\\/td><td>paraphrase detection<\\/td><td>news<\\/td><td>accuracy & F1<\\/td><\\/tr><tr><td>RTE<\\/td><td>GLUE<\\/td><td>NLI<\\/td><td>News, Wikipedia<\\/td><td>accuracy<\\/td><\\/tr><tr><td>CoLA<\\/td><td>GLUE<\\/td><td>acceptability<\\/td><td>various<\\/td><td>Matthews\\u2019 corr.<\\/td><\\/tr><tr><td>ReCoRD<\\/td><td>SuperGLUE<\\/td><td>cloze-style QA<\\/td><td>news (CNN, Daily Mail)<\\/td><td>F1 &EM<\\/td><\\/tr><tr><td>MultiRC<\\/td><td>SuperGLUE<\\/td><td>QA<\\/td><td>various<\\/td><td>F1&EM<\\/td><\\/tr><tr><td>BoolQ<\\/td><td>SuperGLUE<\\/td><td>boolean QA<\\/td><td>Wikipedia<\\/td><td>accuracy<\\/td><\\/tr><tr><td>WiC<\\/td><td>SuperGLUE<\\/td><td>word sense disambiguation<\\/td><td>lexical databases<\\/td><td>accuracy<\\/td><\\/tr><tr><td>WSC<\\/td><td>SuperGLUE<\\/td><td>coreference \\/ commonsense<\\/td><td>fiction books<\\/td><td>accuracy<\\/td><\\/tr><tr><td>COPA<\\/td><td>SuperGLUE<\\/td><td>commonsense reasoning<\\/td><td>various<\\/td><td>accuracy<\\/td><\\/tr><tr><td>CB<\\/td><td>SuperGLUE<\\/td><td>NLI<\\/td><td>various<\\/td><td>accuracy<\\/td><\\/tr><tr><td>Sectors<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><tr><td>Pillars 1D<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><tr><td>Subpillars 1D<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><tr><td>Pillars 2D<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><tr><td>Subpillars 2D<\\/td><td>HumSet<\\/td><td>classification<\\/td><td>humanitarian crisis response<\\/td><td>F1 & precision<\\/td><\\/tr><\\/table><\\/body><\\/html>\",\"table_summary\":\"The table lists 15 datasets categorized under GLUE, SuperGLUE, and HumSet, detailing their tasks, domains, and evaluation metrics. GLUE and SuperGLUE tasks include NLI, sentiment analysis, and QA, while HumSet focuses on classification for humanitarian response.\"}\n\n... # only display 2 rows in JSON format, more are truncated due to length constraint based on max_tokens (5000)"}
